/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package eZmaxApi.models


import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * A Custom Ezsignfoldertype Object
 *
 * @param pkiEzsignfoldertypeID The unique ID of the Ezsignfoldertype.
 * @param sEzsignfoldertypeNameX The name of the Ezsignfoldertype in the language of the requester
 * @param bEzsignfoldertypeSendproofezsignsigner Whether we send the proof in the email to Ezsignsigner
 * @param bEzsignfoldertypeIncludeproofsigner THIS FIELD WILL BE DELETED. Whether we include the proof with the signed Ezsigndocument for Ezsignsigners
 * @param bEzsignfoldertypeIncludeproofuser Whether we include the proof with the signed Ezsigndocument for users
 * @param bEzsignfoldertypeAllowdownloadattachmentezsignsigner Whether we allow the Ezsigndocument to be downloaded by an Ezsignsigner
 * @param bEzsignfoldertypeAllowdownloadproofezsignsigner Whether we allow the proof to be downloaded by an Ezsignsigner
 * @param bEzsignfoldertypeDelegate Wheter if delegation of signature is allowed to another user or not
 * @param bEzsignfoldertypeReassign Wheter if Reassignment of signature is allowed to another signatory or not
 */


data class CustomEzsignfoldertypeResponse (

    /* The unique ID of the Ezsignfoldertype. */
    @Json(name = "pkiEzsignfoldertypeID")
    val pkiEzsignfoldertypeID: kotlin.Int,

    /* The name of the Ezsignfoldertype in the language of the requester */
    @Json(name = "sEzsignfoldertypeNameX")
    val sEzsignfoldertypeNameX: kotlin.String? = null,

    /* Whether we send the proof in the email to Ezsignsigner */
    @Json(name = "bEzsignfoldertypeSendproofezsignsigner")
    val bEzsignfoldertypeSendproofezsignsigner: kotlin.Boolean? = null,

    /* THIS FIELD WILL BE DELETED. Whether we include the proof with the signed Ezsigndocument for Ezsignsigners */
    @Json(name = "bEzsignfoldertypeIncludeproofsigner")
    val bEzsignfoldertypeIncludeproofsigner: kotlin.Boolean? = null,

    /* Whether we include the proof with the signed Ezsigndocument for users */
    @Json(name = "bEzsignfoldertypeIncludeproofuser")
    val bEzsignfoldertypeIncludeproofuser: kotlin.Boolean? = null,

    /* Whether we allow the Ezsigndocument to be downloaded by an Ezsignsigner */
    @Json(name = "bEzsignfoldertypeAllowdownloadattachmentezsignsigner")
    val bEzsignfoldertypeAllowdownloadattachmentezsignsigner: kotlin.Boolean? = null,

    /* Whether we allow the proof to be downloaded by an Ezsignsigner */
    @Json(name = "bEzsignfoldertypeAllowdownloadproofezsignsigner")
    val bEzsignfoldertypeAllowdownloadproofezsignsigner: kotlin.Boolean? = null,

    /* Wheter if delegation of signature is allowed to another user or not */
    @Json(name = "bEzsignfoldertypeDelegate")
    val bEzsignfoldertypeDelegate: kotlin.Boolean? = null,

    /* Wheter if Reassignment of signature is allowed to another signatory or not */
    @Json(name = "bEzsignfoldertypeReassign")
    val bEzsignfoldertypeReassign: kotlin.Boolean? = null

)

