/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package eZmaxApi.models

import eZmaxApi.models.ActivesessionResponse
import eZmaxApi.models.ActivesessionResponseCompoundApikey
import eZmaxApi.models.ActivesessionResponseCompoundUser
import eZmaxApi.models.FieldEActivesessionEzsign
import eZmaxApi.models.FieldEActivesessionEzsignaccess
import eZmaxApi.models.FieldEActivesessionEzsignprepaid
import eZmaxApi.models.FieldEActivesessionOrigin
import eZmaxApi.models.FieldEActivesessionRealestateinprogress
import eZmaxApi.models.FieldEActivesessionUsertype
import eZmaxApi.models.FieldEActivesessionWeekdaystart
import eZmaxApi.models.FieldESystemconfigurationEzsignofficeplan
import eZmaxApi.models.FieldEUserEzsignaccess
import eZmaxApi.models.FieldEUserEzsignprepaid

import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * Payload for GET /1/object/activesession/getCurrent
 *
 * @param eActivesessionUsertype 
 * @param eActivesessionOrigin 
 * @param eActivesessionWeekdaystart 
 * @param fkiLanguageID The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English|
 * @param sCompanyNameX The Name of the Company in the language of the requester
 * @param sDepartmentNameX The Name of the Department in the language of the requester
 * @param bActivesessionDebug Whether the active session is in debug or not
 * @param bActivesessionIssuperadmin Whether the active session is superadmin or not
 * @param eActivesessionEzsignaccess 
 * @param pksCustomerCode The customer code assigned to your account
 * @param fkiSystemconfigurationtypeID The unique ID of the Systemconfigurationtype
 * @param eUserEzsignaccess 
 * @param aPkiPermissionID An array of permissions granted to the user or api key
 * @param objUserReal 
 * @param aEModuleInternalname An Array of Registered modules.  These are the modules that are Licensed to be used by the User or the API Key.
 * @param bActivesessionAttachment Can access attachment when we clone a user
 * @param bActivesessionCanafe Can access canafe when we clone a user
 * @param bActivesessionFinancial Can access financial element when we clone a user
 * @param bActivesessionRealestatecompleted Can access closed realestate folders when we clone a user
 * @param eActivesessionEzsign 
 * @param eActivesessionEzsignprepaid 
 * @param eActivesessionRealestateinprogress 
 * @param fkiSignatureID The unique ID of the Signature
 * @param fkiEzsignuserID The unique ID of the Ezsignuser
 * @param bSystemconfigurationEzsignpaidbyoffice Whether if Ezsign is paid by the company or not
 * @param eSystemconfigurationEzsignofficeplan 
 * @param eUserEzsignprepaid 
 * @param bUserEzsigntrial Whether the User's eZsign subscription is a trial
 * @param dtUserEzsignprepaidexpiration The eZsign prepaid expiration date
 * @param objUserCloned 
 * @param objApikey 
 */


data class ActivesessionResponseCompound (

    @Json(name = "eActivesessionUsertype")
    override val eActivesessionUsertype: FieldEActivesessionUsertype,

    @Json(name = "eActivesessionOrigin")
    override val eActivesessionOrigin: FieldEActivesessionOrigin,

    @Json(name = "eActivesessionWeekdaystart")
    override val eActivesessionWeekdaystart: FieldEActivesessionWeekdaystart,

    /* The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English| */
    @Json(name = "fkiLanguageID")
    override val fkiLanguageID: kotlin.Int,

    /* The Name of the Company in the language of the requester */
    @Json(name = "sCompanyNameX")
    override val sCompanyNameX: kotlin.String,

    /* The Name of the Department in the language of the requester */
    @Json(name = "sDepartmentNameX")
    override val sDepartmentNameX: kotlin.String,

    /* Whether the active session is in debug or not */
    @Json(name = "bActivesessionDebug")
    override val bActivesessionDebug: kotlin.Boolean,

    /* Whether the active session is superadmin or not */
    @Json(name = "bActivesessionIssuperadmin")
    override val bActivesessionIssuperadmin: kotlin.Boolean,

    @Json(name = "eActivesessionEzsignaccess")
    override val eActivesessionEzsignaccess: FieldEActivesessionEzsignaccess,

    /* The customer code assigned to your account */
    @Json(name = "pksCustomerCode")
    override val pksCustomerCode: kotlin.String,

    /* The unique ID of the Systemconfigurationtype */
    @Json(name = "fkiSystemconfigurationtypeID")
    override val fkiSystemconfigurationtypeID: kotlin.Int,

    @Json(name = "eUserEzsignaccess")
    val eUserEzsignaccess: FieldEUserEzsignaccess,

    /* An array of permissions granted to the user or api key */
    @Json(name = "a_pkiPermissionID")
    val aPkiPermissionID: kotlin.collections.List<kotlin.Int>,

    @Json(name = "objUserReal")
    val objUserReal: ActivesessionResponseCompoundUser,

    /* An Array of Registered modules.  These are the modules that are Licensed to be used by the User or the API Key. */
    @Json(name = "a_eModuleInternalname")
    val aEModuleInternalname: kotlin.collections.List<kotlin.String>,

    /* Can access attachment when we clone a user */
    @Json(name = "bActivesessionAttachment")
    override val bActivesessionAttachment: kotlin.Boolean? = null,

    /* Can access canafe when we clone a user */
    @Json(name = "bActivesessionCanafe")
    override val bActivesessionCanafe: kotlin.Boolean? = null,

    /* Can access financial element when we clone a user */
    @Json(name = "bActivesessionFinancial")
    override val bActivesessionFinancial: kotlin.Boolean? = null,

    /* Can access closed realestate folders when we clone a user */
    @Json(name = "bActivesessionRealestatecompleted")
    override val bActivesessionRealestatecompleted: kotlin.Boolean? = null,

    @Json(name = "eActivesessionEzsign")
    override val eActivesessionEzsign: FieldEActivesessionEzsign? = null,

    @Json(name = "eActivesessionEzsignprepaid")
    override val eActivesessionEzsignprepaid: FieldEActivesessionEzsignprepaid? = null,

    @Json(name = "eActivesessionRealestateinprogress")
    override val eActivesessionRealestateinprogress: FieldEActivesessionRealestateinprogress? = null,

    /* The unique ID of the Signature */
    @Json(name = "fkiSignatureID")
    override val fkiSignatureID: kotlin.Int? = null,

    /* The unique ID of the Ezsignuser */
    @Json(name = "fkiEzsignuserID")
    val fkiEzsignuserID: kotlin.Int? = null,

    /* Whether if Ezsign is paid by the company or not */
    @Json(name = "bSystemconfigurationEzsignpaidbyoffice")
    val bSystemconfigurationEzsignpaidbyoffice: kotlin.Boolean? = null,

    @Json(name = "eSystemconfigurationEzsignofficeplan")
    val eSystemconfigurationEzsignofficeplan: FieldESystemconfigurationEzsignofficeplan? = null,

    @Json(name = "eUserEzsignprepaid")
    val eUserEzsignprepaid: FieldEUserEzsignprepaid? = null,

    /* Whether the User's eZsign subscription is a trial */
    @Json(name = "bUserEzsigntrial")
    val bUserEzsigntrial: kotlin.Boolean? = null,

    /* The eZsign prepaid expiration date */
    @Json(name = "dtUserEzsignprepaidexpiration")
    val dtUserEzsignprepaidexpiration: kotlin.String? = null,

    @Json(name = "objUserCloned")
    val objUserCloned: ActivesessionResponseCompoundUser? = null,

    @Json(name = "objApikey")
    val objApikey: ActivesessionResponseCompoundApikey? = null

) : ActivesessionResponse {


}

