/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package eZmaxApi.models

import eZmaxApi.models.CommonAudit
import eZmaxApi.models.CustomEzsignfoldertypeResponse
import eZmaxApi.models.CustomTimezoneWithCodeResponse
import eZmaxApi.models.EzsignfolderResponseCompound
import eZmaxApi.models.FieldEEzsignfolderCompletion
import eZmaxApi.models.FieldEEzsignfolderSendreminderfrequency
import eZmaxApi.models.FieldEEzsignfolderStep

import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * Payload for GET /1/object/ezsignfolder/{pkiEzsignfolderID}
 *
 * @param pkiEzsignfolderID The unique ID of the Ezsignfolder
 * @param eEzsignfolderCompletion 
 * @param sEzsignfolderDescription The description of the Ezsignfolder
 * @param fkiEzsignfoldertypeID The unique ID of the Ezsignfoldertype.
 * @param objEzsignfoldertype 
 * @param fkiTimezoneID The unique ID of the Timezone
 * @param sEzsignfoldertypeNameX 
 * @param fkiBillingentityinternalID The unique ID of the Billingentityinternal.
 * @param sBillingentityinternalDescriptionX The description of the Billingentityinternal in the language of the requester
 * @param fkiEzsigntsarequirementID The unique ID of the Ezsigntsarequirement.  Determine if a Time Stamping Authority should add a timestamp on each of the signature. Valid values:  |Value|Description| |-|-| |1|No. TSA Timestamping will requested. This will make all signatures a lot faster since no round-trip to the TSA server will be required. Timestamping will be made using eZsign server's time.| |2|Best effort. Timestamping from a Time Stamping Authority will be requested but is not mandatory. In the very improbable case it cannot be completed, the timestamping will be made using eZsign server's time. **Additional fee applies**| |3|Mandatory. Timestamping from a Time Stamping Authority will be requested and is mandatory. In the very improbable case it cannot be completed, the signature will fail and the user will be asked to retry. **Additional fee applies**|
 * @param sEzsigntsarequirementDescriptionX The description of the Ezsigntsarequirement in the language of the requester
 * @param tEzsignfolderNote Note about the Ezsignfolder
 * @param bEzsignfolderIsdisposable If the Ezsigndocument can be disposed
 * @param eEzsignfolderSendreminderfrequency 
 * @param iEzsignfolderSendreminderfirstdays The number of days before the the first reminder sending
 * @param iEzsignfolderSendreminderotherdays The number of days after the first reminder sending
 * @param dtEzsignfolderDelayedsenddate The date and time at which the Ezsignfolder will be sent in the future.
 * @param dtEzsignfolderDuedate The maximum date and time at which the Ezsignfolder can be signed.
 * @param dtEzsignfolderSentdate The date and time at which the Ezsignfolder was sent the last time.
 * @param dtEzsignfolderScheduledarchive The scheduled date and time at which the Ezsignfolder should be archived.
 * @param dtEzsignfolderScheduleddispose The scheduled date at which the Ezsignfolder should be Disposed.
 * @param eEzsignfolderStep 
 * @param dtEzsignfolderClose The date and time at which the Ezsignfolder was closed. Either by applying the last signature or by completing it prematurely.
 * @param tEzsignfolderMessage A custom text message that will be added to the email sent.
 * @param objAudit 
 * @param sEzsignfolderExternalid This field can be used to store an External ID from the client's system.  Anything can be stored in this field, it will never be evaluated by the eZmax system and will be returned AS-IS.  To store multiple values, consider using a JSON formatted structure, a URL encoded string, a CSV or any other custom format. 
 * @param objTimezone 
 */


class EzsignfolderGetObjectV1ResponseMPayload (

    /* The unique ID of the Ezsignfolder */
    @Json(name = "pkiEzsignfolderID")
    override val pkiEzsignfolderID: kotlin.Int,

    @Json(name = "eEzsignfolderCompletion")
    override val eEzsignfolderCompletion: FieldEEzsignfolderCompletion,

    /* The description of the Ezsignfolder */
    @Json(name = "sEzsignfolderDescription")
    override val sEzsignfolderDescription: kotlin.String,

    /* The unique ID of the Ezsignfoldertype. */
    @Json(name = "fkiEzsignfoldertypeID")
    override val fkiEzsignfoldertypeID: kotlin.Int? = null,

    @Json(name = "objEzsignfoldertype")
    override val objEzsignfoldertype: CustomEzsignfoldertypeResponse? = null,

    /* The unique ID of the Timezone */
    @Json(name = "fkiTimezoneID")
    override val fkiTimezoneID: kotlin.Int? = null,

    @Json(name = "sEzsignfoldertypeNameX")
    @Deprecated(message = "This property is deprecated.")
    override val sEzsignfoldertypeNameX: kotlin.String? = null,

    /* The unique ID of the Billingentityinternal. */
    @Json(name = "fkiBillingentityinternalID")
    override val fkiBillingentityinternalID: kotlin.Int? = null,

    /* The description of the Billingentityinternal in the language of the requester */
    @Json(name = "sBillingentityinternalDescriptionX")
    override val sBillingentityinternalDescriptionX: kotlin.String? = null,

    /* The unique ID of the Ezsigntsarequirement.  Determine if a Time Stamping Authority should add a timestamp on each of the signature. Valid values:  |Value|Description| |-|-| |1|No. TSA Timestamping will requested. This will make all signatures a lot faster since no round-trip to the TSA server will be required. Timestamping will be made using eZsign server's time.| |2|Best effort. Timestamping from a Time Stamping Authority will be requested but is not mandatory. In the very improbable case it cannot be completed, the timestamping will be made using eZsign server's time. **Additional fee applies**| |3|Mandatory. Timestamping from a Time Stamping Authority will be requested and is mandatory. In the very improbable case it cannot be completed, the signature will fail and the user will be asked to retry. **Additional fee applies**| */
    @Json(name = "fkiEzsigntsarequirementID")
    override val fkiEzsigntsarequirementID: kotlin.Int? = null,

    /* The description of the Ezsigntsarequirement in the language of the requester */
    @Json(name = "sEzsigntsarequirementDescriptionX")
    override val sEzsigntsarequirementDescriptionX: kotlin.String? = null,

    /* Note about the Ezsignfolder */
    @Json(name = "tEzsignfolderNote")
    override val tEzsignfolderNote: kotlin.String? = null,

    /* If the Ezsigndocument can be disposed */
    @Json(name = "bEzsignfolderIsdisposable")
    override val bEzsignfolderIsdisposable: kotlin.Boolean? = null,

    @Json(name = "eEzsignfolderSendreminderfrequency")
    @Deprecated(message = "This property is deprecated.")
    override val eEzsignfolderSendreminderfrequency: FieldEEzsignfolderSendreminderfrequency? = null,

    /* The number of days before the the first reminder sending */
    @Json(name = "iEzsignfolderSendreminderfirstdays")
    override val iEzsignfolderSendreminderfirstdays: kotlin.Int? = null,

    /* The number of days after the first reminder sending */
    @Json(name = "iEzsignfolderSendreminderotherdays")
    override val iEzsignfolderSendreminderotherdays: kotlin.Int? = null,

    /* The date and time at which the Ezsignfolder will be sent in the future. */
    @Json(name = "dtEzsignfolderDelayedsenddate")
    override val dtEzsignfolderDelayedsenddate: kotlin.String? = null,

    /* The maximum date and time at which the Ezsignfolder can be signed. */
    @Json(name = "dtEzsignfolderDuedate")
    override val dtEzsignfolderDuedate: kotlin.String? = null,

    /* The date and time at which the Ezsignfolder was sent the last time. */
    @Json(name = "dtEzsignfolderSentdate")
    override val dtEzsignfolderSentdate: kotlin.String? = null,

    /* The scheduled date and time at which the Ezsignfolder should be archived. */
    @Json(name = "dtEzsignfolderScheduledarchive")
    override val dtEzsignfolderScheduledarchive: kotlin.String? = null,

    /* The scheduled date at which the Ezsignfolder should be Disposed. */
    @Json(name = "dtEzsignfolderScheduleddispose")
    override val dtEzsignfolderScheduleddispose: kotlin.String? = null,

    @Json(name = "eEzsignfolderStep")
    override val eEzsignfolderStep: FieldEEzsignfolderStep? = null,

    /* The date and time at which the Ezsignfolder was closed. Either by applying the last signature or by completing it prematurely. */
    @Json(name = "dtEzsignfolderClose")
    override val dtEzsignfolderClose: kotlin.String? = null,

    /* A custom text message that will be added to the email sent. */
    @Json(name = "tEzsignfolderMessage")
    override val tEzsignfolderMessage: kotlin.String? = null,

    @Json(name = "objAudit")
    override val objAudit: CommonAudit? = null,

    /* This field can be used to store an External ID from the client's system.  Anything can be stored in this field, it will never be evaluated by the eZmax system and will be returned AS-IS.  To store multiple values, consider using a JSON formatted structure, a URL encoded string, a CSV or any other custom format.  */
    @Json(name = "sEzsignfolderExternalid")
    override val sEzsignfolderExternalid: kotlin.String? = null,

    @Json(name = "objTimezone")
    override val objTimezone: CustomTimezoneWithCodeResponse? = null

) : EzsignfolderResponseCompound {


}

