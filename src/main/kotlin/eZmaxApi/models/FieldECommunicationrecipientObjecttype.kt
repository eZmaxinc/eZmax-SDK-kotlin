/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package eZmaxApi.models


import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * The object type for the Communicationrecipient
 *
 * Values: Agent,Agentincorporation,Assistant,Broker,Contact,Customer,Employee,Externalbroker,Ezcomagent,Ezcomcompany,Ezsignsigner,Franchiseoffice,Notary,Rewardmember,Supplier,User
 */

@JsonClass(generateAdapter = false)
enum class FieldECommunicationrecipientObjecttype(val value: kotlin.String) {

    @Json(name = "Agent")
    Agent("Agent"),

    @Json(name = "Agentincorporation")
    Agentincorporation("Agentincorporation"),

    @Json(name = "Assistant")
    Assistant("Assistant"),

    @Json(name = "Broker")
    Broker("Broker"),

    @Json(name = "Contact")
    Contact("Contact"),

    @Json(name = "Customer")
    Customer("Customer"),

    @Json(name = "Employee")
    Employee("Employee"),

    @Json(name = "Externalbroker")
    Externalbroker("Externalbroker"),

    @Json(name = "Ezcomagent")
    Ezcomagent("Ezcomagent"),

    @Json(name = "Ezcomcompany")
    Ezcomcompany("Ezcomcompany"),

    @Json(name = "Ezsignsigner")
    Ezsignsigner("Ezsignsigner"),

    @Json(name = "Franchiseoffice")
    Franchiseoffice("Franchiseoffice"),

    @Json(name = "Notary")
    Notary("Notary"),

    @Json(name = "Rewardmember")
    Rewardmember("Rewardmember"),

    @Json(name = "Supplier")
    Supplier("Supplier"),

    @Json(name = "User")
    User("User");

    /**
     * Override [toString()] to avoid using the enum variable name as the value, and instead use
     * the actual value defined in the API spec file.
     *
     * This solves a problem when the variable name and its value are different, and ensures that
     * the client sends the correct enum values to the server always.
     */
    override fun toString(): kotlin.String = value

    companion object {
        /**
         * Converts the provided [data] to a [String] on success, null otherwise.
         */
        fun encode(data: kotlin.Any?): kotlin.String? = if (data is FieldECommunicationrecipientObjecttype) "$data" else null

        /**
         * Returns a valid [FieldECommunicationrecipientObjecttype] for [data], null otherwise.
         */
        fun decode(data: kotlin.Any?): FieldECommunicationrecipientObjecttype? = data?.let {
          val normalizedData = "$it".lowercase()
          values().firstOrNull { value ->
            it == value || normalizedData == "$value".lowercase()
          }
        }
    }
}

