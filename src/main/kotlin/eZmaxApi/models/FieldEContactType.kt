/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package eZmaxApi.models


import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * The type of the Contact
 *
 * Values: Agent,Assistant,BankAccount,Borrower,Buyer,Company,ContractCreator,Creditcardmerchant,Customer,Depositreceipt,Employee,ExternalBroker,EzsignSigner,EzsignUser,EzcomAgent,EzcomApprover,FinancialInstitution,FranchiseBroker,Franchisefranchisecontact,Franchisefranchisesignatory,FranchiseOfficeBroker,FranchiseCompany,FranchiseOwner,Lead,MarketingCampaignSample,Notary,Payer,Petowner,PrivateTo,RewardMember,RewardRepresentative,Seller,Shared,Supplier,Survey,Inspector
 */

@JsonClass(generateAdapter = false)
enum class FieldEContactType(val value: kotlin.String) {

    @Json(name = "Agent")
    Agent("Agent"),

    @Json(name = "Assistant")
    Assistant("Assistant"),

    @Json(name = "BankAccount")
    BankAccount("BankAccount"),

    @Json(name = "Borrower")
    Borrower("Borrower"),

    @Json(name = "Buyer")
    Buyer("Buyer"),

    @Json(name = "Company")
    Company("Company"),

    @Json(name = "ContractCreator")
    ContractCreator("ContractCreator"),

    @Json(name = "Creditcardmerchant")
    Creditcardmerchant("Creditcardmerchant"),

    @Json(name = "Customer")
    Customer("Customer"),

    @Json(name = "Depositreceipt")
    Depositreceipt("Depositreceipt"),

    @Json(name = "Employee")
    Employee("Employee"),

    @Json(name = "ExternalBroker")
    ExternalBroker("ExternalBroker"),

    @Json(name = "EzsignSigner")
    EzsignSigner("EzsignSigner"),

    @Json(name = "EzsignUser")
    EzsignUser("EzsignUser"),

    @Json(name = "EzcomAgent")
    EzcomAgent("EzcomAgent"),

    @Json(name = "EzcomApprover")
    EzcomApprover("EzcomApprover"),

    @Json(name = "FinancialInstitution")
    FinancialInstitution("FinancialInstitution"),

    @Json(name = "FranchiseBroker")
    FranchiseBroker("FranchiseBroker"),

    @Json(name = "Franchisefranchisecontact")
    Franchisefranchisecontact("Franchisefranchisecontact"),

    @Json(name = "Franchisefranchisesignatory")
    Franchisefranchisesignatory("Franchisefranchisesignatory"),

    @Json(name = "FranchiseOfficeBroker")
    FranchiseOfficeBroker("FranchiseOfficeBroker"),

    @Json(name = "FranchiseCompany")
    FranchiseCompany("FranchiseCompany"),

    @Json(name = "FranchiseOwner")
    FranchiseOwner("FranchiseOwner"),

    @Json(name = "Lead")
    Lead("Lead"),

    @Json(name = "MarketingCampaignSample")
    MarketingCampaignSample("MarketingCampaignSample"),

    @Json(name = "Notary")
    Notary("Notary"),

    @Json(name = "Payer")
    Payer("Payer"),

    @Json(name = "Petowner")
    Petowner("Petowner"),

    @Json(name = "PrivateTo")
    PrivateTo("PrivateTo"),

    @Json(name = "RewardMember")
    RewardMember("RewardMember"),

    @Json(name = "RewardRepresentative")
    RewardRepresentative("RewardRepresentative"),

    @Json(name = "Seller")
    Seller("Seller"),

    @Json(name = "Shared")
    Shared("Shared"),

    @Json(name = "Supplier")
    Supplier("Supplier"),

    @Json(name = "Survey")
    Survey("Survey"),

    @Json(name = "Inspector")
    Inspector("Inspector");

    /**
     * Override [toString()] to avoid using the enum variable name as the value, and instead use
     * the actual value defined in the API spec file.
     *
     * This solves a problem when the variable name and its value are different, and ensures that
     * the client sends the correct enum values to the server always.
     */
    override fun toString(): kotlin.String = value

    companion object {
        /**
         * Converts the provided [data] to a [String] on success, null otherwise.
         */
        fun encode(data: kotlin.Any?): kotlin.String? = if (data is FieldEContactType) "$data" else null

        /**
         * Returns a valid [FieldEContactType] for [data], null otherwise.
         */
        fun decode(data: kotlin.Any?): FieldEContactType? = data?.let {
          val normalizedData = "$it".lowercase()
          values().firstOrNull { value ->
            it == value || normalizedData == "$value".lowercase()
          }
        }
    }
}

