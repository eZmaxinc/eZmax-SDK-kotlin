/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package eZmaxApi.models

import eZmaxApi.models.EzsignfoldersignerassociationMinusResponseCompoundMinusUser
import eZmaxApi.models.EzsignsignerMinusResponseCompound
import eZmaxApi.models.EzsignsignergroupMinusResponseCompound
import eZmaxApi.models.UsergroupMinusResponseCompound

import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * Payload for GET /1/object/ezsignfoldersignerassociation/{pkiEzsignfoldersignerassociationID}
 *
 * @param pkiEzsignfoldersignerassociationID The unique ID of the Ezsignfoldersignerassociation
 * @param fkiEzsignfolderID The unique ID of the Ezsignfolder
 * @param bEzsignfoldersignerassociationDelayedsend If this flag is true the signatory is part of a delayed send.
 * @param bEzsignfoldersignerassociationReceivecopy If this flag is true. The signatory will receive a copy of every signed Ezsigndocument even if it ain't required to sign the document.
 * @param tEzsignfoldersignerassociationMessage A custom text message that will be added to the email sent.
 * @param objEzsignsignergroup 
 * @param objUser 
 * @param objUsergroup 
 * @param objEzsignsigner 
 */


data class EzsignfoldersignerassociationMinusGetObjectMinusV1MinusResponseMinusMPayload (

    /* The unique ID of the Ezsignfoldersignerassociation */
    @Json(name = "pkiEzsignfoldersignerassociationID")
    val pkiEzsignfoldersignerassociationID: kotlin.Int,

    /* The unique ID of the Ezsignfolder */
    @Json(name = "fkiEzsignfolderID")
    val fkiEzsignfolderID: kotlin.Int,

    /* If this flag is true the signatory is part of a delayed send. */
    @Json(name = "bEzsignfoldersignerassociationDelayedsend")
    val bEzsignfoldersignerassociationDelayedsend: kotlin.Boolean,

    /* If this flag is true. The signatory will receive a copy of every signed Ezsigndocument even if it ain't required to sign the document. */
    @Json(name = "bEzsignfoldersignerassociationReceivecopy")
    val bEzsignfoldersignerassociationReceivecopy: kotlin.Boolean,

    /* A custom text message that will be added to the email sent. */
    @Json(name = "tEzsignfoldersignerassociationMessage")
    val tEzsignfoldersignerassociationMessage: kotlin.String,

    @Json(name = "objEzsignsignergroup")
    val objEzsignsignergroup: EzsignsignergroupMinusResponseCompound? = null,

    @Json(name = "objUser")
    val objUser: EzsignfoldersignerassociationMinusResponseCompoundMinusUser? = null,

    @Json(name = "objUsergroup")
    val objUsergroup: UsergroupMinusResponseCompound? = null,

    @Json(name = "objEzsignsigner")
    val objEzsignsigner: EzsignsignerMinusResponseCompound? = null

)

