/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package eZmaxApi.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import eZmaxApi.models.ApikeyMinusCreateObjectMinusV2MinusRequest
import eZmaxApi.models.ApikeyMinusCreateObjectMinusV2MinusResponse
import eZmaxApi.models.ApikeyMinusEditObjectMinusV1MinusRequest
import eZmaxApi.models.ApikeyMinusEditObjectMinusV1MinusResponse
import eZmaxApi.models.ApikeyMinusEditPermissionsMinusV1MinusRequest
import eZmaxApi.models.ApikeyMinusEditPermissionsMinusV1MinusResponse
import eZmaxApi.models.ApikeyMinusGetCorsMinusV1MinusResponse
import eZmaxApi.models.ApikeyMinusGetListMinusV1MinusResponse
import eZmaxApi.models.ApikeyMinusGetObjectMinusV2MinusResponse
import eZmaxApi.models.ApikeyMinusGetPermissionsMinusV1MinusResponse
import eZmaxApi.models.ApikeyMinusGetSubnetsMinusV1MinusResponse
import eZmaxApi.models.ApikeyMinusRegenerateMinusV1MinusRequest
import eZmaxApi.models.ApikeyMinusRegenerateMinusV1MinusResponse
import eZmaxApi.models.CommonMinusResponseMinusError
import eZmaxApi.models.HeaderMinusAcceptMinusLanguage

import com.squareup.moshi.Json

import eZmaxApi.infrastructure.ApiClient
import eZmaxApi.infrastructure.ApiResponse
import eZmaxApi.infrastructure.ClientException
import eZmaxApi.infrastructure.ClientError
import eZmaxApi.infrastructure.ServerException
import eZmaxApi.infrastructure.ServerError
import eZmaxApi.infrastructure.MultiValueMap
import eZmaxApi.infrastructure.PartConfig
import eZmaxApi.infrastructure.RequestConfig
import eZmaxApi.infrastructure.RequestMethod
import eZmaxApi.infrastructure.ResponseType
import eZmaxApi.infrastructure.Success
import eZmaxApi.infrastructure.toMultiValue

class ObjectApikeyApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://prod.api.appcluster01.ca-central-1.ezmax.com/rest")
        }
    }

    /**
     * Create a new Apikey
     * The endpoint allows to create one or many elements at once.
     * @param apikeyMinusCreateObjectMinusV2MinusRequest 
     * @return ApikeyMinusCreateObjectMinusV2MinusResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apikeyCreateObjectV2(apikeyMinusCreateObjectMinusV2MinusRequest: ApikeyMinusCreateObjectMinusV2MinusRequest) : ApikeyMinusCreateObjectMinusV2MinusResponse {
        val localVarResponse = apikeyCreateObjectV2WithHttpInfo(apikeyMinusCreateObjectMinusV2MinusRequest = apikeyMinusCreateObjectMinusV2MinusRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ApikeyMinusCreateObjectMinusV2MinusResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Create a new Apikey
     * The endpoint allows to create one or many elements at once.
     * @param apikeyMinusCreateObjectMinusV2MinusRequest 
     * @return ApiResponse<ApikeyMinusCreateObjectMinusV2MinusResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apikeyCreateObjectV2WithHttpInfo(apikeyMinusCreateObjectMinusV2MinusRequest: ApikeyMinusCreateObjectMinusV2MinusRequest) : ApiResponse<ApikeyMinusCreateObjectMinusV2MinusResponse?> {
        val localVariableConfig = apikeyCreateObjectV2RequestConfig(apikeyMinusCreateObjectMinusV2MinusRequest = apikeyMinusCreateObjectMinusV2MinusRequest)

        return request<ApikeyMinusCreateObjectMinusV2MinusRequest, ApikeyMinusCreateObjectMinusV2MinusResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apikeyCreateObjectV2
     *
     * @param apikeyMinusCreateObjectMinusV2MinusRequest 
     * @return RequestConfig
     */
    fun apikeyCreateObjectV2RequestConfig(apikeyMinusCreateObjectMinusV2MinusRequest: ApikeyMinusCreateObjectMinusV2MinusRequest) : RequestConfig<ApikeyMinusCreateObjectMinusV2MinusRequest> {
        val localVariableBody = apikeyMinusCreateObjectMinusV2MinusRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/2/object/apikey",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Edit an existing Apikey
     * 
     * @param pkiApikeyID The unique ID of the Apikey
     * @param apikeyMinusEditObjectMinusV1MinusRequest 
     * @return ApikeyMinusEditObjectMinusV1MinusResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apikeyEditObjectV1(pkiApikeyID: kotlin.Int, apikeyMinusEditObjectMinusV1MinusRequest: ApikeyMinusEditObjectMinusV1MinusRequest) : ApikeyMinusEditObjectMinusV1MinusResponse {
        val localVarResponse = apikeyEditObjectV1WithHttpInfo(pkiApikeyID = pkiApikeyID, apikeyMinusEditObjectMinusV1MinusRequest = apikeyMinusEditObjectMinusV1MinusRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ApikeyMinusEditObjectMinusV1MinusResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Edit an existing Apikey
     * 
     * @param pkiApikeyID The unique ID of the Apikey
     * @param apikeyMinusEditObjectMinusV1MinusRequest 
     * @return ApiResponse<ApikeyMinusEditObjectMinusV1MinusResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apikeyEditObjectV1WithHttpInfo(pkiApikeyID: kotlin.Int, apikeyMinusEditObjectMinusV1MinusRequest: ApikeyMinusEditObjectMinusV1MinusRequest) : ApiResponse<ApikeyMinusEditObjectMinusV1MinusResponse?> {
        val localVariableConfig = apikeyEditObjectV1RequestConfig(pkiApikeyID = pkiApikeyID, apikeyMinusEditObjectMinusV1MinusRequest = apikeyMinusEditObjectMinusV1MinusRequest)

        return request<ApikeyMinusEditObjectMinusV1MinusRequest, ApikeyMinusEditObjectMinusV1MinusResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apikeyEditObjectV1
     *
     * @param pkiApikeyID The unique ID of the Apikey
     * @param apikeyMinusEditObjectMinusV1MinusRequest 
     * @return RequestConfig
     */
    fun apikeyEditObjectV1RequestConfig(pkiApikeyID: kotlin.Int, apikeyMinusEditObjectMinusV1MinusRequest: ApikeyMinusEditObjectMinusV1MinusRequest) : RequestConfig<ApikeyMinusEditObjectMinusV1MinusRequest> {
        val localVariableBody = apikeyMinusEditObjectMinusV1MinusRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/1/object/apikey/{pkiApikeyID}".replace("{"+"pkiApikeyID"+"}", encodeURIComponent(pkiApikeyID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Edit multiple Permissions
     * Using this endpoint, you can edit multiple Permissions at the same time.
     * @param pkiApikeyID 
     * @param apikeyMinusEditPermissionsMinusV1MinusRequest 
     * @return ApikeyMinusEditPermissionsMinusV1MinusResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apikeyEditPermissionsV1(pkiApikeyID: kotlin.Int, apikeyMinusEditPermissionsMinusV1MinusRequest: ApikeyMinusEditPermissionsMinusV1MinusRequest) : ApikeyMinusEditPermissionsMinusV1MinusResponse {
        val localVarResponse = apikeyEditPermissionsV1WithHttpInfo(pkiApikeyID = pkiApikeyID, apikeyMinusEditPermissionsMinusV1MinusRequest = apikeyMinusEditPermissionsMinusV1MinusRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ApikeyMinusEditPermissionsMinusV1MinusResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Edit multiple Permissions
     * Using this endpoint, you can edit multiple Permissions at the same time.
     * @param pkiApikeyID 
     * @param apikeyMinusEditPermissionsMinusV1MinusRequest 
     * @return ApiResponse<ApikeyMinusEditPermissionsMinusV1MinusResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apikeyEditPermissionsV1WithHttpInfo(pkiApikeyID: kotlin.Int, apikeyMinusEditPermissionsMinusV1MinusRequest: ApikeyMinusEditPermissionsMinusV1MinusRequest) : ApiResponse<ApikeyMinusEditPermissionsMinusV1MinusResponse?> {
        val localVariableConfig = apikeyEditPermissionsV1RequestConfig(pkiApikeyID = pkiApikeyID, apikeyMinusEditPermissionsMinusV1MinusRequest = apikeyMinusEditPermissionsMinusV1MinusRequest)

        return request<ApikeyMinusEditPermissionsMinusV1MinusRequest, ApikeyMinusEditPermissionsMinusV1MinusResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apikeyEditPermissionsV1
     *
     * @param pkiApikeyID 
     * @param apikeyMinusEditPermissionsMinusV1MinusRequest 
     * @return RequestConfig
     */
    fun apikeyEditPermissionsV1RequestConfig(pkiApikeyID: kotlin.Int, apikeyMinusEditPermissionsMinusV1MinusRequest: ApikeyMinusEditPermissionsMinusV1MinusRequest) : RequestConfig<ApikeyMinusEditPermissionsMinusV1MinusRequest> {
        val localVariableBody = apikeyMinusEditPermissionsMinusV1MinusRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/1/object/apikey/{pkiApikeyID}/editPermissions".replace("{"+"pkiApikeyID"+"}", encodeURIComponent(pkiApikeyID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Retrieve an existing Apikey&#39;s cors
     * 
     * @param pkiApikeyID 
     * @return ApikeyMinusGetCorsMinusV1MinusResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apikeyGetCorsV1(pkiApikeyID: kotlin.Int) : ApikeyMinusGetCorsMinusV1MinusResponse {
        val localVarResponse = apikeyGetCorsV1WithHttpInfo(pkiApikeyID = pkiApikeyID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ApikeyMinusGetCorsMinusV1MinusResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieve an existing Apikey&#39;s cors
     * 
     * @param pkiApikeyID 
     * @return ApiResponse<ApikeyMinusGetCorsMinusV1MinusResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apikeyGetCorsV1WithHttpInfo(pkiApikeyID: kotlin.Int) : ApiResponse<ApikeyMinusGetCorsMinusV1MinusResponse?> {
        val localVariableConfig = apikeyGetCorsV1RequestConfig(pkiApikeyID = pkiApikeyID)

        return request<Unit, ApikeyMinusGetCorsMinusV1MinusResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apikeyGetCorsV1
     *
     * @param pkiApikeyID 
     * @return RequestConfig
     */
    fun apikeyGetCorsV1RequestConfig(pkiApikeyID: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/1/object/apikey/{pkiApikeyID}/getCors".replace("{"+"pkiApikeyID"+"}", encodeURIComponent(pkiApikeyID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter eOrderBy
     */
     enum class EOrderBy_apikeyGetListV1(val value: kotlin.String) {
         @Json(name = "pkiApikeyID_ASC") pkiApikeyID_ASC("pkiApikeyID_ASC"),
         @Json(name = "pkiApikeyID_DESC") pkiApikeyID_DESC("pkiApikeyID_DESC"),
         @Json(name = "sApikeyDescriptionX_ASC") sApikeyDescriptionX_ASC("sApikeyDescriptionX_ASC"),
         @Json(name = "sApikeyDescriptionX_DESC") sApikeyDescriptionX_DESC("sApikeyDescriptionX_DESC"),
         @Json(name = "bApikeyIssigned_ASC") bApikeyIssigned_ASC("bApikeyIssigned_ASC"),
         @Json(name = "bApikeyIssigned_DESC") bApikeyIssigned_DESC("bApikeyIssigned_DESC"),
         @Json(name = "bApikeyIsactive_ASC") bApikeyIsactive_ASC("bApikeyIsactive_ASC"),
         @Json(name = "bApikeyIsactive_DESC") bApikeyIsactive_DESC("bApikeyIsactive_DESC"),
         @Json(name = "sUserFirstname_ASC") sUserFirstname_ASC("sUserFirstname_ASC"),
         @Json(name = "sUserFirstname_DESC") sUserFirstname_DESC("sUserFirstname_DESC"),
         @Json(name = "sUserLastname_ASC") sUserLastname_ASC("sUserLastname_ASC"),
         @Json(name = "sUserLastname_DESC") sUserLastname_DESC("sUserLastname_DESC")
     }

    /**
     * Retrieve Apikey list
     * Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |---|---|
     * @param eOrderBy Specify how you want the results to be sorted (optional)
     * @param iRowMax  (optional, default to 10000)
     * @param iRowOffset  (optional, default to 0)
     * @param acceptLanguage  (optional)
     * @param sFilter  (optional)
     * @return ApikeyMinusGetListMinusV1MinusResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apikeyGetListV1(eOrderBy: EOrderBy_apikeyGetListV1? = null, iRowMax: kotlin.Int? = 10000, iRowOffset: kotlin.Int? = 0, acceptLanguage: HeaderMinusAcceptMinusLanguage? = null, sFilter: kotlin.String? = null) : ApikeyMinusGetListMinusV1MinusResponse {
        val localVarResponse = apikeyGetListV1WithHttpInfo(eOrderBy = eOrderBy, iRowMax = iRowMax, iRowOffset = iRowOffset, acceptLanguage = acceptLanguage, sFilter = sFilter)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ApikeyMinusGetListMinusV1MinusResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieve Apikey list
     * Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |---|---|
     * @param eOrderBy Specify how you want the results to be sorted (optional)
     * @param iRowMax  (optional, default to 10000)
     * @param iRowOffset  (optional, default to 0)
     * @param acceptLanguage  (optional)
     * @param sFilter  (optional)
     * @return ApiResponse<ApikeyMinusGetListMinusV1MinusResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apikeyGetListV1WithHttpInfo(eOrderBy: EOrderBy_apikeyGetListV1?, iRowMax: kotlin.Int?, iRowOffset: kotlin.Int?, acceptLanguage: HeaderMinusAcceptMinusLanguage?, sFilter: kotlin.String?) : ApiResponse<ApikeyMinusGetListMinusV1MinusResponse?> {
        val localVariableConfig = apikeyGetListV1RequestConfig(eOrderBy = eOrderBy, iRowMax = iRowMax, iRowOffset = iRowOffset, acceptLanguage = acceptLanguage, sFilter = sFilter)

        return request<Unit, ApikeyMinusGetListMinusV1MinusResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apikeyGetListV1
     *
     * @param eOrderBy Specify how you want the results to be sorted (optional)
     * @param iRowMax  (optional, default to 10000)
     * @param iRowOffset  (optional, default to 0)
     * @param acceptLanguage  (optional)
     * @param sFilter  (optional)
     * @return RequestConfig
     */
    fun apikeyGetListV1RequestConfig(eOrderBy: EOrderBy_apikeyGetListV1?, iRowMax: kotlin.Int?, iRowOffset: kotlin.Int?, acceptLanguage: HeaderMinusAcceptMinusLanguage?, sFilter: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (eOrderBy != null) {
                    put("eOrderBy", listOf(eOrderBy.toString()))
                }
                if (iRowMax != null) {
                    put("iRowMax", listOf(iRowMax.toString()))
                }
                if (iRowOffset != null) {
                    put("iRowOffset", listOf(iRowOffset.toString()))
                }
                if (sFilter != null) {
                    put("sFilter", listOf(sFilter.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/1/object/apikey/getList",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Retrieve an existing Apikey
     * 
     * @param pkiApikeyID The unique ID of the Apikey
     * @return ApikeyMinusGetObjectMinusV2MinusResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apikeyGetObjectV2(pkiApikeyID: kotlin.Int) : ApikeyMinusGetObjectMinusV2MinusResponse {
        val localVarResponse = apikeyGetObjectV2WithHttpInfo(pkiApikeyID = pkiApikeyID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ApikeyMinusGetObjectMinusV2MinusResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieve an existing Apikey
     * 
     * @param pkiApikeyID The unique ID of the Apikey
     * @return ApiResponse<ApikeyMinusGetObjectMinusV2MinusResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apikeyGetObjectV2WithHttpInfo(pkiApikeyID: kotlin.Int) : ApiResponse<ApikeyMinusGetObjectMinusV2MinusResponse?> {
        val localVariableConfig = apikeyGetObjectV2RequestConfig(pkiApikeyID = pkiApikeyID)

        return request<Unit, ApikeyMinusGetObjectMinusV2MinusResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apikeyGetObjectV2
     *
     * @param pkiApikeyID The unique ID of the Apikey
     * @return RequestConfig
     */
    fun apikeyGetObjectV2RequestConfig(pkiApikeyID: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/2/object/apikey/{pkiApikeyID}".replace("{"+"pkiApikeyID"+"}", encodeURIComponent(pkiApikeyID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Retrieve an existing Apikey&#39;s Permissions
     * 
     * @param pkiApikeyID 
     * @return ApikeyMinusGetPermissionsMinusV1MinusResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apikeyGetPermissionsV1(pkiApikeyID: kotlin.Int) : ApikeyMinusGetPermissionsMinusV1MinusResponse {
        val localVarResponse = apikeyGetPermissionsV1WithHttpInfo(pkiApikeyID = pkiApikeyID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ApikeyMinusGetPermissionsMinusV1MinusResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieve an existing Apikey&#39;s Permissions
     * 
     * @param pkiApikeyID 
     * @return ApiResponse<ApikeyMinusGetPermissionsMinusV1MinusResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apikeyGetPermissionsV1WithHttpInfo(pkiApikeyID: kotlin.Int) : ApiResponse<ApikeyMinusGetPermissionsMinusV1MinusResponse?> {
        val localVariableConfig = apikeyGetPermissionsV1RequestConfig(pkiApikeyID = pkiApikeyID)

        return request<Unit, ApikeyMinusGetPermissionsMinusV1MinusResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apikeyGetPermissionsV1
     *
     * @param pkiApikeyID 
     * @return RequestConfig
     */
    fun apikeyGetPermissionsV1RequestConfig(pkiApikeyID: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/1/object/apikey/{pkiApikeyID}/getPermissions".replace("{"+"pkiApikeyID"+"}", encodeURIComponent(pkiApikeyID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Retrieve an existing Apikey&#39;s subnets
     * 
     * @param pkiApikeyID 
     * @return ApikeyMinusGetSubnetsMinusV1MinusResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apikeyGetSubnetsV1(pkiApikeyID: kotlin.Int) : ApikeyMinusGetSubnetsMinusV1MinusResponse {
        val localVarResponse = apikeyGetSubnetsV1WithHttpInfo(pkiApikeyID = pkiApikeyID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ApikeyMinusGetSubnetsMinusV1MinusResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieve an existing Apikey&#39;s subnets
     * 
     * @param pkiApikeyID 
     * @return ApiResponse<ApikeyMinusGetSubnetsMinusV1MinusResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apikeyGetSubnetsV1WithHttpInfo(pkiApikeyID: kotlin.Int) : ApiResponse<ApikeyMinusGetSubnetsMinusV1MinusResponse?> {
        val localVariableConfig = apikeyGetSubnetsV1RequestConfig(pkiApikeyID = pkiApikeyID)

        return request<Unit, ApikeyMinusGetSubnetsMinusV1MinusResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apikeyGetSubnetsV1
     *
     * @param pkiApikeyID 
     * @return RequestConfig
     */
    fun apikeyGetSubnetsV1RequestConfig(pkiApikeyID: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/1/object/apikey/{pkiApikeyID}/getSubnets".replace("{"+"pkiApikeyID"+"}", encodeURIComponent(pkiApikeyID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Regenerate the Apikey
     * 
     * @param pkiApikeyID 
     * @param apikeyMinusRegenerateMinusV1MinusRequest 
     * @return ApikeyMinusRegenerateMinusV1MinusResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apikeyRegenerateV1(pkiApikeyID: kotlin.Int, apikeyMinusRegenerateMinusV1MinusRequest: ApikeyMinusRegenerateMinusV1MinusRequest) : ApikeyMinusRegenerateMinusV1MinusResponse {
        val localVarResponse = apikeyRegenerateV1WithHttpInfo(pkiApikeyID = pkiApikeyID, apikeyMinusRegenerateMinusV1MinusRequest = apikeyMinusRegenerateMinusV1MinusRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ApikeyMinusRegenerateMinusV1MinusResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Regenerate the Apikey
     * 
     * @param pkiApikeyID 
     * @param apikeyMinusRegenerateMinusV1MinusRequest 
     * @return ApiResponse<ApikeyMinusRegenerateMinusV1MinusResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apikeyRegenerateV1WithHttpInfo(pkiApikeyID: kotlin.Int, apikeyMinusRegenerateMinusV1MinusRequest: ApikeyMinusRegenerateMinusV1MinusRequest) : ApiResponse<ApikeyMinusRegenerateMinusV1MinusResponse?> {
        val localVariableConfig = apikeyRegenerateV1RequestConfig(pkiApikeyID = pkiApikeyID, apikeyMinusRegenerateMinusV1MinusRequest = apikeyMinusRegenerateMinusV1MinusRequest)

        return request<ApikeyMinusRegenerateMinusV1MinusRequest, ApikeyMinusRegenerateMinusV1MinusResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apikeyRegenerateV1
     *
     * @param pkiApikeyID 
     * @param apikeyMinusRegenerateMinusV1MinusRequest 
     * @return RequestConfig
     */
    fun apikeyRegenerateV1RequestConfig(pkiApikeyID: kotlin.Int, apikeyMinusRegenerateMinusV1MinusRequest: ApikeyMinusRegenerateMinusV1MinusRequest) : RequestConfig<ApikeyMinusRegenerateMinusV1MinusRequest> {
        val localVariableBody = apikeyMinusRegenerateMinusV1MinusRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/1/object/apikey/{pkiApikeyID}/regenerate".replace("{"+"pkiApikeyID"+"}", encodeURIComponent(pkiApikeyID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
