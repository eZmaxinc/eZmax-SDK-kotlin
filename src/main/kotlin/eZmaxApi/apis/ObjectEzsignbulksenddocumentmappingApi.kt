/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package eZmaxApi.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import eZmaxApi.models.CommonResponseError
import eZmaxApi.models.EzsignbulksenddocumentmappingCreateObjectV1Request
import eZmaxApi.models.EzsignbulksenddocumentmappingCreateObjectV1Response
import eZmaxApi.models.EzsignbulksenddocumentmappingDeleteObjectV1Response
import eZmaxApi.models.EzsignbulksenddocumentmappingGetObjectV2Response

import com.squareup.moshi.Json

import eZmaxApi.infrastructure.ApiClient
import eZmaxApi.infrastructure.ApiResponse
import eZmaxApi.infrastructure.ClientException
import eZmaxApi.infrastructure.ClientError
import eZmaxApi.infrastructure.ServerException
import eZmaxApi.infrastructure.ServerError
import eZmaxApi.infrastructure.MultiValueMap
import eZmaxApi.infrastructure.PartConfig
import eZmaxApi.infrastructure.RequestConfig
import eZmaxApi.infrastructure.RequestMethod
import eZmaxApi.infrastructure.ResponseType
import eZmaxApi.infrastructure.Success
import eZmaxApi.infrastructure.toMultiValue

class ObjectEzsignbulksenddocumentmappingApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://prod.api.appcluster01.ca-central-1.ezmax.com/rest")
        }
    }

    /**
     * Create a new Ezsignbulksenddocumentmapping
     * The endpoint allows to create one or many elements at once.
     * @param ezsignbulksenddocumentmappingCreateObjectV1Request 
     * @return EzsignbulksenddocumentmappingCreateObjectV1Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun ezsignbulksenddocumentmappingCreateObjectV1(ezsignbulksenddocumentmappingCreateObjectV1Request: EzsignbulksenddocumentmappingCreateObjectV1Request) : EzsignbulksenddocumentmappingCreateObjectV1Response {
        val localVarResponse = ezsignbulksenddocumentmappingCreateObjectV1WithHttpInfo(ezsignbulksenddocumentmappingCreateObjectV1Request = ezsignbulksenddocumentmappingCreateObjectV1Request)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as EzsignbulksenddocumentmappingCreateObjectV1Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Create a new Ezsignbulksenddocumentmapping
     * The endpoint allows to create one or many elements at once.
     * @param ezsignbulksenddocumentmappingCreateObjectV1Request 
     * @return ApiResponse<EzsignbulksenddocumentmappingCreateObjectV1Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun ezsignbulksenddocumentmappingCreateObjectV1WithHttpInfo(ezsignbulksenddocumentmappingCreateObjectV1Request: EzsignbulksenddocumentmappingCreateObjectV1Request) : ApiResponse<EzsignbulksenddocumentmappingCreateObjectV1Response?> {
        val localVariableConfig = ezsignbulksenddocumentmappingCreateObjectV1RequestConfig(ezsignbulksenddocumentmappingCreateObjectV1Request = ezsignbulksenddocumentmappingCreateObjectV1Request)

        return request<EzsignbulksenddocumentmappingCreateObjectV1Request, EzsignbulksenddocumentmappingCreateObjectV1Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation ezsignbulksenddocumentmappingCreateObjectV1
     *
     * @param ezsignbulksenddocumentmappingCreateObjectV1Request 
     * @return RequestConfig
     */
    fun ezsignbulksenddocumentmappingCreateObjectV1RequestConfig(ezsignbulksenddocumentmappingCreateObjectV1Request: EzsignbulksenddocumentmappingCreateObjectV1Request) : RequestConfig<EzsignbulksenddocumentmappingCreateObjectV1Request> {
        val localVariableBody = ezsignbulksenddocumentmappingCreateObjectV1Request
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/1/object/ezsignbulksenddocumentmapping",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Delete an existing Ezsignbulksenddocumentmapping
     * 
     * @param pkiEzsignbulksenddocumentmappingID 
     * @return EzsignbulksenddocumentmappingDeleteObjectV1Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun ezsignbulksenddocumentmappingDeleteObjectV1(pkiEzsignbulksenddocumentmappingID: kotlin.Int) : EzsignbulksenddocumentmappingDeleteObjectV1Response {
        val localVarResponse = ezsignbulksenddocumentmappingDeleteObjectV1WithHttpInfo(pkiEzsignbulksenddocumentmappingID = pkiEzsignbulksenddocumentmappingID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as EzsignbulksenddocumentmappingDeleteObjectV1Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Delete an existing Ezsignbulksenddocumentmapping
     * 
     * @param pkiEzsignbulksenddocumentmappingID 
     * @return ApiResponse<EzsignbulksenddocumentmappingDeleteObjectV1Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun ezsignbulksenddocumentmappingDeleteObjectV1WithHttpInfo(pkiEzsignbulksenddocumentmappingID: kotlin.Int) : ApiResponse<EzsignbulksenddocumentmappingDeleteObjectV1Response?> {
        val localVariableConfig = ezsignbulksenddocumentmappingDeleteObjectV1RequestConfig(pkiEzsignbulksenddocumentmappingID = pkiEzsignbulksenddocumentmappingID)

        return request<Unit, EzsignbulksenddocumentmappingDeleteObjectV1Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation ezsignbulksenddocumentmappingDeleteObjectV1
     *
     * @param pkiEzsignbulksenddocumentmappingID 
     * @return RequestConfig
     */
    fun ezsignbulksenddocumentmappingDeleteObjectV1RequestConfig(pkiEzsignbulksenddocumentmappingID: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/1/object/ezsignbulksenddocumentmapping/{pkiEzsignbulksenddocumentmappingID}".replace("{"+"pkiEzsignbulksenddocumentmappingID"+"}", encodeURIComponent(pkiEzsignbulksenddocumentmappingID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Retrieve an existing Ezsignbulksenddocumentmapping
     * 
     * @param pkiEzsignbulksenddocumentmappingID 
     * @return EzsignbulksenddocumentmappingGetObjectV2Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun ezsignbulksenddocumentmappingGetObjectV2(pkiEzsignbulksenddocumentmappingID: kotlin.Int) : EzsignbulksenddocumentmappingGetObjectV2Response {
        val localVarResponse = ezsignbulksenddocumentmappingGetObjectV2WithHttpInfo(pkiEzsignbulksenddocumentmappingID = pkiEzsignbulksenddocumentmappingID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as EzsignbulksenddocumentmappingGetObjectV2Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieve an existing Ezsignbulksenddocumentmapping
     * 
     * @param pkiEzsignbulksenddocumentmappingID 
     * @return ApiResponse<EzsignbulksenddocumentmappingGetObjectV2Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun ezsignbulksenddocumentmappingGetObjectV2WithHttpInfo(pkiEzsignbulksenddocumentmappingID: kotlin.Int) : ApiResponse<EzsignbulksenddocumentmappingGetObjectV2Response?> {
        val localVariableConfig = ezsignbulksenddocumentmappingGetObjectV2RequestConfig(pkiEzsignbulksenddocumentmappingID = pkiEzsignbulksenddocumentmappingID)

        return request<Unit, EzsignbulksenddocumentmappingGetObjectV2Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation ezsignbulksenddocumentmappingGetObjectV2
     *
     * @param pkiEzsignbulksenddocumentmappingID 
     * @return RequestConfig
     */
    fun ezsignbulksenddocumentmappingGetObjectV2RequestConfig(pkiEzsignbulksenddocumentmappingID: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/2/object/ezsignbulksenddocumentmapping/{pkiEzsignbulksenddocumentmappingID}".replace("{"+"pkiEzsignbulksenddocumentmappingID"+"}", encodeURIComponent(pkiEzsignbulksenddocumentmappingID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
