/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package eZmaxApi.apis

import java.io.IOException
import okhttp3.Call
import okhttp3.HttpUrl

import eZmaxApi.models.CommonResponse
import eZmaxApi.models.CommonResponseError
import eZmaxApi.models.EzsigntemplateCopyV1Request
import eZmaxApi.models.EzsigntemplateCopyV1Response
import eZmaxApi.models.EzsigntemplateCreateObjectV3Request
import eZmaxApi.models.EzsigntemplateCreateObjectV3Response
import eZmaxApi.models.EzsigntemplateEditObjectV3Request
import eZmaxApi.models.EzsigntemplateGetAutocompleteV2Response
import eZmaxApi.models.EzsigntemplateGetListV1Response
import eZmaxApi.models.EzsigntemplateGetObjectV3Response
import eZmaxApi.models.HeaderAcceptLanguage

import com.squareup.moshi.Json

import eZmaxApi.infrastructure.ApiClient
import eZmaxApi.infrastructure.ApiResponse
import eZmaxApi.infrastructure.ClientException
import eZmaxApi.infrastructure.ClientError
import eZmaxApi.infrastructure.ServerException
import eZmaxApi.infrastructure.ServerError
import eZmaxApi.infrastructure.MultiValueMap
import eZmaxApi.infrastructure.PartConfig
import eZmaxApi.infrastructure.RequestConfig
import eZmaxApi.infrastructure.RequestMethod
import eZmaxApi.infrastructure.ResponseType
import eZmaxApi.infrastructure.Success
import eZmaxApi.infrastructure.toMultiValue

class ObjectEzsigntemplateApi(basePath: kotlin.String = defaultBasePath, client: Call.Factory = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://prod.api.appcluster01.ca-central-1.ezmax.com/rest")
        }
    }

    /**
     * Copy the Ezsigntemplate
     * 
     * @param pkiEzsigntemplateID 
     * @param ezsigntemplateCopyV1Request 
     * @return EzsigntemplateCopyV1Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun ezsigntemplateCopyV1(pkiEzsigntemplateID: kotlin.Int, ezsigntemplateCopyV1Request: EzsigntemplateCopyV1Request) : EzsigntemplateCopyV1Response {
        val localVarResponse = ezsigntemplateCopyV1WithHttpInfo(pkiEzsigntemplateID = pkiEzsigntemplateID, ezsigntemplateCopyV1Request = ezsigntemplateCopyV1Request)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as EzsigntemplateCopyV1Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Copy the Ezsigntemplate
     * 
     * @param pkiEzsigntemplateID 
     * @param ezsigntemplateCopyV1Request 
     * @return ApiResponse<EzsigntemplateCopyV1Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun ezsigntemplateCopyV1WithHttpInfo(pkiEzsigntemplateID: kotlin.Int, ezsigntemplateCopyV1Request: EzsigntemplateCopyV1Request) : ApiResponse<EzsigntemplateCopyV1Response?> {
        val localVariableConfig = ezsigntemplateCopyV1RequestConfig(pkiEzsigntemplateID = pkiEzsigntemplateID, ezsigntemplateCopyV1Request = ezsigntemplateCopyV1Request)

        return request<EzsigntemplateCopyV1Request, EzsigntemplateCopyV1Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation ezsigntemplateCopyV1
     *
     * @param pkiEzsigntemplateID 
     * @param ezsigntemplateCopyV1Request 
     * @return RequestConfig
     */
    fun ezsigntemplateCopyV1RequestConfig(pkiEzsigntemplateID: kotlin.Int, ezsigntemplateCopyV1Request: EzsigntemplateCopyV1Request) : RequestConfig<EzsigntemplateCopyV1Request> {
        val localVariableBody = ezsigntemplateCopyV1Request
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/1/object/ezsigntemplate/{pkiEzsigntemplateID}/copy".replace("{"+"pkiEzsigntemplateID"+"}", encodeURIComponent(pkiEzsigntemplateID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Create a new Ezsigntemplate
     * The endpoint allows to create one or many elements at once.
     * @param ezsigntemplateCreateObjectV3Request 
     * @return EzsigntemplateCreateObjectV3Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun ezsigntemplateCreateObjectV3(ezsigntemplateCreateObjectV3Request: EzsigntemplateCreateObjectV3Request) : EzsigntemplateCreateObjectV3Response {
        val localVarResponse = ezsigntemplateCreateObjectV3WithHttpInfo(ezsigntemplateCreateObjectV3Request = ezsigntemplateCreateObjectV3Request)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as EzsigntemplateCreateObjectV3Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Create a new Ezsigntemplate
     * The endpoint allows to create one or many elements at once.
     * @param ezsigntemplateCreateObjectV3Request 
     * @return ApiResponse<EzsigntemplateCreateObjectV3Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun ezsigntemplateCreateObjectV3WithHttpInfo(ezsigntemplateCreateObjectV3Request: EzsigntemplateCreateObjectV3Request) : ApiResponse<EzsigntemplateCreateObjectV3Response?> {
        val localVariableConfig = ezsigntemplateCreateObjectV3RequestConfig(ezsigntemplateCreateObjectV3Request = ezsigntemplateCreateObjectV3Request)

        return request<EzsigntemplateCreateObjectV3Request, EzsigntemplateCreateObjectV3Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation ezsigntemplateCreateObjectV3
     *
     * @param ezsigntemplateCreateObjectV3Request 
     * @return RequestConfig
     */
    fun ezsigntemplateCreateObjectV3RequestConfig(ezsigntemplateCreateObjectV3Request: EzsigntemplateCreateObjectV3Request) : RequestConfig<EzsigntemplateCreateObjectV3Request> {
        val localVariableBody = ezsigntemplateCreateObjectV3Request
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/3/object/ezsigntemplate",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Delete an existing Ezsigntemplate
     * 
     * @param pkiEzsigntemplateID 
     * @return CommonResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun ezsigntemplateDeleteObjectV1(pkiEzsigntemplateID: kotlin.Int) : CommonResponse {
        val localVarResponse = ezsigntemplateDeleteObjectV1WithHttpInfo(pkiEzsigntemplateID = pkiEzsigntemplateID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CommonResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Delete an existing Ezsigntemplate
     * 
     * @param pkiEzsigntemplateID 
     * @return ApiResponse<CommonResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun ezsigntemplateDeleteObjectV1WithHttpInfo(pkiEzsigntemplateID: kotlin.Int) : ApiResponse<CommonResponse?> {
        val localVariableConfig = ezsigntemplateDeleteObjectV1RequestConfig(pkiEzsigntemplateID = pkiEzsigntemplateID)

        return request<Unit, CommonResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation ezsigntemplateDeleteObjectV1
     *
     * @param pkiEzsigntemplateID 
     * @return RequestConfig
     */
    fun ezsigntemplateDeleteObjectV1RequestConfig(pkiEzsigntemplateID: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/1/object/ezsigntemplate/{pkiEzsigntemplateID}".replace("{"+"pkiEzsigntemplateID"+"}", encodeURIComponent(pkiEzsigntemplateID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Edit an existing Ezsigntemplate
     * 
     * @param pkiEzsigntemplateID 
     * @param ezsigntemplateEditObjectV3Request 
     * @return CommonResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun ezsigntemplateEditObjectV3(pkiEzsigntemplateID: kotlin.Int, ezsigntemplateEditObjectV3Request: EzsigntemplateEditObjectV3Request) : CommonResponse {
        val localVarResponse = ezsigntemplateEditObjectV3WithHttpInfo(pkiEzsigntemplateID = pkiEzsigntemplateID, ezsigntemplateEditObjectV3Request = ezsigntemplateEditObjectV3Request)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CommonResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Edit an existing Ezsigntemplate
     * 
     * @param pkiEzsigntemplateID 
     * @param ezsigntemplateEditObjectV3Request 
     * @return ApiResponse<CommonResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun ezsigntemplateEditObjectV3WithHttpInfo(pkiEzsigntemplateID: kotlin.Int, ezsigntemplateEditObjectV3Request: EzsigntemplateEditObjectV3Request) : ApiResponse<CommonResponse?> {
        val localVariableConfig = ezsigntemplateEditObjectV3RequestConfig(pkiEzsigntemplateID = pkiEzsigntemplateID, ezsigntemplateEditObjectV3Request = ezsigntemplateEditObjectV3Request)

        return request<EzsigntemplateEditObjectV3Request, CommonResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation ezsigntemplateEditObjectV3
     *
     * @param pkiEzsigntemplateID 
     * @param ezsigntemplateEditObjectV3Request 
     * @return RequestConfig
     */
    fun ezsigntemplateEditObjectV3RequestConfig(pkiEzsigntemplateID: kotlin.Int, ezsigntemplateEditObjectV3Request: EzsigntemplateEditObjectV3Request) : RequestConfig<EzsigntemplateEditObjectV3Request> {
        val localVariableBody = ezsigntemplateEditObjectV3Request
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/3/object/ezsigntemplate/{pkiEzsigntemplateID}".replace("{"+"pkiEzsigntemplateID"+"}", encodeURIComponent(pkiEzsigntemplateID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter sSelector
     */
     enum class SSelectorEzsigntemplateGetAutocompleteV2(val value: kotlin.String) {
         @Json(name = "All") All("All"),
         @Json(name = "Ezsigntemplatepublic") Ezsigntemplatepublic("Ezsigntemplatepublic");

        /**
         * Override [toString()] to avoid using the enum variable name as the value, and instead use
         * the actual value defined in the API spec file.
         *
         * This solves a problem when the variable name and its value are different, and ensures that
         * the client sends the correct enum values to the server always.
         */
        override fun toString(): kotlin.String = "$value"
     }

    /**
     * enum for parameter eFilterActive
     */
     enum class EFilterActiveEzsigntemplateGetAutocompleteV2(val value: kotlin.String) {
         @Json(name = "All") All("All"),
         @Json(name = "Active") Active("Active"),
         @Json(name = "Inactive") Inactive("Inactive");

        /**
         * Override [toString()] to avoid using the enum variable name as the value, and instead use
         * the actual value defined in the API spec file.
         *
         * This solves a problem when the variable name and its value are different, and ensures that
         * the client sends the correct enum values to the server always.
         */
        override fun toString(): kotlin.String = "$value"
     }

    /**
     * Retrieve Ezsigntemplates and IDs
     * Get the list of Ezsigntemplate to be used in a dropdown or autocomplete control.
     * @param sSelector The type of Ezsigntemplates to return
     * @param eFilterActive Specify which results we want to display. (optional, default to Active)
     * @param sQuery Allow to filter the returned results (optional)
     * @param acceptLanguage  (optional)
     * @param fkiEzsignfoldertypeID The fkiEzsignfoldertypeID to use with the selector Ezsigntemplatepublic (optional)
     * @return EzsigntemplateGetAutocompleteV2Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun ezsigntemplateGetAutocompleteV2(sSelector: SSelectorEzsigntemplateGetAutocompleteV2, eFilterActive: EFilterActiveEzsigntemplateGetAutocompleteV2? = EFilterActiveEzsigntemplateGetAutocompleteV2.Active, sQuery: kotlin.String? = null, acceptLanguage: HeaderAcceptLanguage? = null, fkiEzsignfoldertypeID: kotlin.Int? = null) : EzsigntemplateGetAutocompleteV2Response {
        val localVarResponse = ezsigntemplateGetAutocompleteV2WithHttpInfo(sSelector = sSelector, eFilterActive = eFilterActive, sQuery = sQuery, acceptLanguage = acceptLanguage, fkiEzsignfoldertypeID = fkiEzsignfoldertypeID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as EzsigntemplateGetAutocompleteV2Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieve Ezsigntemplates and IDs
     * Get the list of Ezsigntemplate to be used in a dropdown or autocomplete control.
     * @param sSelector The type of Ezsigntemplates to return
     * @param eFilterActive Specify which results we want to display. (optional, default to Active)
     * @param sQuery Allow to filter the returned results (optional)
     * @param acceptLanguage  (optional)
     * @param fkiEzsignfoldertypeID The fkiEzsignfoldertypeID to use with the selector Ezsigntemplatepublic (optional)
     * @return ApiResponse<EzsigntemplateGetAutocompleteV2Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun ezsigntemplateGetAutocompleteV2WithHttpInfo(sSelector: SSelectorEzsigntemplateGetAutocompleteV2, eFilterActive: EFilterActiveEzsigntemplateGetAutocompleteV2?, sQuery: kotlin.String?, acceptLanguage: HeaderAcceptLanguage?, fkiEzsignfoldertypeID: kotlin.Int?) : ApiResponse<EzsigntemplateGetAutocompleteV2Response?> {
        val localVariableConfig = ezsigntemplateGetAutocompleteV2RequestConfig(sSelector = sSelector, eFilterActive = eFilterActive, sQuery = sQuery, acceptLanguage = acceptLanguage, fkiEzsignfoldertypeID = fkiEzsignfoldertypeID)

        return request<Unit, EzsigntemplateGetAutocompleteV2Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation ezsigntemplateGetAutocompleteV2
     *
     * @param sSelector The type of Ezsigntemplates to return
     * @param eFilterActive Specify which results we want to display. (optional, default to Active)
     * @param sQuery Allow to filter the returned results (optional)
     * @param acceptLanguage  (optional)
     * @param fkiEzsignfoldertypeID The fkiEzsignfoldertypeID to use with the selector Ezsigntemplatepublic (optional)
     * @return RequestConfig
     */
    fun ezsigntemplateGetAutocompleteV2RequestConfig(sSelector: SSelectorEzsigntemplateGetAutocompleteV2, eFilterActive: EFilterActiveEzsigntemplateGetAutocompleteV2?, sQuery: kotlin.String?, acceptLanguage: HeaderAcceptLanguage?, fkiEzsignfoldertypeID: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (eFilterActive != null) {
                    put("eFilterActive", listOf(eFilterActive.value))
                }
                if (sQuery != null) {
                    put("sQuery", listOf(sQuery.toString()))
                }
                if (fkiEzsignfoldertypeID != null) {
                    put("fkiEzsignfoldertypeID", listOf(fkiEzsignfoldertypeID.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/2/object/ezsigntemplate/getAutocomplete/{sSelector}".replace("{"+"sSelector"+"}", encodeURIComponent(sSelector.value.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter eOrderBy
     */
     enum class EOrderByEzsigntemplateGetListV1(val value: kotlin.String) {
         @Json(name = "pkiEzsigntemplateID_ASC") pkiEzsigntemplateID_ASC("pkiEzsigntemplateID_ASC"),
         @Json(name = "pkiEzsigntemplateID_DESC") pkiEzsigntemplateID_DESC("pkiEzsigntemplateID_DESC"),
         @Json(name = "fkiTeamID_ASC") fkiTeamID_ASC("fkiTeamID_ASC"),
         @Json(name = "fkiTeamID_DESC") fkiTeamID_DESC("fkiTeamID_DESC"),
         @Json(name = "fkiEzsignfoldertypeID_ASC") fkiEzsignfoldertypeID_ASC("fkiEzsignfoldertypeID_ASC"),
         @Json(name = "fkiEzsignfoldertypeID_DESC") fkiEzsignfoldertypeID_DESC("fkiEzsignfoldertypeID_DESC"),
         @Json(name = "fkiUserIDOwner_ASC") fkiUserIDOwner_ASC("fkiUserIDOwner_ASC"),
         @Json(name = "fkiUserIDOwner_DESC") fkiUserIDOwner_DESC("fkiUserIDOwner_DESC"),
         @Json(name = "fkiLanguageID_ASC") fkiLanguageID_ASC("fkiLanguageID_ASC"),
         @Json(name = "fkiLanguageID_DESC") fkiLanguageID_DESC("fkiLanguageID_DESC"),
         @Json(name = "eEzsigntemplateType_ASC") eEzsigntemplateType_ASC("eEzsigntemplateType_ASC"),
         @Json(name = "eEzsigntemplateType_DESC") eEzsigntemplateType_DESC("eEzsigntemplateType_DESC"),
         @Json(name = "sEzsigntemplateDescription_ASC") sEzsigntemplateDescription_ASC("sEzsigntemplateDescription_ASC"),
         @Json(name = "sEzsigntemplateDescription_DESC") sEzsigntemplateDescription_DESC("sEzsigntemplateDescription_DESC"),
         @Json(name = "sEzsigntemplatedocumentDescription_ASC") sEzsigntemplatedocumentDescription_ASC("sEzsigntemplatedocumentDescription_ASC"),
         @Json(name = "sEzsigntemplatedocumentDescription_DESC") sEzsigntemplatedocumentDescription_DESC("sEzsigntemplatedocumentDescription_DESC"),
         @Json(name = "iEzsigntemplatedocumentPagetotal_ASC") iEzsigntemplatedocumentPagetotal_ASC("iEzsigntemplatedocumentPagetotal_ASC"),
         @Json(name = "iEzsigntemplatedocumentPagetotal_DESC") iEzsigntemplatedocumentPagetotal_DESC("iEzsigntemplatedocumentPagetotal_DESC"),
         @Json(name = "iEzsigntemplateSignaturetotal_ASC") iEzsigntemplateSignaturetotal_ASC("iEzsigntemplateSignaturetotal_ASC"),
         @Json(name = "iEzsigntemplateSignaturetotal_DESC") iEzsigntemplateSignaturetotal_DESC("iEzsigntemplateSignaturetotal_DESC"),
         @Json(name = "sEzsignfoldertypeNameX_ASC") sEzsignfoldertypeNameX_ASC("sEzsignfoldertypeNameX_ASC"),
         @Json(name = "sEzsignfoldertypeNameX_DESC") sEzsignfoldertypeNameX_DESC("sEzsignfoldertypeNameX_DESC"),
         @Json(name = "eEzsigntemplateType_ASC") eEzsigntemplateType_ASC2("eEzsigntemplateType_ASC"),
         @Json(name = "eEzsigntemplateType_DESC") eEzsigntemplateType_DESC2("eEzsigntemplateType_DESC");

        /**
         * Override [toString()] to avoid using the enum variable name as the value, and instead use
         * the actual value defined in the API spec file.
         *
         * This solves a problem when the variable name and its value are different, and ensures that
         * the client sends the correct enum values to the server always.
         */
        override fun toString(): kotlin.String = "$value"
     }

    /**
     * Retrieve Ezsigntemplate list
     * Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |---|---| | eEzsigntemplateType | Company&lt;br&gt;Team&lt;br&gt;User&lt;br&gt;Usergroup | 
     * @param eOrderBy Specify how you want the results to be sorted (optional)
     * @param iRowMax  (optional)
     * @param iRowOffset  (optional, default to 0)
     * @param acceptLanguage  (optional)
     * @param sFilter  (optional)
     * @return EzsigntemplateGetListV1Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun ezsigntemplateGetListV1(eOrderBy: EOrderByEzsigntemplateGetListV1? = null, iRowMax: kotlin.Int? = null, iRowOffset: kotlin.Int? = 0, acceptLanguage: HeaderAcceptLanguage? = null, sFilter: kotlin.String? = null) : EzsigntemplateGetListV1Response {
        val localVarResponse = ezsigntemplateGetListV1WithHttpInfo(eOrderBy = eOrderBy, iRowMax = iRowMax, iRowOffset = iRowOffset, acceptLanguage = acceptLanguage, sFilter = sFilter)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as EzsigntemplateGetListV1Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieve Ezsigntemplate list
     * Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |---|---| | eEzsigntemplateType | Company&lt;br&gt;Team&lt;br&gt;User&lt;br&gt;Usergroup | 
     * @param eOrderBy Specify how you want the results to be sorted (optional)
     * @param iRowMax  (optional)
     * @param iRowOffset  (optional, default to 0)
     * @param acceptLanguage  (optional)
     * @param sFilter  (optional)
     * @return ApiResponse<EzsigntemplateGetListV1Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun ezsigntemplateGetListV1WithHttpInfo(eOrderBy: EOrderByEzsigntemplateGetListV1?, iRowMax: kotlin.Int?, iRowOffset: kotlin.Int?, acceptLanguage: HeaderAcceptLanguage?, sFilter: kotlin.String?) : ApiResponse<EzsigntemplateGetListV1Response?> {
        val localVariableConfig = ezsigntemplateGetListV1RequestConfig(eOrderBy = eOrderBy, iRowMax = iRowMax, iRowOffset = iRowOffset, acceptLanguage = acceptLanguage, sFilter = sFilter)

        return request<Unit, EzsigntemplateGetListV1Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation ezsigntemplateGetListV1
     *
     * @param eOrderBy Specify how you want the results to be sorted (optional)
     * @param iRowMax  (optional)
     * @param iRowOffset  (optional, default to 0)
     * @param acceptLanguage  (optional)
     * @param sFilter  (optional)
     * @return RequestConfig
     */
    fun ezsigntemplateGetListV1RequestConfig(eOrderBy: EOrderByEzsigntemplateGetListV1?, iRowMax: kotlin.Int?, iRowOffset: kotlin.Int?, acceptLanguage: HeaderAcceptLanguage?, sFilter: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (eOrderBy != null) {
                    put("eOrderBy", listOf(eOrderBy.value))
                }
                if (iRowMax != null) {
                    put("iRowMax", listOf(iRowMax.toString()))
                }
                if (iRowOffset != null) {
                    put("iRowOffset", listOf(iRowOffset.toString()))
                }
                if (sFilter != null) {
                    put("sFilter", listOf(sFilter.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/1/object/ezsigntemplate/getList",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Retrieve an existing Ezsigntemplate
     * 
     * @param pkiEzsigntemplateID 
     * @return EzsigntemplateGetObjectV3Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun ezsigntemplateGetObjectV3(pkiEzsigntemplateID: kotlin.Int) : EzsigntemplateGetObjectV3Response {
        val localVarResponse = ezsigntemplateGetObjectV3WithHttpInfo(pkiEzsigntemplateID = pkiEzsigntemplateID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as EzsigntemplateGetObjectV3Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieve an existing Ezsigntemplate
     * 
     * @param pkiEzsigntemplateID 
     * @return ApiResponse<EzsigntemplateGetObjectV3Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun ezsigntemplateGetObjectV3WithHttpInfo(pkiEzsigntemplateID: kotlin.Int) : ApiResponse<EzsigntemplateGetObjectV3Response?> {
        val localVariableConfig = ezsigntemplateGetObjectV3RequestConfig(pkiEzsigntemplateID = pkiEzsigntemplateID)

        return request<Unit, EzsigntemplateGetObjectV3Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation ezsigntemplateGetObjectV3
     *
     * @param pkiEzsigntemplateID 
     * @return RequestConfig
     */
    fun ezsigntemplateGetObjectV3RequestConfig(pkiEzsigntemplateID: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/3/object/ezsigntemplate/{pkiEzsigntemplateID}".replace("{"+"pkiEzsigntemplateID"+"}", encodeURIComponent(pkiEzsigntemplateID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
