/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package eZmaxApi.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import eZmaxApi.models.CommonMinusResponseMinusError
import eZmaxApi.models.SubnetMinusCreateObjectMinusV1MinusRequest
import eZmaxApi.models.SubnetMinusCreateObjectMinusV1MinusResponse
import eZmaxApi.models.SubnetMinusDeleteObjectMinusV1MinusResponse
import eZmaxApi.models.SubnetMinusEditObjectMinusV1MinusRequest
import eZmaxApi.models.SubnetMinusEditObjectMinusV1MinusResponse
import eZmaxApi.models.SubnetMinusGetObjectMinusV2MinusResponse

import com.squareup.moshi.Json

import eZmaxApi.infrastructure.ApiClient
import eZmaxApi.infrastructure.ApiResponse
import eZmaxApi.infrastructure.ClientException
import eZmaxApi.infrastructure.ClientError
import eZmaxApi.infrastructure.ServerException
import eZmaxApi.infrastructure.ServerError
import eZmaxApi.infrastructure.MultiValueMap
import eZmaxApi.infrastructure.PartConfig
import eZmaxApi.infrastructure.RequestConfig
import eZmaxApi.infrastructure.RequestMethod
import eZmaxApi.infrastructure.ResponseType
import eZmaxApi.infrastructure.Success
import eZmaxApi.infrastructure.toMultiValue

class ObjectSubnetApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://prod.api.appcluster01.ca-central-1.ezmax.com/rest")
        }
    }

    /**
     * Create a new Subnet
     * The endpoint allows to create one or many elements at once.
     * @param subnetMinusCreateObjectMinusV1MinusRequest 
     * @return SubnetMinusCreateObjectMinusV1MinusResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun subnetCreateObjectV1(subnetMinusCreateObjectMinusV1MinusRequest: SubnetMinusCreateObjectMinusV1MinusRequest) : SubnetMinusCreateObjectMinusV1MinusResponse {
        val localVarResponse = subnetCreateObjectV1WithHttpInfo(subnetMinusCreateObjectMinusV1MinusRequest = subnetMinusCreateObjectMinusV1MinusRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as SubnetMinusCreateObjectMinusV1MinusResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Create a new Subnet
     * The endpoint allows to create one or many elements at once.
     * @param subnetMinusCreateObjectMinusV1MinusRequest 
     * @return ApiResponse<SubnetMinusCreateObjectMinusV1MinusResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun subnetCreateObjectV1WithHttpInfo(subnetMinusCreateObjectMinusV1MinusRequest: SubnetMinusCreateObjectMinusV1MinusRequest) : ApiResponse<SubnetMinusCreateObjectMinusV1MinusResponse?> {
        val localVariableConfig = subnetCreateObjectV1RequestConfig(subnetMinusCreateObjectMinusV1MinusRequest = subnetMinusCreateObjectMinusV1MinusRequest)

        return request<SubnetMinusCreateObjectMinusV1MinusRequest, SubnetMinusCreateObjectMinusV1MinusResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation subnetCreateObjectV1
     *
     * @param subnetMinusCreateObjectMinusV1MinusRequest 
     * @return RequestConfig
     */
    fun subnetCreateObjectV1RequestConfig(subnetMinusCreateObjectMinusV1MinusRequest: SubnetMinusCreateObjectMinusV1MinusRequest) : RequestConfig<SubnetMinusCreateObjectMinusV1MinusRequest> {
        val localVariableBody = subnetMinusCreateObjectMinusV1MinusRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/1/object/subnet",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Delete an existing Subnet
     * 
     * @param pkiSubnetID The unique ID of the Subnet
     * @return SubnetMinusDeleteObjectMinusV1MinusResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun subnetDeleteObjectV1(pkiSubnetID: kotlin.Int) : SubnetMinusDeleteObjectMinusV1MinusResponse {
        val localVarResponse = subnetDeleteObjectV1WithHttpInfo(pkiSubnetID = pkiSubnetID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as SubnetMinusDeleteObjectMinusV1MinusResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Delete an existing Subnet
     * 
     * @param pkiSubnetID The unique ID of the Subnet
     * @return ApiResponse<SubnetMinusDeleteObjectMinusV1MinusResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun subnetDeleteObjectV1WithHttpInfo(pkiSubnetID: kotlin.Int) : ApiResponse<SubnetMinusDeleteObjectMinusV1MinusResponse?> {
        val localVariableConfig = subnetDeleteObjectV1RequestConfig(pkiSubnetID = pkiSubnetID)

        return request<Unit, SubnetMinusDeleteObjectMinusV1MinusResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation subnetDeleteObjectV1
     *
     * @param pkiSubnetID The unique ID of the Subnet
     * @return RequestConfig
     */
    fun subnetDeleteObjectV1RequestConfig(pkiSubnetID: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/1/object/subnet/{pkiSubnetID}".replace("{"+"pkiSubnetID"+"}", encodeURIComponent(pkiSubnetID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Edit an existing Subnet
     * 
     * @param pkiSubnetID The unique ID of the Subnet
     * @param subnetMinusEditObjectMinusV1MinusRequest 
     * @return SubnetMinusEditObjectMinusV1MinusResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun subnetEditObjectV1(pkiSubnetID: kotlin.Int, subnetMinusEditObjectMinusV1MinusRequest: SubnetMinusEditObjectMinusV1MinusRequest) : SubnetMinusEditObjectMinusV1MinusResponse {
        val localVarResponse = subnetEditObjectV1WithHttpInfo(pkiSubnetID = pkiSubnetID, subnetMinusEditObjectMinusV1MinusRequest = subnetMinusEditObjectMinusV1MinusRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as SubnetMinusEditObjectMinusV1MinusResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Edit an existing Subnet
     * 
     * @param pkiSubnetID The unique ID of the Subnet
     * @param subnetMinusEditObjectMinusV1MinusRequest 
     * @return ApiResponse<SubnetMinusEditObjectMinusV1MinusResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun subnetEditObjectV1WithHttpInfo(pkiSubnetID: kotlin.Int, subnetMinusEditObjectMinusV1MinusRequest: SubnetMinusEditObjectMinusV1MinusRequest) : ApiResponse<SubnetMinusEditObjectMinusV1MinusResponse?> {
        val localVariableConfig = subnetEditObjectV1RequestConfig(pkiSubnetID = pkiSubnetID, subnetMinusEditObjectMinusV1MinusRequest = subnetMinusEditObjectMinusV1MinusRequest)

        return request<SubnetMinusEditObjectMinusV1MinusRequest, SubnetMinusEditObjectMinusV1MinusResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation subnetEditObjectV1
     *
     * @param pkiSubnetID The unique ID of the Subnet
     * @param subnetMinusEditObjectMinusV1MinusRequest 
     * @return RequestConfig
     */
    fun subnetEditObjectV1RequestConfig(pkiSubnetID: kotlin.Int, subnetMinusEditObjectMinusV1MinusRequest: SubnetMinusEditObjectMinusV1MinusRequest) : RequestConfig<SubnetMinusEditObjectMinusV1MinusRequest> {
        val localVariableBody = subnetMinusEditObjectMinusV1MinusRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/1/object/subnet/{pkiSubnetID}".replace("{"+"pkiSubnetID"+"}", encodeURIComponent(pkiSubnetID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Retrieve an existing Subnet
     * 
     * @param pkiSubnetID The unique ID of the Subnet
     * @return SubnetMinusGetObjectMinusV2MinusResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun subnetGetObjectV2(pkiSubnetID: kotlin.Int) : SubnetMinusGetObjectMinusV2MinusResponse {
        val localVarResponse = subnetGetObjectV2WithHttpInfo(pkiSubnetID = pkiSubnetID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as SubnetMinusGetObjectMinusV2MinusResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieve an existing Subnet
     * 
     * @param pkiSubnetID The unique ID of the Subnet
     * @return ApiResponse<SubnetMinusGetObjectMinusV2MinusResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun subnetGetObjectV2WithHttpInfo(pkiSubnetID: kotlin.Int) : ApiResponse<SubnetMinusGetObjectMinusV2MinusResponse?> {
        val localVariableConfig = subnetGetObjectV2RequestConfig(pkiSubnetID = pkiSubnetID)

        return request<Unit, SubnetMinusGetObjectMinusV2MinusResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation subnetGetObjectV2
     *
     * @param pkiSubnetID The unique ID of the Subnet
     * @return RequestConfig
     */
    fun subnetGetObjectV2RequestConfig(pkiSubnetID: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/2/object/subnet/{pkiSubnetID}".replace("{"+"pkiSubnetID"+"}", encodeURIComponent(pkiSubnetID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
