/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package eZmaxApi.apis

import java.io.IOException
import okhttp3.Call
import okhttp3.HttpUrl

import eZmaxApi.models.CommonResponseError
import eZmaxApi.models.SubnetCreateObjectV1Request
import eZmaxApi.models.SubnetCreateObjectV1Response
import eZmaxApi.models.SubnetDeleteObjectV1Response
import eZmaxApi.models.SubnetEditObjectV1Request
import eZmaxApi.models.SubnetEditObjectV1Response
import eZmaxApi.models.SubnetGetObjectV2Response

import com.squareup.moshi.Json

import eZmaxApi.infrastructure.ApiClient
import eZmaxApi.infrastructure.ApiResponse
import eZmaxApi.infrastructure.ClientException
import eZmaxApi.infrastructure.ClientError
import eZmaxApi.infrastructure.ServerException
import eZmaxApi.infrastructure.ServerError
import eZmaxApi.infrastructure.MultiValueMap
import eZmaxApi.infrastructure.PartConfig
import eZmaxApi.infrastructure.RequestConfig
import eZmaxApi.infrastructure.RequestMethod
import eZmaxApi.infrastructure.ResponseType
import eZmaxApi.infrastructure.Success
import eZmaxApi.infrastructure.toMultiValue

class ObjectSubnetApi(basePath: kotlin.String = defaultBasePath, client: Call.Factory = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://prod.api.appcluster01.ca-central-1.ezmax.com/rest")
        }
    }

    /**
     * Create a new Subnet
     * The endpoint allows to create one or many elements at once.
     * @param subnetCreateObjectV1Request 
     * @return SubnetCreateObjectV1Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun subnetCreateObjectV1(subnetCreateObjectV1Request: SubnetCreateObjectV1Request) : SubnetCreateObjectV1Response {
        val localVarResponse = subnetCreateObjectV1WithHttpInfo(subnetCreateObjectV1Request = subnetCreateObjectV1Request)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as SubnetCreateObjectV1Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Create a new Subnet
     * The endpoint allows to create one or many elements at once.
     * @param subnetCreateObjectV1Request 
     * @return ApiResponse<SubnetCreateObjectV1Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun subnetCreateObjectV1WithHttpInfo(subnetCreateObjectV1Request: SubnetCreateObjectV1Request) : ApiResponse<SubnetCreateObjectV1Response?> {
        val localVariableConfig = subnetCreateObjectV1RequestConfig(subnetCreateObjectV1Request = subnetCreateObjectV1Request)

        return request<SubnetCreateObjectV1Request, SubnetCreateObjectV1Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation subnetCreateObjectV1
     *
     * @param subnetCreateObjectV1Request 
     * @return RequestConfig
     */
    fun subnetCreateObjectV1RequestConfig(subnetCreateObjectV1Request: SubnetCreateObjectV1Request) : RequestConfig<SubnetCreateObjectV1Request> {
        val localVariableBody = subnetCreateObjectV1Request
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/1/object/subnet",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Delete an existing Subnet
     * 
     * @param pkiSubnetID The unique ID of the Subnet
     * @return SubnetDeleteObjectV1Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun subnetDeleteObjectV1(pkiSubnetID: kotlin.Int) : SubnetDeleteObjectV1Response {
        val localVarResponse = subnetDeleteObjectV1WithHttpInfo(pkiSubnetID = pkiSubnetID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as SubnetDeleteObjectV1Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Delete an existing Subnet
     * 
     * @param pkiSubnetID The unique ID of the Subnet
     * @return ApiResponse<SubnetDeleteObjectV1Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun subnetDeleteObjectV1WithHttpInfo(pkiSubnetID: kotlin.Int) : ApiResponse<SubnetDeleteObjectV1Response?> {
        val localVariableConfig = subnetDeleteObjectV1RequestConfig(pkiSubnetID = pkiSubnetID)

        return request<Unit, SubnetDeleteObjectV1Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation subnetDeleteObjectV1
     *
     * @param pkiSubnetID The unique ID of the Subnet
     * @return RequestConfig
     */
    fun subnetDeleteObjectV1RequestConfig(pkiSubnetID: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/1/object/subnet/{pkiSubnetID}".replace("{"+"pkiSubnetID"+"}", encodeURIComponent(pkiSubnetID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Edit an existing Subnet
     * 
     * @param pkiSubnetID The unique ID of the Subnet
     * @param subnetEditObjectV1Request 
     * @return SubnetEditObjectV1Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun subnetEditObjectV1(pkiSubnetID: kotlin.Int, subnetEditObjectV1Request: SubnetEditObjectV1Request) : SubnetEditObjectV1Response {
        val localVarResponse = subnetEditObjectV1WithHttpInfo(pkiSubnetID = pkiSubnetID, subnetEditObjectV1Request = subnetEditObjectV1Request)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as SubnetEditObjectV1Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Edit an existing Subnet
     * 
     * @param pkiSubnetID The unique ID of the Subnet
     * @param subnetEditObjectV1Request 
     * @return ApiResponse<SubnetEditObjectV1Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun subnetEditObjectV1WithHttpInfo(pkiSubnetID: kotlin.Int, subnetEditObjectV1Request: SubnetEditObjectV1Request) : ApiResponse<SubnetEditObjectV1Response?> {
        val localVariableConfig = subnetEditObjectV1RequestConfig(pkiSubnetID = pkiSubnetID, subnetEditObjectV1Request = subnetEditObjectV1Request)

        return request<SubnetEditObjectV1Request, SubnetEditObjectV1Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation subnetEditObjectV1
     *
     * @param pkiSubnetID The unique ID of the Subnet
     * @param subnetEditObjectV1Request 
     * @return RequestConfig
     */
    fun subnetEditObjectV1RequestConfig(pkiSubnetID: kotlin.Int, subnetEditObjectV1Request: SubnetEditObjectV1Request) : RequestConfig<SubnetEditObjectV1Request> {
        val localVariableBody = subnetEditObjectV1Request
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/1/object/subnet/{pkiSubnetID}".replace("{"+"pkiSubnetID"+"}", encodeURIComponent(pkiSubnetID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Retrieve an existing Subnet
     * 
     * @param pkiSubnetID The unique ID of the Subnet
     * @return SubnetGetObjectV2Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun subnetGetObjectV2(pkiSubnetID: kotlin.Int) : SubnetGetObjectV2Response {
        val localVarResponse = subnetGetObjectV2WithHttpInfo(pkiSubnetID = pkiSubnetID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as SubnetGetObjectV2Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieve an existing Subnet
     * 
     * @param pkiSubnetID The unique ID of the Subnet
     * @return ApiResponse<SubnetGetObjectV2Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun subnetGetObjectV2WithHttpInfo(pkiSubnetID: kotlin.Int) : ApiResponse<SubnetGetObjectV2Response?> {
        val localVariableConfig = subnetGetObjectV2RequestConfig(pkiSubnetID = pkiSubnetID)

        return request<Unit, SubnetGetObjectV2Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation subnetGetObjectV2
     *
     * @param pkiSubnetID The unique ID of the Subnet
     * @return RequestConfig
     */
    fun subnetGetObjectV2RequestConfig(pkiSubnetID: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/2/object/subnet/{pkiSubnetID}".replace("{"+"pkiSubnetID"+"}", encodeURIComponent(pkiSubnetID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
