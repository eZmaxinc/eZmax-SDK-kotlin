/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package eZmaxApi.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import eZmaxApi.models.CommonResponseError
import eZmaxApi.models.CommonResponseErrorTooManyRequests
import eZmaxApi.models.HeaderAcceptLanguage
import eZmaxApi.models.WebhookCreateObjectV1Request
import eZmaxApi.models.WebhookCreateObjectV1Response
import eZmaxApi.models.WebhookDeleteObjectV1Response
import eZmaxApi.models.WebhookEditObjectV1Request
import eZmaxApi.models.WebhookEditObjectV1Response
import eZmaxApi.models.WebhookGetHistoryV1Response
import eZmaxApi.models.WebhookGetListV1Response
import eZmaxApi.models.WebhookGetObjectV2Response
import eZmaxApi.models.WebhookTestV1Response

import com.squareup.moshi.Json

import eZmaxApi.infrastructure.ApiClient
import eZmaxApi.infrastructure.ApiResponse
import eZmaxApi.infrastructure.ClientException
import eZmaxApi.infrastructure.ClientError
import eZmaxApi.infrastructure.ServerException
import eZmaxApi.infrastructure.ServerError
import eZmaxApi.infrastructure.MultiValueMap
import eZmaxApi.infrastructure.PartConfig
import eZmaxApi.infrastructure.RequestConfig
import eZmaxApi.infrastructure.RequestMethod
import eZmaxApi.infrastructure.ResponseType
import eZmaxApi.infrastructure.Success
import eZmaxApi.infrastructure.toMultiValue

class ObjectWebhookApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://prod.api.appcluster01.ca-central-1.ezmax.com/rest")
        }
    }

    /**
     * Create a new Webhook
     * The endpoint allows to create one or many elements at once.
     * @param webhookCreateObjectV1Request 
     * @return WebhookCreateObjectV1Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun webhookCreateObjectV1(webhookCreateObjectV1Request: WebhookCreateObjectV1Request) : WebhookCreateObjectV1Response {
        val localVarResponse = webhookCreateObjectV1WithHttpInfo(webhookCreateObjectV1Request = webhookCreateObjectV1Request)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as WebhookCreateObjectV1Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Create a new Webhook
     * The endpoint allows to create one or many elements at once.
     * @param webhookCreateObjectV1Request 
     * @return ApiResponse<WebhookCreateObjectV1Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun webhookCreateObjectV1WithHttpInfo(webhookCreateObjectV1Request: WebhookCreateObjectV1Request) : ApiResponse<WebhookCreateObjectV1Response?> {
        val localVariableConfig = webhookCreateObjectV1RequestConfig(webhookCreateObjectV1Request = webhookCreateObjectV1Request)

        return request<WebhookCreateObjectV1Request, WebhookCreateObjectV1Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation webhookCreateObjectV1
     *
     * @param webhookCreateObjectV1Request 
     * @return RequestConfig
     */
    fun webhookCreateObjectV1RequestConfig(webhookCreateObjectV1Request: WebhookCreateObjectV1Request) : RequestConfig<WebhookCreateObjectV1Request> {
        val localVariableBody = webhookCreateObjectV1Request
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/1/object/webhook",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Delete an existing Webhook
     * 
     * @param pkiWebhookID 
     * @return WebhookDeleteObjectV1Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun webhookDeleteObjectV1(pkiWebhookID: kotlin.Int) : WebhookDeleteObjectV1Response {
        val localVarResponse = webhookDeleteObjectV1WithHttpInfo(pkiWebhookID = pkiWebhookID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as WebhookDeleteObjectV1Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Delete an existing Webhook
     * 
     * @param pkiWebhookID 
     * @return ApiResponse<WebhookDeleteObjectV1Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun webhookDeleteObjectV1WithHttpInfo(pkiWebhookID: kotlin.Int) : ApiResponse<WebhookDeleteObjectV1Response?> {
        val localVariableConfig = webhookDeleteObjectV1RequestConfig(pkiWebhookID = pkiWebhookID)

        return request<Unit, WebhookDeleteObjectV1Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation webhookDeleteObjectV1
     *
     * @param pkiWebhookID 
     * @return RequestConfig
     */
    fun webhookDeleteObjectV1RequestConfig(pkiWebhookID: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/1/object/webhook/{pkiWebhookID}".replace("{"+"pkiWebhookID"+"}", encodeURIComponent(pkiWebhookID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Edit an existing Webhook
     * 
     * @param pkiWebhookID 
     * @param webhookEditObjectV1Request 
     * @return WebhookEditObjectV1Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun webhookEditObjectV1(pkiWebhookID: kotlin.Int, webhookEditObjectV1Request: WebhookEditObjectV1Request) : WebhookEditObjectV1Response {
        val localVarResponse = webhookEditObjectV1WithHttpInfo(pkiWebhookID = pkiWebhookID, webhookEditObjectV1Request = webhookEditObjectV1Request)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as WebhookEditObjectV1Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Edit an existing Webhook
     * 
     * @param pkiWebhookID 
     * @param webhookEditObjectV1Request 
     * @return ApiResponse<WebhookEditObjectV1Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun webhookEditObjectV1WithHttpInfo(pkiWebhookID: kotlin.Int, webhookEditObjectV1Request: WebhookEditObjectV1Request) : ApiResponse<WebhookEditObjectV1Response?> {
        val localVariableConfig = webhookEditObjectV1RequestConfig(pkiWebhookID = pkiWebhookID, webhookEditObjectV1Request = webhookEditObjectV1Request)

        return request<WebhookEditObjectV1Request, WebhookEditObjectV1Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation webhookEditObjectV1
     *
     * @param pkiWebhookID 
     * @param webhookEditObjectV1Request 
     * @return RequestConfig
     */
    fun webhookEditObjectV1RequestConfig(pkiWebhookID: kotlin.Int, webhookEditObjectV1Request: WebhookEditObjectV1Request) : RequestConfig<WebhookEditObjectV1Request> {
        val localVariableBody = webhookEditObjectV1Request
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/1/object/webhook/{pkiWebhookID}".replace("{"+"pkiWebhookID"+"}", encodeURIComponent(pkiWebhookID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter eWebhookHistoryinterval
     */
     enum class EWebhookHistoryintervalWebhookGetHistoryV1(val value: kotlin.String) {
         @Json(name = "LastDay") LastDay("LastDay"),
         @Json(name = "LastWeek") LastWeek("LastWeek")
     }

    /**
     * Retrieve the logs for recent Webhook calls
     * 
     * @param pkiWebhookID 
     * @param eWebhookHistoryinterval The number of days to return
     * @return WebhookGetHistoryV1Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun webhookGetHistoryV1(pkiWebhookID: kotlin.Int, eWebhookHistoryinterval: EWebhookHistoryintervalWebhookGetHistoryV1) : WebhookGetHistoryV1Response {
        val localVarResponse = webhookGetHistoryV1WithHttpInfo(pkiWebhookID = pkiWebhookID, eWebhookHistoryinterval = eWebhookHistoryinterval)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as WebhookGetHistoryV1Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieve the logs for recent Webhook calls
     * 
     * @param pkiWebhookID 
     * @param eWebhookHistoryinterval The number of days to return
     * @return ApiResponse<WebhookGetHistoryV1Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun webhookGetHistoryV1WithHttpInfo(pkiWebhookID: kotlin.Int, eWebhookHistoryinterval: EWebhookHistoryintervalWebhookGetHistoryV1) : ApiResponse<WebhookGetHistoryV1Response?> {
        val localVariableConfig = webhookGetHistoryV1RequestConfig(pkiWebhookID = pkiWebhookID, eWebhookHistoryinterval = eWebhookHistoryinterval)

        return request<Unit, WebhookGetHistoryV1Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation webhookGetHistoryV1
     *
     * @param pkiWebhookID 
     * @param eWebhookHistoryinterval The number of days to return
     * @return RequestConfig
     */
    fun webhookGetHistoryV1RequestConfig(pkiWebhookID: kotlin.Int, eWebhookHistoryinterval: EWebhookHistoryintervalWebhookGetHistoryV1) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("eWebhookHistoryinterval", listOf(eWebhookHistoryinterval.value))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/1/object/webhook/{pkiWebhookID}/getHistory".replace("{"+"pkiWebhookID"+"}", encodeURIComponent(pkiWebhookID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter eOrderBy
     */
     enum class EOrderByWebhookGetListV1(val value: kotlin.String) {
         @Json(name = "pkiWebhookID_ASC") pkiWebhookID_ASC("pkiWebhookID_ASC"),
         @Json(name = "pkiWebhookID_DESC") pkiWebhookID_DESC("pkiWebhookID_DESC"),
         @Json(name = "sWebhookDescription_ASC") sWebhookDescription_ASC("sWebhookDescription_ASC"),
         @Json(name = "sWebhookDescription_DESC") sWebhookDescription_DESC("sWebhookDescription_DESC"),
         @Json(name = "eWebhookEzsignevent_ASC") eWebhookEzsignevent_ASC("eWebhookEzsignevent_ASC"),
         @Json(name = "eWebhookEzsignevent_DESC") eWebhookEzsignevent_DESC("eWebhookEzsignevent_DESC"),
         @Json(name = "eWebhookManagementevent_ASC") eWebhookManagementevent_ASC("eWebhookManagementevent_ASC"),
         @Json(name = "eWebhookManagementevent_DESC") eWebhookManagementevent_DESC("eWebhookManagementevent_DESC"),
         @Json(name = "eWebhookModule_ASC") eWebhookModule_ASC("eWebhookModule_ASC"),
         @Json(name = "eWebhookModule_DESC") eWebhookModule_DESC("eWebhookModule_DESC"),
         @Json(name = "sWebhookEmailfailed_ASC") sWebhookEmailfailed_ASC("sWebhookEmailfailed_ASC"),
         @Json(name = "sWebhookEmailfailed_DESC") sWebhookEmailfailed_DESC("sWebhookEmailfailed_DESC"),
         @Json(name = "sWebhookEvent_ASC") sWebhookEvent_ASC("sWebhookEvent_ASC"),
         @Json(name = "sWebhookEvent_DESC") sWebhookEvent_DESC("sWebhookEvent_DESC"),
         @Json(name = "sWebhookUrl_ASC") sWebhookUrl_ASC("sWebhookUrl_ASC"),
         @Json(name = "sWebhookUrl_DESC") sWebhookUrl_DESC("sWebhookUrl_DESC"),
         @Json(name = "bWebhookIsactive_ASC") bWebhookIsactive_ASC("bWebhookIsactive_ASC"),
         @Json(name = "bWebhookIsactive_DESC") bWebhookIsactive_DESC("bWebhookIsactive_DESC")
     }

    /**
     * Retrieve Webhook list
     * Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |---|---| | eWebhookModule | Ezsign&lt;br&gt;Management | | eWebhookEzsignevent | DocumentCompleted&lt;br&gt;FolderCompleted | | eWebhookManagementevent | UserCreated |
     * @param eOrderBy Specify how you want the results to be sorted (optional)
     * @param iRowMax  (optional)
     * @param iRowOffset  (optional, default to 0)
     * @param acceptLanguage  (optional)
     * @param sFilter  (optional)
     * @return WebhookGetListV1Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun webhookGetListV1(eOrderBy: EOrderByWebhookGetListV1? = null, iRowMax: kotlin.Int? = null, iRowOffset: kotlin.Int? = 0, acceptLanguage: HeaderAcceptLanguage? = null, sFilter: kotlin.String? = null) : WebhookGetListV1Response {
        val localVarResponse = webhookGetListV1WithHttpInfo(eOrderBy = eOrderBy, iRowMax = iRowMax, iRowOffset = iRowOffset, acceptLanguage = acceptLanguage, sFilter = sFilter)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as WebhookGetListV1Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieve Webhook list
     * Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |---|---| | eWebhookModule | Ezsign&lt;br&gt;Management | | eWebhookEzsignevent | DocumentCompleted&lt;br&gt;FolderCompleted | | eWebhookManagementevent | UserCreated |
     * @param eOrderBy Specify how you want the results to be sorted (optional)
     * @param iRowMax  (optional)
     * @param iRowOffset  (optional, default to 0)
     * @param acceptLanguage  (optional)
     * @param sFilter  (optional)
     * @return ApiResponse<WebhookGetListV1Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun webhookGetListV1WithHttpInfo(eOrderBy: EOrderByWebhookGetListV1?, iRowMax: kotlin.Int?, iRowOffset: kotlin.Int?, acceptLanguage: HeaderAcceptLanguage?, sFilter: kotlin.String?) : ApiResponse<WebhookGetListV1Response?> {
        val localVariableConfig = webhookGetListV1RequestConfig(eOrderBy = eOrderBy, iRowMax = iRowMax, iRowOffset = iRowOffset, acceptLanguage = acceptLanguage, sFilter = sFilter)

        return request<Unit, WebhookGetListV1Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation webhookGetListV1
     *
     * @param eOrderBy Specify how you want the results to be sorted (optional)
     * @param iRowMax  (optional)
     * @param iRowOffset  (optional, default to 0)
     * @param acceptLanguage  (optional)
     * @param sFilter  (optional)
     * @return RequestConfig
     */
    fun webhookGetListV1RequestConfig(eOrderBy: EOrderByWebhookGetListV1?, iRowMax: kotlin.Int?, iRowOffset: kotlin.Int?, acceptLanguage: HeaderAcceptLanguage?, sFilter: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (eOrderBy != null) {
                    put("eOrderBy", listOf(eOrderBy.value))
                }
                if (iRowMax != null) {
                    put("iRowMax", listOf(iRowMax.toString()))
                }
                if (iRowOffset != null) {
                    put("iRowOffset", listOf(iRowOffset.toString()))
                }
                if (sFilter != null) {
                    put("sFilter", listOf(sFilter.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/1/object/webhook/getList",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Retrieve an existing Webhook
     * 
     * @param pkiWebhookID 
     * @return WebhookGetObjectV2Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun webhookGetObjectV2(pkiWebhookID: kotlin.Int) : WebhookGetObjectV2Response {
        val localVarResponse = webhookGetObjectV2WithHttpInfo(pkiWebhookID = pkiWebhookID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as WebhookGetObjectV2Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieve an existing Webhook
     * 
     * @param pkiWebhookID 
     * @return ApiResponse<WebhookGetObjectV2Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun webhookGetObjectV2WithHttpInfo(pkiWebhookID: kotlin.Int) : ApiResponse<WebhookGetObjectV2Response?> {
        val localVariableConfig = webhookGetObjectV2RequestConfig(pkiWebhookID = pkiWebhookID)

        return request<Unit, WebhookGetObjectV2Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation webhookGetObjectV2
     *
     * @param pkiWebhookID 
     * @return RequestConfig
     */
    fun webhookGetObjectV2RequestConfig(pkiWebhookID: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/2/object/webhook/{pkiWebhookID}".replace("{"+"pkiWebhookID"+"}", encodeURIComponent(pkiWebhookID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Test the Webhook by calling the Url
     * 
     * @param pkiWebhookID 
     * @param body 
     * @return WebhookTestV1Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun webhookTestV1(pkiWebhookID: kotlin.Int, body: kotlin.Any) : WebhookTestV1Response {
        val localVarResponse = webhookTestV1WithHttpInfo(pkiWebhookID = pkiWebhookID, body = body)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as WebhookTestV1Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Test the Webhook by calling the Url
     * 
     * @param pkiWebhookID 
     * @param body 
     * @return ApiResponse<WebhookTestV1Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun webhookTestV1WithHttpInfo(pkiWebhookID: kotlin.Int, body: kotlin.Any) : ApiResponse<WebhookTestV1Response?> {
        val localVariableConfig = webhookTestV1RequestConfig(pkiWebhookID = pkiWebhookID, body = body)

        return request<kotlin.Any, WebhookTestV1Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation webhookTestV1
     *
     * @param pkiWebhookID 
     * @param body 
     * @return RequestConfig
     */
    fun webhookTestV1RequestConfig(pkiWebhookID: kotlin.Int, body: kotlin.Any) : RequestConfig<kotlin.Any> {
        val localVariableBody = body
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/1/object/webhook/{pkiWebhookID}/test".replace("{"+"pkiWebhookID"+"}", encodeURIComponent(pkiWebhookID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
