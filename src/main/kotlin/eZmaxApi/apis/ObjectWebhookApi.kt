/**
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.12
 * Contact: support-api@ezmax.ca
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package eZmaxApi.apis

import java.io.IOException
import okhttp3.OkHttpClient

import eZmaxApi.models.CommonMinusResponseMinusError
import eZmaxApi.models.CommonMinusResponseMinusErrorMinusTooManyRequests
import eZmaxApi.models.HeaderMinusAcceptMinusLanguage
import eZmaxApi.models.WebhookMinusCreateObjectMinusV1MinusRequest
import eZmaxApi.models.WebhookMinusCreateObjectMinusV1MinusResponse
import eZmaxApi.models.WebhookMinusDeleteObjectMinusV1MinusResponse
import eZmaxApi.models.WebhookMinusEditObjectMinusV1MinusRequest
import eZmaxApi.models.WebhookMinusEditObjectMinusV1MinusResponse
import eZmaxApi.models.WebhookMinusGetHistoryMinusV1MinusResponse
import eZmaxApi.models.WebhookMinusGetListMinusV1MinusResponse
import eZmaxApi.models.WebhookMinusGetObjectMinusV1MinusResponse
import eZmaxApi.models.WebhookMinusTestMinusV1MinusResponse

import com.squareup.moshi.Json

import eZmaxApi.infrastructure.ApiClient
import eZmaxApi.infrastructure.ApiResponse
import eZmaxApi.infrastructure.ClientException
import eZmaxApi.infrastructure.ClientError
import eZmaxApi.infrastructure.ServerException
import eZmaxApi.infrastructure.ServerError
import eZmaxApi.infrastructure.MultiValueMap
import eZmaxApi.infrastructure.PartConfig
import eZmaxApi.infrastructure.RequestConfig
import eZmaxApi.infrastructure.RequestMethod
import eZmaxApi.infrastructure.ResponseType
import eZmaxApi.infrastructure.Success
import eZmaxApi.infrastructure.toMultiValue

class ObjectWebhookApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://prod.api.appcluster01.ca-central-1.ezmax.com/rest")
        }
    }

    /**
     * Create a new Webhook
     * The endpoint allows to create one or many elements at once.
     * @param webhookMinusCreateObjectMinusV1MinusRequest 
     * @return WebhookMinusCreateObjectMinusV1MinusResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun webhookCreateObjectV1(webhookMinusCreateObjectMinusV1MinusRequest: WebhookMinusCreateObjectMinusV1MinusRequest) : WebhookMinusCreateObjectMinusV1MinusResponse {
        val localVarResponse = webhookCreateObjectV1WithHttpInfo(webhookMinusCreateObjectMinusV1MinusRequest = webhookMinusCreateObjectMinusV1MinusRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as WebhookMinusCreateObjectMinusV1MinusResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Create a new Webhook
     * The endpoint allows to create one or many elements at once.
     * @param webhookMinusCreateObjectMinusV1MinusRequest 
     * @return ApiResponse<WebhookMinusCreateObjectMinusV1MinusResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun webhookCreateObjectV1WithHttpInfo(webhookMinusCreateObjectMinusV1MinusRequest: WebhookMinusCreateObjectMinusV1MinusRequest) : ApiResponse<WebhookMinusCreateObjectMinusV1MinusResponse?> {
        val localVariableConfig = webhookCreateObjectV1RequestConfig(webhookMinusCreateObjectMinusV1MinusRequest = webhookMinusCreateObjectMinusV1MinusRequest)

        return request<WebhookMinusCreateObjectMinusV1MinusRequest, WebhookMinusCreateObjectMinusV1MinusResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation webhookCreateObjectV1
     *
     * @param webhookMinusCreateObjectMinusV1MinusRequest 
     * @return RequestConfig
     */
    fun webhookCreateObjectV1RequestConfig(webhookMinusCreateObjectMinusV1MinusRequest: WebhookMinusCreateObjectMinusV1MinusRequest) : RequestConfig<WebhookMinusCreateObjectMinusV1MinusRequest> {
        val localVariableBody = webhookMinusCreateObjectMinusV1MinusRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/1/object/webhook",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Delete an existing Webhook
     * 
     * @param pkiWebhookID 
     * @return WebhookMinusDeleteObjectMinusV1MinusResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun webhookDeleteObjectV1(pkiWebhookID: kotlin.Int) : WebhookMinusDeleteObjectMinusV1MinusResponse {
        val localVarResponse = webhookDeleteObjectV1WithHttpInfo(pkiWebhookID = pkiWebhookID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as WebhookMinusDeleteObjectMinusV1MinusResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Delete an existing Webhook
     * 
     * @param pkiWebhookID 
     * @return ApiResponse<WebhookMinusDeleteObjectMinusV1MinusResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun webhookDeleteObjectV1WithHttpInfo(pkiWebhookID: kotlin.Int) : ApiResponse<WebhookMinusDeleteObjectMinusV1MinusResponse?> {
        val localVariableConfig = webhookDeleteObjectV1RequestConfig(pkiWebhookID = pkiWebhookID)

        return request<Unit, WebhookMinusDeleteObjectMinusV1MinusResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation webhookDeleteObjectV1
     *
     * @param pkiWebhookID 
     * @return RequestConfig
     */
    fun webhookDeleteObjectV1RequestConfig(pkiWebhookID: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/1/object/webhook/{pkiWebhookID}".replace("{"+"pkiWebhookID"+"}", pkiWebhookID.toString()),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Edit an existing Webhook
     * 
     * @param pkiWebhookID 
     * @param webhookMinusEditObjectMinusV1MinusRequest 
     * @return WebhookMinusEditObjectMinusV1MinusResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun webhookEditObjectV1(pkiWebhookID: kotlin.Int, webhookMinusEditObjectMinusV1MinusRequest: WebhookMinusEditObjectMinusV1MinusRequest) : WebhookMinusEditObjectMinusV1MinusResponse {
        val localVarResponse = webhookEditObjectV1WithHttpInfo(pkiWebhookID = pkiWebhookID, webhookMinusEditObjectMinusV1MinusRequest = webhookMinusEditObjectMinusV1MinusRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as WebhookMinusEditObjectMinusV1MinusResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Edit an existing Webhook
     * 
     * @param pkiWebhookID 
     * @param webhookMinusEditObjectMinusV1MinusRequest 
     * @return ApiResponse<WebhookMinusEditObjectMinusV1MinusResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun webhookEditObjectV1WithHttpInfo(pkiWebhookID: kotlin.Int, webhookMinusEditObjectMinusV1MinusRequest: WebhookMinusEditObjectMinusV1MinusRequest) : ApiResponse<WebhookMinusEditObjectMinusV1MinusResponse?> {
        val localVariableConfig = webhookEditObjectV1RequestConfig(pkiWebhookID = pkiWebhookID, webhookMinusEditObjectMinusV1MinusRequest = webhookMinusEditObjectMinusV1MinusRequest)

        return request<WebhookMinusEditObjectMinusV1MinusRequest, WebhookMinusEditObjectMinusV1MinusResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation webhookEditObjectV1
     *
     * @param pkiWebhookID 
     * @param webhookMinusEditObjectMinusV1MinusRequest 
     * @return RequestConfig
     */
    fun webhookEditObjectV1RequestConfig(pkiWebhookID: kotlin.Int, webhookMinusEditObjectMinusV1MinusRequest: WebhookMinusEditObjectMinusV1MinusRequest) : RequestConfig<WebhookMinusEditObjectMinusV1MinusRequest> {
        val localVariableBody = webhookMinusEditObjectMinusV1MinusRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/1/object/webhook/{pkiWebhookID}".replace("{"+"pkiWebhookID"+"}", pkiWebhookID.toString()),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter eWebhookHistoryinterval
     */
     enum class EWebhookHistoryinterval_webhookGetHistoryV1(val value: kotlin.String) {
         @Json(name = "LastDay") LastDay("LastDay"),
         @Json(name = "LastWeek") LastWeek("LastWeek")
     }

    /**
     * Retrieve the logs for recent Webhook calls
     * 
     * @param pkiWebhookID 
     * @param eWebhookHistoryinterval The number of days to return
     * @return WebhookMinusGetHistoryMinusV1MinusResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun webhookGetHistoryV1(pkiWebhookID: kotlin.Int, eWebhookHistoryinterval: EWebhookHistoryinterval_webhookGetHistoryV1) : WebhookMinusGetHistoryMinusV1MinusResponse {
        val localVarResponse = webhookGetHistoryV1WithHttpInfo(pkiWebhookID = pkiWebhookID, eWebhookHistoryinterval = eWebhookHistoryinterval)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as WebhookMinusGetHistoryMinusV1MinusResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieve the logs for recent Webhook calls
     * 
     * @param pkiWebhookID 
     * @param eWebhookHistoryinterval The number of days to return
     * @return ApiResponse<WebhookMinusGetHistoryMinusV1MinusResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun webhookGetHistoryV1WithHttpInfo(pkiWebhookID: kotlin.Int, eWebhookHistoryinterval: EWebhookHistoryinterval_webhookGetHistoryV1) : ApiResponse<WebhookMinusGetHistoryMinusV1MinusResponse?> {
        val localVariableConfig = webhookGetHistoryV1RequestConfig(pkiWebhookID = pkiWebhookID, eWebhookHistoryinterval = eWebhookHistoryinterval)

        return request<Unit, WebhookMinusGetHistoryMinusV1MinusResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation webhookGetHistoryV1
     *
     * @param pkiWebhookID 
     * @param eWebhookHistoryinterval The number of days to return
     * @return RequestConfig
     */
    fun webhookGetHistoryV1RequestConfig(pkiWebhookID: kotlin.Int, eWebhookHistoryinterval: EWebhookHistoryinterval_webhookGetHistoryV1) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("eWebhookHistoryinterval", listOf(eWebhookHistoryinterval.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/1/object/webhook/{pkiWebhookID}/getHistory".replace("{"+"pkiWebhookID"+"}", pkiWebhookID.toString()),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter eOrderBy
     */
     enum class EOrderBy_webhookGetListV1(val value: kotlin.String) {
         @Json(name = "pkiWebhookID_ASC") pkiWebhookID_ASC("pkiWebhookID_ASC"),
         @Json(name = "pkiWebhookID_DESC") pkiWebhookID_DESC("pkiWebhookID_DESC"),
         @Json(name = "sWebhookDescription_ASC") sWebhookDescription_ASC("sWebhookDescription_ASC"),
         @Json(name = "sWebhookDescription_DESC") sWebhookDescription_DESC("sWebhookDescription_DESC"),
         @Json(name = "eWebhookEzsignevent_ASC") eWebhookEzsignevent_ASC("eWebhookEzsignevent_ASC"),
         @Json(name = "eWebhookEzsignevent_DESC") eWebhookEzsignevent_DESC("eWebhookEzsignevent_DESC"),
         @Json(name = "eWebhookManagementevent_ASC") eWebhookManagementevent_ASC("eWebhookManagementevent_ASC"),
         @Json(name = "eWebhookManagementevent_DESC") eWebhookManagementevent_DESC("eWebhookManagementevent_DESC"),
         @Json(name = "eWebhookModule_ASC") eWebhookModule_ASC("eWebhookModule_ASC"),
         @Json(name = "eWebhookModule_DESC") eWebhookModule_DESC("eWebhookModule_DESC"),
         @Json(name = "sWebhookEmailfailed_ASC") sWebhookEmailfailed_ASC("sWebhookEmailfailed_ASC"),
         @Json(name = "sWebhookEmailfailed_DESC") sWebhookEmailfailed_DESC("sWebhookEmailfailed_DESC"),
         @Json(name = "sWebhookEvent_ASC") sWebhookEvent_ASC("sWebhookEvent_ASC"),
         @Json(name = "sWebhookEvent_DESC") sWebhookEvent_DESC("sWebhookEvent_DESC"),
         @Json(name = "sWebhookUrl_ASC") sWebhookUrl_ASC("sWebhookUrl_ASC"),
         @Json(name = "sWebhookUrl_DESC") sWebhookUrl_DESC("sWebhookUrl_DESC"),
         @Json(name = "bWebhookIsactive_ASC") bWebhookIsactive_ASC("bWebhookIsactive_ASC"),
         @Json(name = "bWebhookIsactive_DESC") bWebhookIsactive_DESC("bWebhookIsactive_DESC")
     }

    /**
     * Retrieve Webhook list
     * Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |---|---| | eWebhookModule | Ezsign&lt;br&gt;Management | | eWebhookEzsignevent | DocumentCompleted&lt;br&gt;FolderCompleted | | eWebhookManagementevent | UserCreated |
     * @param eOrderBy Specify how you want the results to be sorted (optional)
     * @param iRowMax  (optional)
     * @param iRowOffset  (optional)
     * @param acceptLanguage  (optional)
     * @param sFilter  (optional)
     * @return WebhookMinusGetListMinusV1MinusResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun webhookGetListV1(eOrderBy: EOrderBy_webhookGetListV1? = null, iRowMax: kotlin.Int? = null, iRowOffset: kotlin.Int? = null, acceptLanguage: HeaderMinusAcceptMinusLanguage? = null, sFilter: kotlin.String? = null) : WebhookMinusGetListMinusV1MinusResponse {
        val localVarResponse = webhookGetListV1WithHttpInfo(eOrderBy = eOrderBy, iRowMax = iRowMax, iRowOffset = iRowOffset, acceptLanguage = acceptLanguage, sFilter = sFilter)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as WebhookMinusGetListMinusV1MinusResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieve Webhook list
     * Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |---|---| | eWebhookModule | Ezsign&lt;br&gt;Management | | eWebhookEzsignevent | DocumentCompleted&lt;br&gt;FolderCompleted | | eWebhookManagementevent | UserCreated |
     * @param eOrderBy Specify how you want the results to be sorted (optional)
     * @param iRowMax  (optional)
     * @param iRowOffset  (optional)
     * @param acceptLanguage  (optional)
     * @param sFilter  (optional)
     * @return ApiResponse<WebhookMinusGetListMinusV1MinusResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun webhookGetListV1WithHttpInfo(eOrderBy: EOrderBy_webhookGetListV1?, iRowMax: kotlin.Int?, iRowOffset: kotlin.Int?, acceptLanguage: HeaderMinusAcceptMinusLanguage?, sFilter: kotlin.String?) : ApiResponse<WebhookMinusGetListMinusV1MinusResponse?> {
        val localVariableConfig = webhookGetListV1RequestConfig(eOrderBy = eOrderBy, iRowMax = iRowMax, iRowOffset = iRowOffset, acceptLanguage = acceptLanguage, sFilter = sFilter)

        return request<Unit, WebhookMinusGetListMinusV1MinusResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation webhookGetListV1
     *
     * @param eOrderBy Specify how you want the results to be sorted (optional)
     * @param iRowMax  (optional)
     * @param iRowOffset  (optional)
     * @param acceptLanguage  (optional)
     * @param sFilter  (optional)
     * @return RequestConfig
     */
    fun webhookGetListV1RequestConfig(eOrderBy: EOrderBy_webhookGetListV1?, iRowMax: kotlin.Int?, iRowOffset: kotlin.Int?, acceptLanguage: HeaderMinusAcceptMinusLanguage?, sFilter: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (eOrderBy != null) {
                    put("eOrderBy", listOf(eOrderBy.toString()))
                }
                if (iRowMax != null) {
                    put("iRowMax", listOf(iRowMax.toString()))
                }
                if (iRowOffset != null) {
                    put("iRowOffset", listOf(iRowOffset.toString()))
                }
                if (sFilter != null) {
                    put("sFilter", listOf(sFilter.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/1/object/webhook/getList",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Retrieve an existing Webhook
     * 
     * @param pkiWebhookID 
     * @return WebhookMinusGetObjectMinusV1MinusResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun webhookGetObjectV1(pkiWebhookID: kotlin.Int) : WebhookMinusGetObjectMinusV1MinusResponse {
        val localVarResponse = webhookGetObjectV1WithHttpInfo(pkiWebhookID = pkiWebhookID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as WebhookMinusGetObjectMinusV1MinusResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieve an existing Webhook
     * 
     * @param pkiWebhookID 
     * @return ApiResponse<WebhookMinusGetObjectMinusV1MinusResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun webhookGetObjectV1WithHttpInfo(pkiWebhookID: kotlin.Int) : ApiResponse<WebhookMinusGetObjectMinusV1MinusResponse?> {
        val localVariableConfig = webhookGetObjectV1RequestConfig(pkiWebhookID = pkiWebhookID)

        return request<Unit, WebhookMinusGetObjectMinusV1MinusResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation webhookGetObjectV1
     *
     * @param pkiWebhookID 
     * @return RequestConfig
     */
    fun webhookGetObjectV1RequestConfig(pkiWebhookID: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/1/object/webhook/{pkiWebhookID}".replace("{"+"pkiWebhookID"+"}", pkiWebhookID.toString()),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Test the Webhook by calling the Url
     * 
     * @param pkiWebhookID 
     * @param body 
     * @return WebhookMinusTestMinusV1MinusResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun webhookTestV1(pkiWebhookID: kotlin.Int, body: kotlin.Any) : WebhookMinusTestMinusV1MinusResponse {
        val localVarResponse = webhookTestV1WithHttpInfo(pkiWebhookID = pkiWebhookID, body = body)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as WebhookMinusTestMinusV1MinusResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Test the Webhook by calling the Url
     * 
     * @param pkiWebhookID 
     * @param body 
     * @return ApiResponse<WebhookMinusTestMinusV1MinusResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun webhookTestV1WithHttpInfo(pkiWebhookID: kotlin.Int, body: kotlin.Any) : ApiResponse<WebhookMinusTestMinusV1MinusResponse?> {
        val localVariableConfig = webhookTestV1RequestConfig(pkiWebhookID = pkiWebhookID, body = body)

        return request<kotlin.Any, WebhookMinusTestMinusV1MinusResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation webhookTestV1
     *
     * @param pkiWebhookID 
     * @param body 
     * @return RequestConfig
     */
    fun webhookTestV1RequestConfig(pkiWebhookID: kotlin.Int, body: kotlin.Any) : RequestConfig<kotlin.Any> {
        val localVariableBody = body
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/1/object/webhook/{pkiWebhookID}/test".replace("{"+"pkiWebhookID"+"}", pkiWebhookID.toString()),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

}
