/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package eZmaxApi.apis

import java.io.IOException
import okhttp3.Call
import okhttp3.HttpUrl

import eZmaxApi.models.CommonResponseError
import eZmaxApi.models.UsergroupdelegationCreateObjectV1Request
import eZmaxApi.models.UsergroupdelegationCreateObjectV1Response
import eZmaxApi.models.UsergroupdelegationDeleteObjectV1Response
import eZmaxApi.models.UsergroupdelegationEditObjectV1Request
import eZmaxApi.models.UsergroupdelegationEditObjectV1Response
import eZmaxApi.models.UsergroupdelegationGetObjectV2Response

import com.squareup.moshi.Json

import eZmaxApi.infrastructure.ApiClient
import eZmaxApi.infrastructure.ApiResponse
import eZmaxApi.infrastructure.ClientException
import eZmaxApi.infrastructure.ClientError
import eZmaxApi.infrastructure.ServerException
import eZmaxApi.infrastructure.ServerError
import eZmaxApi.infrastructure.MultiValueMap
import eZmaxApi.infrastructure.PartConfig
import eZmaxApi.infrastructure.RequestConfig
import eZmaxApi.infrastructure.RequestMethod
import eZmaxApi.infrastructure.ResponseType
import eZmaxApi.infrastructure.Success
import eZmaxApi.infrastructure.toMultiValue

class ObjectUsergroupdelegationApi(basePath: kotlin.String = defaultBasePath, client: Call.Factory = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://prod.api.appcluster01.ca-central-1.ezmax.com/rest")
        }
    }

    /**
     * POST /1/object/usergroupdelegation
     * Create a new Usergroupdelegation
     * The endpoint allows to create one or many elements at once.
     * @param usergroupdelegationCreateObjectV1Request 
     * @return UsergroupdelegationCreateObjectV1Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun usergroupdelegationCreateObjectV1(usergroupdelegationCreateObjectV1Request: UsergroupdelegationCreateObjectV1Request) : UsergroupdelegationCreateObjectV1Response {
        val localVarResponse = usergroupdelegationCreateObjectV1WithHttpInfo(usergroupdelegationCreateObjectV1Request = usergroupdelegationCreateObjectV1Request)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as UsergroupdelegationCreateObjectV1Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /1/object/usergroupdelegation
     * Create a new Usergroupdelegation
     * The endpoint allows to create one or many elements at once.
     * @param usergroupdelegationCreateObjectV1Request 
     * @return ApiResponse<UsergroupdelegationCreateObjectV1Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun usergroupdelegationCreateObjectV1WithHttpInfo(usergroupdelegationCreateObjectV1Request: UsergroupdelegationCreateObjectV1Request) : ApiResponse<UsergroupdelegationCreateObjectV1Response?> {
        val localVariableConfig = usergroupdelegationCreateObjectV1RequestConfig(usergroupdelegationCreateObjectV1Request = usergroupdelegationCreateObjectV1Request)

        return request<UsergroupdelegationCreateObjectV1Request, UsergroupdelegationCreateObjectV1Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation usergroupdelegationCreateObjectV1
     *
     * @param usergroupdelegationCreateObjectV1Request 
     * @return RequestConfig
     */
    fun usergroupdelegationCreateObjectV1RequestConfig(usergroupdelegationCreateObjectV1Request: UsergroupdelegationCreateObjectV1Request) : RequestConfig<UsergroupdelegationCreateObjectV1Request> {
        val localVariableBody = usergroupdelegationCreateObjectV1Request
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/1/object/usergroupdelegation",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * DELETE /1/object/usergroupdelegation/{pkiUsergroupdelegationID}
     * Delete an existing Usergroupdelegation
     * 
     * @param pkiUsergroupdelegationID The unique ID of the Usergroupdelegation
     * @return UsergroupdelegationDeleteObjectV1Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun usergroupdelegationDeleteObjectV1(pkiUsergroupdelegationID: kotlin.Int) : UsergroupdelegationDeleteObjectV1Response {
        val localVarResponse = usergroupdelegationDeleteObjectV1WithHttpInfo(pkiUsergroupdelegationID = pkiUsergroupdelegationID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as UsergroupdelegationDeleteObjectV1Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * DELETE /1/object/usergroupdelegation/{pkiUsergroupdelegationID}
     * Delete an existing Usergroupdelegation
     * 
     * @param pkiUsergroupdelegationID The unique ID of the Usergroupdelegation
     * @return ApiResponse<UsergroupdelegationDeleteObjectV1Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun usergroupdelegationDeleteObjectV1WithHttpInfo(pkiUsergroupdelegationID: kotlin.Int) : ApiResponse<UsergroupdelegationDeleteObjectV1Response?> {
        val localVariableConfig = usergroupdelegationDeleteObjectV1RequestConfig(pkiUsergroupdelegationID = pkiUsergroupdelegationID)

        return request<Unit, UsergroupdelegationDeleteObjectV1Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation usergroupdelegationDeleteObjectV1
     *
     * @param pkiUsergroupdelegationID The unique ID of the Usergroupdelegation
     * @return RequestConfig
     */
    fun usergroupdelegationDeleteObjectV1RequestConfig(pkiUsergroupdelegationID: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/1/object/usergroupdelegation/{pkiUsergroupdelegationID}".replace("{"+"pkiUsergroupdelegationID"+"}", encodeURIComponent(pkiUsergroupdelegationID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * PUT /1/object/usergroupdelegation/{pkiUsergroupdelegationID}
     * Edit an existing Usergroupdelegation
     * 
     * @param pkiUsergroupdelegationID The unique ID of the Usergroupdelegation
     * @param usergroupdelegationEditObjectV1Request 
     * @return UsergroupdelegationEditObjectV1Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun usergroupdelegationEditObjectV1(pkiUsergroupdelegationID: kotlin.Int, usergroupdelegationEditObjectV1Request: UsergroupdelegationEditObjectV1Request) : UsergroupdelegationEditObjectV1Response {
        val localVarResponse = usergroupdelegationEditObjectV1WithHttpInfo(pkiUsergroupdelegationID = pkiUsergroupdelegationID, usergroupdelegationEditObjectV1Request = usergroupdelegationEditObjectV1Request)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as UsergroupdelegationEditObjectV1Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * PUT /1/object/usergroupdelegation/{pkiUsergroupdelegationID}
     * Edit an existing Usergroupdelegation
     * 
     * @param pkiUsergroupdelegationID The unique ID of the Usergroupdelegation
     * @param usergroupdelegationEditObjectV1Request 
     * @return ApiResponse<UsergroupdelegationEditObjectV1Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun usergroupdelegationEditObjectV1WithHttpInfo(pkiUsergroupdelegationID: kotlin.Int, usergroupdelegationEditObjectV1Request: UsergroupdelegationEditObjectV1Request) : ApiResponse<UsergroupdelegationEditObjectV1Response?> {
        val localVariableConfig = usergroupdelegationEditObjectV1RequestConfig(pkiUsergroupdelegationID = pkiUsergroupdelegationID, usergroupdelegationEditObjectV1Request = usergroupdelegationEditObjectV1Request)

        return request<UsergroupdelegationEditObjectV1Request, UsergroupdelegationEditObjectV1Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation usergroupdelegationEditObjectV1
     *
     * @param pkiUsergroupdelegationID The unique ID of the Usergroupdelegation
     * @param usergroupdelegationEditObjectV1Request 
     * @return RequestConfig
     */
    fun usergroupdelegationEditObjectV1RequestConfig(pkiUsergroupdelegationID: kotlin.Int, usergroupdelegationEditObjectV1Request: UsergroupdelegationEditObjectV1Request) : RequestConfig<UsergroupdelegationEditObjectV1Request> {
        val localVariableBody = usergroupdelegationEditObjectV1Request
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/1/object/usergroupdelegation/{pkiUsergroupdelegationID}".replace("{"+"pkiUsergroupdelegationID"+"}", encodeURIComponent(pkiUsergroupdelegationID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * GET /2/object/usergroupdelegation/{pkiUsergroupdelegationID}
     * Retrieve an existing Usergroupdelegation
     * 
     * @param pkiUsergroupdelegationID The unique ID of the Usergroupdelegation
     * @return UsergroupdelegationGetObjectV2Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun usergroupdelegationGetObjectV2(pkiUsergroupdelegationID: kotlin.Int) : UsergroupdelegationGetObjectV2Response {
        val localVarResponse = usergroupdelegationGetObjectV2WithHttpInfo(pkiUsergroupdelegationID = pkiUsergroupdelegationID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as UsergroupdelegationGetObjectV2Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /2/object/usergroupdelegation/{pkiUsergroupdelegationID}
     * Retrieve an existing Usergroupdelegation
     * 
     * @param pkiUsergroupdelegationID The unique ID of the Usergroupdelegation
     * @return ApiResponse<UsergroupdelegationGetObjectV2Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun usergroupdelegationGetObjectV2WithHttpInfo(pkiUsergroupdelegationID: kotlin.Int) : ApiResponse<UsergroupdelegationGetObjectV2Response?> {
        val localVariableConfig = usergroupdelegationGetObjectV2RequestConfig(pkiUsergroupdelegationID = pkiUsergroupdelegationID)

        return request<Unit, UsergroupdelegationGetObjectV2Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation usergroupdelegationGetObjectV2
     *
     * @param pkiUsergroupdelegationID The unique ID of the Usergroupdelegation
     * @return RequestConfig
     */
    fun usergroupdelegationGetObjectV2RequestConfig(pkiUsergroupdelegationID: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/2/object/usergroupdelegation/{pkiUsergroupdelegationID}".replace("{"+"pkiUsergroupdelegationID"+"}", encodeURIComponent(pkiUsergroupdelegationID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
