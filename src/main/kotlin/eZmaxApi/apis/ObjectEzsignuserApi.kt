/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package eZmaxApi.apis

import java.io.IOException
import okhttp3.Call
import okhttp3.HttpUrl

import eZmaxApi.models.CommonResponseError
import eZmaxApi.models.EzsignuserEditObjectV1Request
import eZmaxApi.models.EzsignuserEditObjectV1Response
import eZmaxApi.models.EzsignuserGetObjectV2Response

import com.squareup.moshi.Json

import eZmaxApi.infrastructure.ApiClient
import eZmaxApi.infrastructure.ApiResponse
import eZmaxApi.infrastructure.ClientException
import eZmaxApi.infrastructure.ClientError
import eZmaxApi.infrastructure.ServerException
import eZmaxApi.infrastructure.ServerError
import eZmaxApi.infrastructure.MultiValueMap
import eZmaxApi.infrastructure.PartConfig
import eZmaxApi.infrastructure.RequestConfig
import eZmaxApi.infrastructure.RequestMethod
import eZmaxApi.infrastructure.ResponseType
import eZmaxApi.infrastructure.Success
import eZmaxApi.infrastructure.toMultiValue

class ObjectEzsignuserApi(basePath: kotlin.String = defaultBasePath, client: Call.Factory = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://prod.api.appcluster01.ca-central-1.ezmax.com/rest")
        }
    }

    /**
     * PUT /1/object/ezsignuser/{pkiEzsignuserID}
     * Edit an existing Ezsignuser
     * 
     * @param pkiEzsignuserID The unique ID of the Ezsignuser
     * @param ezsignuserEditObjectV1Request 
     * @return EzsignuserEditObjectV1Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun ezsignuserEditObjectV1(pkiEzsignuserID: kotlin.Int, ezsignuserEditObjectV1Request: EzsignuserEditObjectV1Request) : EzsignuserEditObjectV1Response {
        val localVarResponse = ezsignuserEditObjectV1WithHttpInfo(pkiEzsignuserID = pkiEzsignuserID, ezsignuserEditObjectV1Request = ezsignuserEditObjectV1Request)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as EzsignuserEditObjectV1Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * PUT /1/object/ezsignuser/{pkiEzsignuserID}
     * Edit an existing Ezsignuser
     * 
     * @param pkiEzsignuserID The unique ID of the Ezsignuser
     * @param ezsignuserEditObjectV1Request 
     * @return ApiResponse<EzsignuserEditObjectV1Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun ezsignuserEditObjectV1WithHttpInfo(pkiEzsignuserID: kotlin.Int, ezsignuserEditObjectV1Request: EzsignuserEditObjectV1Request) : ApiResponse<EzsignuserEditObjectV1Response?> {
        val localVariableConfig = ezsignuserEditObjectV1RequestConfig(pkiEzsignuserID = pkiEzsignuserID, ezsignuserEditObjectV1Request = ezsignuserEditObjectV1Request)

        return request<EzsignuserEditObjectV1Request, EzsignuserEditObjectV1Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation ezsignuserEditObjectV1
     *
     * @param pkiEzsignuserID The unique ID of the Ezsignuser
     * @param ezsignuserEditObjectV1Request 
     * @return RequestConfig
     */
    fun ezsignuserEditObjectV1RequestConfig(pkiEzsignuserID: kotlin.Int, ezsignuserEditObjectV1Request: EzsignuserEditObjectV1Request) : RequestConfig<EzsignuserEditObjectV1Request> {
        val localVariableBody = ezsignuserEditObjectV1Request
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/1/object/ezsignuser/{pkiEzsignuserID}".replace("{"+"pkiEzsignuserID"+"}", encodeURIComponent(pkiEzsignuserID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * GET /2/object/ezsignuser/{pkiEzsignuserID}
     * Retrieve an existing Ezsignuser
     * 
     * @param pkiEzsignuserID The unique ID of the Ezsignuser
     * @return EzsignuserGetObjectV2Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun ezsignuserGetObjectV2(pkiEzsignuserID: kotlin.Int) : EzsignuserGetObjectV2Response {
        val localVarResponse = ezsignuserGetObjectV2WithHttpInfo(pkiEzsignuserID = pkiEzsignuserID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as EzsignuserGetObjectV2Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /2/object/ezsignuser/{pkiEzsignuserID}
     * Retrieve an existing Ezsignuser
     * 
     * @param pkiEzsignuserID The unique ID of the Ezsignuser
     * @return ApiResponse<EzsignuserGetObjectV2Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun ezsignuserGetObjectV2WithHttpInfo(pkiEzsignuserID: kotlin.Int) : ApiResponse<EzsignuserGetObjectV2Response?> {
        val localVariableConfig = ezsignuserGetObjectV2RequestConfig(pkiEzsignuserID = pkiEzsignuserID)

        return request<Unit, EzsignuserGetObjectV2Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation ezsignuserGetObjectV2
     *
     * @param pkiEzsignuserID The unique ID of the Ezsignuser
     * @return RequestConfig
     */
    fun ezsignuserGetObjectV2RequestConfig(pkiEzsignuserID: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/2/object/ezsignuser/{pkiEzsignuserID}".replace("{"+"pkiEzsignuserID"+"}", encodeURIComponent(pkiEzsignuserID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
