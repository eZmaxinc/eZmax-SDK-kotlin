/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package eZmaxApi.apis

import java.io.IOException
import okhttp3.Call
import okhttp3.HttpUrl

import eZmaxApi.models.CommonResponseError
import eZmaxApi.models.DiscussionmembershipCreateObjectV1Request
import eZmaxApi.models.DiscussionmembershipCreateObjectV1Response
import eZmaxApi.models.DiscussionmembershipDeleteObjectV1Response

import com.squareup.moshi.Json

import eZmaxApi.infrastructure.ApiClient
import eZmaxApi.infrastructure.ApiResponse
import eZmaxApi.infrastructure.ClientException
import eZmaxApi.infrastructure.ClientError
import eZmaxApi.infrastructure.ServerException
import eZmaxApi.infrastructure.ServerError
import eZmaxApi.infrastructure.MultiValueMap
import eZmaxApi.infrastructure.PartConfig
import eZmaxApi.infrastructure.RequestConfig
import eZmaxApi.infrastructure.RequestMethod
import eZmaxApi.infrastructure.ResponseType
import eZmaxApi.infrastructure.Success
import eZmaxApi.infrastructure.toMultiValue

class ObjectDiscussionmembershipApi(basePath: kotlin.String = defaultBasePath, client: Call.Factory = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://prod.api.appcluster01.ca-central-1.ezmax.com/rest")
        }
    }

    /**
     * Create a new Discussionmembership
     * The endpoint allows to create one or many elements at once.
     * @param discussionmembershipCreateObjectV1Request 
     * @return DiscussionmembershipCreateObjectV1Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun discussionmembershipCreateObjectV1(discussionmembershipCreateObjectV1Request: DiscussionmembershipCreateObjectV1Request) : DiscussionmembershipCreateObjectV1Response {
        val localVarResponse = discussionmembershipCreateObjectV1WithHttpInfo(discussionmembershipCreateObjectV1Request = discussionmembershipCreateObjectV1Request)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as DiscussionmembershipCreateObjectV1Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Create a new Discussionmembership
     * The endpoint allows to create one or many elements at once.
     * @param discussionmembershipCreateObjectV1Request 
     * @return ApiResponse<DiscussionmembershipCreateObjectV1Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun discussionmembershipCreateObjectV1WithHttpInfo(discussionmembershipCreateObjectV1Request: DiscussionmembershipCreateObjectV1Request) : ApiResponse<DiscussionmembershipCreateObjectV1Response?> {
        val localVariableConfig = discussionmembershipCreateObjectV1RequestConfig(discussionmembershipCreateObjectV1Request = discussionmembershipCreateObjectV1Request)

        return request<DiscussionmembershipCreateObjectV1Request, DiscussionmembershipCreateObjectV1Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation discussionmembershipCreateObjectV1
     *
     * @param discussionmembershipCreateObjectV1Request 
     * @return RequestConfig
     */
    fun discussionmembershipCreateObjectV1RequestConfig(discussionmembershipCreateObjectV1Request: DiscussionmembershipCreateObjectV1Request) : RequestConfig<DiscussionmembershipCreateObjectV1Request> {
        val localVariableBody = discussionmembershipCreateObjectV1Request
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/1/object/discussionmembership",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Delete an existing Discussionmembership
     * 
     * @param pkiDiscussionmembershipID The unique ID of the Discussionmembership
     * @return DiscussionmembershipDeleteObjectV1Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun discussionmembershipDeleteObjectV1(pkiDiscussionmembershipID: kotlin.Int) : DiscussionmembershipDeleteObjectV1Response {
        val localVarResponse = discussionmembershipDeleteObjectV1WithHttpInfo(pkiDiscussionmembershipID = pkiDiscussionmembershipID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as DiscussionmembershipDeleteObjectV1Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Delete an existing Discussionmembership
     * 
     * @param pkiDiscussionmembershipID The unique ID of the Discussionmembership
     * @return ApiResponse<DiscussionmembershipDeleteObjectV1Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun discussionmembershipDeleteObjectV1WithHttpInfo(pkiDiscussionmembershipID: kotlin.Int) : ApiResponse<DiscussionmembershipDeleteObjectV1Response?> {
        val localVariableConfig = discussionmembershipDeleteObjectV1RequestConfig(pkiDiscussionmembershipID = pkiDiscussionmembershipID)

        return request<Unit, DiscussionmembershipDeleteObjectV1Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation discussionmembershipDeleteObjectV1
     *
     * @param pkiDiscussionmembershipID The unique ID of the Discussionmembership
     * @return RequestConfig
     */
    fun discussionmembershipDeleteObjectV1RequestConfig(pkiDiscussionmembershipID: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/1/object/discussionmembership/{pkiDiscussionmembershipID}".replace("{"+"pkiDiscussionmembershipID"+"}", encodeURIComponent(pkiDiscussionmembershipID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
