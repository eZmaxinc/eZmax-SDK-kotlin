/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package eZmaxApi.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import eZmaxApi.models.CommonResponseError
import eZmaxApi.models.EzsignbulksendCreateEzsignbulksendtransmissionV1Request
import eZmaxApi.models.EzsignbulksendCreateEzsignbulksendtransmissionV1Response
import eZmaxApi.models.EzsignbulksendCreateObjectV1Request
import eZmaxApi.models.EzsignbulksendCreateObjectV1Response
import eZmaxApi.models.EzsignbulksendDeleteObjectV1Response
import eZmaxApi.models.EzsignbulksendEditObjectV1Request
import eZmaxApi.models.EzsignbulksendEditObjectV1Response
import eZmaxApi.models.EzsignbulksendGetEzsignbulksendtransmissionsV1Response
import eZmaxApi.models.EzsignbulksendGetEzsignsignaturesAutomaticV1Response
import eZmaxApi.models.EzsignbulksendGetFormsDataV1Response
import eZmaxApi.models.EzsignbulksendGetListV1Response
import eZmaxApi.models.EzsignbulksendGetObjectV2Response
import eZmaxApi.models.EzsignbulksendReorderV1Request
import eZmaxApi.models.EzsignbulksendReorderV1Response
import eZmaxApi.models.HeaderAcceptLanguage

import com.squareup.moshi.Json

import eZmaxApi.infrastructure.ApiClient
import eZmaxApi.infrastructure.ApiResponse
import eZmaxApi.infrastructure.ClientException
import eZmaxApi.infrastructure.ClientError
import eZmaxApi.infrastructure.ServerException
import eZmaxApi.infrastructure.ServerError
import eZmaxApi.infrastructure.MultiValueMap
import eZmaxApi.infrastructure.PartConfig
import eZmaxApi.infrastructure.RequestConfig
import eZmaxApi.infrastructure.RequestMethod
import eZmaxApi.infrastructure.ResponseType
import eZmaxApi.infrastructure.Success
import eZmaxApi.infrastructure.toMultiValue

class ObjectEzsignbulksendApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://prod.api.appcluster01.ca-central-1.ezmax.com/rest")
        }
    }

    /**
     * Create a new Ezsignbulksendtransmission in the Ezsignbulksend
     * 
     * @param pkiEzsignbulksendID 
     * @param ezsignbulksendCreateEzsignbulksendtransmissionV1Request 
     * @return EzsignbulksendCreateEzsignbulksendtransmissionV1Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun ezsignbulksendCreateEzsignbulksendtransmissionV1(pkiEzsignbulksendID: kotlin.Int, ezsignbulksendCreateEzsignbulksendtransmissionV1Request: EzsignbulksendCreateEzsignbulksendtransmissionV1Request) : EzsignbulksendCreateEzsignbulksendtransmissionV1Response {
        val localVarResponse = ezsignbulksendCreateEzsignbulksendtransmissionV1WithHttpInfo(pkiEzsignbulksendID = pkiEzsignbulksendID, ezsignbulksendCreateEzsignbulksendtransmissionV1Request = ezsignbulksendCreateEzsignbulksendtransmissionV1Request)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as EzsignbulksendCreateEzsignbulksendtransmissionV1Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Create a new Ezsignbulksendtransmission in the Ezsignbulksend
     * 
     * @param pkiEzsignbulksendID 
     * @param ezsignbulksendCreateEzsignbulksendtransmissionV1Request 
     * @return ApiResponse<EzsignbulksendCreateEzsignbulksendtransmissionV1Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun ezsignbulksendCreateEzsignbulksendtransmissionV1WithHttpInfo(pkiEzsignbulksendID: kotlin.Int, ezsignbulksendCreateEzsignbulksendtransmissionV1Request: EzsignbulksendCreateEzsignbulksendtransmissionV1Request) : ApiResponse<EzsignbulksendCreateEzsignbulksendtransmissionV1Response?> {
        val localVariableConfig = ezsignbulksendCreateEzsignbulksendtransmissionV1RequestConfig(pkiEzsignbulksendID = pkiEzsignbulksendID, ezsignbulksendCreateEzsignbulksendtransmissionV1Request = ezsignbulksendCreateEzsignbulksendtransmissionV1Request)

        return request<EzsignbulksendCreateEzsignbulksendtransmissionV1Request, EzsignbulksendCreateEzsignbulksendtransmissionV1Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation ezsignbulksendCreateEzsignbulksendtransmissionV1
     *
     * @param pkiEzsignbulksendID 
     * @param ezsignbulksendCreateEzsignbulksendtransmissionV1Request 
     * @return RequestConfig
     */
    fun ezsignbulksendCreateEzsignbulksendtransmissionV1RequestConfig(pkiEzsignbulksendID: kotlin.Int, ezsignbulksendCreateEzsignbulksendtransmissionV1Request: EzsignbulksendCreateEzsignbulksendtransmissionV1Request) : RequestConfig<EzsignbulksendCreateEzsignbulksendtransmissionV1Request> {
        val localVariableBody = ezsignbulksendCreateEzsignbulksendtransmissionV1Request
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/1/object/ezsignbulksend/{pkiEzsignbulksendID}/createEzsignbulksendtransmission".replace("{"+"pkiEzsignbulksendID"+"}", encodeURIComponent(pkiEzsignbulksendID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Create a new Ezsignbulksend
     * The endpoint allows to create one or many elements at once.
     * @param ezsignbulksendCreateObjectV1Request 
     * @return EzsignbulksendCreateObjectV1Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun ezsignbulksendCreateObjectV1(ezsignbulksendCreateObjectV1Request: EzsignbulksendCreateObjectV1Request) : EzsignbulksendCreateObjectV1Response {
        val localVarResponse = ezsignbulksendCreateObjectV1WithHttpInfo(ezsignbulksendCreateObjectV1Request = ezsignbulksendCreateObjectV1Request)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as EzsignbulksendCreateObjectV1Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Create a new Ezsignbulksend
     * The endpoint allows to create one or many elements at once.
     * @param ezsignbulksendCreateObjectV1Request 
     * @return ApiResponse<EzsignbulksendCreateObjectV1Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun ezsignbulksendCreateObjectV1WithHttpInfo(ezsignbulksendCreateObjectV1Request: EzsignbulksendCreateObjectV1Request) : ApiResponse<EzsignbulksendCreateObjectV1Response?> {
        val localVariableConfig = ezsignbulksendCreateObjectV1RequestConfig(ezsignbulksendCreateObjectV1Request = ezsignbulksendCreateObjectV1Request)

        return request<EzsignbulksendCreateObjectV1Request, EzsignbulksendCreateObjectV1Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation ezsignbulksendCreateObjectV1
     *
     * @param ezsignbulksendCreateObjectV1Request 
     * @return RequestConfig
     */
    fun ezsignbulksendCreateObjectV1RequestConfig(ezsignbulksendCreateObjectV1Request: EzsignbulksendCreateObjectV1Request) : RequestConfig<EzsignbulksendCreateObjectV1Request> {
        val localVariableBody = ezsignbulksendCreateObjectV1Request
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/1/object/ezsignbulksend",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Delete an existing Ezsignbulksend
     * 
     * @param pkiEzsignbulksendID 
     * @return EzsignbulksendDeleteObjectV1Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun ezsignbulksendDeleteObjectV1(pkiEzsignbulksendID: kotlin.Int) : EzsignbulksendDeleteObjectV1Response {
        val localVarResponse = ezsignbulksendDeleteObjectV1WithHttpInfo(pkiEzsignbulksendID = pkiEzsignbulksendID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as EzsignbulksendDeleteObjectV1Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Delete an existing Ezsignbulksend
     * 
     * @param pkiEzsignbulksendID 
     * @return ApiResponse<EzsignbulksendDeleteObjectV1Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun ezsignbulksendDeleteObjectV1WithHttpInfo(pkiEzsignbulksendID: kotlin.Int) : ApiResponse<EzsignbulksendDeleteObjectV1Response?> {
        val localVariableConfig = ezsignbulksendDeleteObjectV1RequestConfig(pkiEzsignbulksendID = pkiEzsignbulksendID)

        return request<Unit, EzsignbulksendDeleteObjectV1Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation ezsignbulksendDeleteObjectV1
     *
     * @param pkiEzsignbulksendID 
     * @return RequestConfig
     */
    fun ezsignbulksendDeleteObjectV1RequestConfig(pkiEzsignbulksendID: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/1/object/ezsignbulksend/{pkiEzsignbulksendID}".replace("{"+"pkiEzsignbulksendID"+"}", encodeURIComponent(pkiEzsignbulksendID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Edit an existing Ezsignbulksend
     * 
     * @param pkiEzsignbulksendID 
     * @param ezsignbulksendEditObjectV1Request 
     * @return EzsignbulksendEditObjectV1Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun ezsignbulksendEditObjectV1(pkiEzsignbulksendID: kotlin.Int, ezsignbulksendEditObjectV1Request: EzsignbulksendEditObjectV1Request) : EzsignbulksendEditObjectV1Response {
        val localVarResponse = ezsignbulksendEditObjectV1WithHttpInfo(pkiEzsignbulksendID = pkiEzsignbulksendID, ezsignbulksendEditObjectV1Request = ezsignbulksendEditObjectV1Request)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as EzsignbulksendEditObjectV1Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Edit an existing Ezsignbulksend
     * 
     * @param pkiEzsignbulksendID 
     * @param ezsignbulksendEditObjectV1Request 
     * @return ApiResponse<EzsignbulksendEditObjectV1Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun ezsignbulksendEditObjectV1WithHttpInfo(pkiEzsignbulksendID: kotlin.Int, ezsignbulksendEditObjectV1Request: EzsignbulksendEditObjectV1Request) : ApiResponse<EzsignbulksendEditObjectV1Response?> {
        val localVariableConfig = ezsignbulksendEditObjectV1RequestConfig(pkiEzsignbulksendID = pkiEzsignbulksendID, ezsignbulksendEditObjectV1Request = ezsignbulksendEditObjectV1Request)

        return request<EzsignbulksendEditObjectV1Request, EzsignbulksendEditObjectV1Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation ezsignbulksendEditObjectV1
     *
     * @param pkiEzsignbulksendID 
     * @param ezsignbulksendEditObjectV1Request 
     * @return RequestConfig
     */
    fun ezsignbulksendEditObjectV1RequestConfig(pkiEzsignbulksendID: kotlin.Int, ezsignbulksendEditObjectV1Request: EzsignbulksendEditObjectV1Request) : RequestConfig<EzsignbulksendEditObjectV1Request> {
        val localVariableBody = ezsignbulksendEditObjectV1Request
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/1/object/ezsignbulksend/{pkiEzsignbulksendID}".replace("{"+"pkiEzsignbulksendID"+"}", encodeURIComponent(pkiEzsignbulksendID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter eCsvSeparator
     */
     enum class ECsvSeparatorEzsignbulksendGetCsvTemplateV1(val value: kotlin.String) {
         @Json(name = "Comma") Comma("Comma"),
         @Json(name = "Semicolon") Semicolon("Semicolon")
     }

    /**
     * Retrieve an existing Ezsignbulksend&#39;s empty Csv template
     * 
     * @param pkiEzsignbulksendID 
     * @param eCsvSeparator Separator that will be used to separate fields
     * @return kotlin.String
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun ezsignbulksendGetCsvTemplateV1(pkiEzsignbulksendID: kotlin.Int, eCsvSeparator: ECsvSeparatorEzsignbulksendGetCsvTemplateV1) : kotlin.String {
        val localVarResponse = ezsignbulksendGetCsvTemplateV1WithHttpInfo(pkiEzsignbulksendID = pkiEzsignbulksendID, eCsvSeparator = eCsvSeparator)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.String
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieve an existing Ezsignbulksend&#39;s empty Csv template
     * 
     * @param pkiEzsignbulksendID 
     * @param eCsvSeparator Separator that will be used to separate fields
     * @return ApiResponse<kotlin.String?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun ezsignbulksendGetCsvTemplateV1WithHttpInfo(pkiEzsignbulksendID: kotlin.Int, eCsvSeparator: ECsvSeparatorEzsignbulksendGetCsvTemplateV1) : ApiResponse<kotlin.String?> {
        val localVariableConfig = ezsignbulksendGetCsvTemplateV1RequestConfig(pkiEzsignbulksendID = pkiEzsignbulksendID, eCsvSeparator = eCsvSeparator)

        return request<Unit, kotlin.String>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation ezsignbulksendGetCsvTemplateV1
     *
     * @param pkiEzsignbulksendID 
     * @param eCsvSeparator Separator that will be used to separate fields
     * @return RequestConfig
     */
    fun ezsignbulksendGetCsvTemplateV1RequestConfig(pkiEzsignbulksendID: kotlin.Int, eCsvSeparator: ECsvSeparatorEzsignbulksendGetCsvTemplateV1) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("eCsvSeparator", listOf(eCsvSeparator.value))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/1/object/ezsignbulksend/{pkiEzsignbulksendID}/getCsvTemplate".replace("{"+"pkiEzsignbulksendID"+"}", encodeURIComponent(pkiEzsignbulksendID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Retrieve an existing Ezsignbulksend&#39;s Ezsignbulksendtransmissions
     * 
     * @param pkiEzsignbulksendID 
     * @return EzsignbulksendGetEzsignbulksendtransmissionsV1Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun ezsignbulksendGetEzsignbulksendtransmissionsV1(pkiEzsignbulksendID: kotlin.Int) : EzsignbulksendGetEzsignbulksendtransmissionsV1Response {
        val localVarResponse = ezsignbulksendGetEzsignbulksendtransmissionsV1WithHttpInfo(pkiEzsignbulksendID = pkiEzsignbulksendID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as EzsignbulksendGetEzsignbulksendtransmissionsV1Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieve an existing Ezsignbulksend&#39;s Ezsignbulksendtransmissions
     * 
     * @param pkiEzsignbulksendID 
     * @return ApiResponse<EzsignbulksendGetEzsignbulksendtransmissionsV1Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun ezsignbulksendGetEzsignbulksendtransmissionsV1WithHttpInfo(pkiEzsignbulksendID: kotlin.Int) : ApiResponse<EzsignbulksendGetEzsignbulksendtransmissionsV1Response?> {
        val localVariableConfig = ezsignbulksendGetEzsignbulksendtransmissionsV1RequestConfig(pkiEzsignbulksendID = pkiEzsignbulksendID)

        return request<Unit, EzsignbulksendGetEzsignbulksendtransmissionsV1Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation ezsignbulksendGetEzsignbulksendtransmissionsV1
     *
     * @param pkiEzsignbulksendID 
     * @return RequestConfig
     */
    fun ezsignbulksendGetEzsignbulksendtransmissionsV1RequestConfig(pkiEzsignbulksendID: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/1/object/ezsignbulksend/{pkiEzsignbulksendID}/getEzsignbulksendtransmissions".replace("{"+"pkiEzsignbulksendID"+"}", encodeURIComponent(pkiEzsignbulksendID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Retrieve an existing Ezsignbulksend&#39;s automatic Ezsignsignatures
     * Return the Ezsignsignatures that can be signed by the current user at the current step in the process
     * @param pkiEzsignbulksendID 
     * @return EzsignbulksendGetEzsignsignaturesAutomaticV1Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun ezsignbulksendGetEzsignsignaturesAutomaticV1(pkiEzsignbulksendID: kotlin.Int) : EzsignbulksendGetEzsignsignaturesAutomaticV1Response {
        val localVarResponse = ezsignbulksendGetEzsignsignaturesAutomaticV1WithHttpInfo(pkiEzsignbulksendID = pkiEzsignbulksendID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as EzsignbulksendGetEzsignsignaturesAutomaticV1Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieve an existing Ezsignbulksend&#39;s automatic Ezsignsignatures
     * Return the Ezsignsignatures that can be signed by the current user at the current step in the process
     * @param pkiEzsignbulksendID 
     * @return ApiResponse<EzsignbulksendGetEzsignsignaturesAutomaticV1Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun ezsignbulksendGetEzsignsignaturesAutomaticV1WithHttpInfo(pkiEzsignbulksendID: kotlin.Int) : ApiResponse<EzsignbulksendGetEzsignsignaturesAutomaticV1Response?> {
        val localVariableConfig = ezsignbulksendGetEzsignsignaturesAutomaticV1RequestConfig(pkiEzsignbulksendID = pkiEzsignbulksendID)

        return request<Unit, EzsignbulksendGetEzsignsignaturesAutomaticV1Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation ezsignbulksendGetEzsignsignaturesAutomaticV1
     *
     * @param pkiEzsignbulksendID 
     * @return RequestConfig
     */
    fun ezsignbulksendGetEzsignsignaturesAutomaticV1RequestConfig(pkiEzsignbulksendID: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/1/object/ezsignbulksend/{pkiEzsignbulksendID}/getEzsignsignaturesAutomatic".replace("{"+"pkiEzsignbulksendID"+"}", encodeURIComponent(pkiEzsignbulksendID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Retrieve an existing Ezsignbulksend&#39;s forms data
     * 
     * @param pkiEzsignbulksendID 
     * @return EzsignbulksendGetFormsDataV1Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun ezsignbulksendGetFormsDataV1(pkiEzsignbulksendID: kotlin.Int) : EzsignbulksendGetFormsDataV1Response {
        val localVarResponse = ezsignbulksendGetFormsDataV1WithHttpInfo(pkiEzsignbulksendID = pkiEzsignbulksendID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as EzsignbulksendGetFormsDataV1Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieve an existing Ezsignbulksend&#39;s forms data
     * 
     * @param pkiEzsignbulksendID 
     * @return ApiResponse<EzsignbulksendGetFormsDataV1Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun ezsignbulksendGetFormsDataV1WithHttpInfo(pkiEzsignbulksendID: kotlin.Int) : ApiResponse<EzsignbulksendGetFormsDataV1Response?> {
        val localVariableConfig = ezsignbulksendGetFormsDataV1RequestConfig(pkiEzsignbulksendID = pkiEzsignbulksendID)

        return request<Unit, EzsignbulksendGetFormsDataV1Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation ezsignbulksendGetFormsDataV1
     *
     * @param pkiEzsignbulksendID 
     * @return RequestConfig
     */
    fun ezsignbulksendGetFormsDataV1RequestConfig(pkiEzsignbulksendID: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/1/object/ezsignbulksend/{pkiEzsignbulksendID}/getFormsData".replace("{"+"pkiEzsignbulksendID"+"}", encodeURIComponent(pkiEzsignbulksendID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter eOrderBy
     */
     enum class EOrderByEzsignbulksendGetListV1(val value: kotlin.String) {
         @Json(name = "pkiEzsignbulksendID_ASC") pkiEzsignbulksendID_ASC("pkiEzsignbulksendID_ASC"),
         @Json(name = "pkiEzsignbulksendID_DESC") pkiEzsignbulksendID_DESC("pkiEzsignbulksendID_DESC"),
         @Json(name = "fkiEzsignfoldertypeID_ASC") fkiEzsignfoldertypeID_ASC("fkiEzsignfoldertypeID_ASC"),
         @Json(name = "fkiEzsignfoldertypeID_DESC") fkiEzsignfoldertypeID_DESC("fkiEzsignfoldertypeID_DESC"),
         @Json(name = "sEzsignbulksendDescription_ASC") sEzsignbulksendDescription_ASC("sEzsignbulksendDescription_ASC"),
         @Json(name = "sEzsignbulksendDescription_DESC") sEzsignbulksendDescription_DESC("sEzsignbulksendDescription_DESC"),
         @Json(name = "sEzsignfoldertypeNameX_ASC") sEzsignfoldertypeNameX_ASC("sEzsignfoldertypeNameX_ASC"),
         @Json(name = "sEzsignfoldertypeNameX_DESC") sEzsignfoldertypeNameX_DESC("sEzsignfoldertypeNameX_DESC"),
         @Json(name = "eEzsignfoldertypePrivacylevel_ASC") eEzsignfoldertypePrivacylevel_ASC("eEzsignfoldertypePrivacylevel_ASC"),
         @Json(name = "eEzsignfoldertypePrivacylevel_DESC") eEzsignfoldertypePrivacylevel_DESC("eEzsignfoldertypePrivacylevel_DESC"),
         @Json(name = "bEzsignbulksendNeedvalidation_ASC") bEzsignbulksendNeedvalidation_ASC("bEzsignbulksendNeedvalidation_ASC"),
         @Json(name = "bEzsignbulksendNeedvalidation_DESC") bEzsignbulksendNeedvalidation_DESC("bEzsignbulksendNeedvalidation_DESC"),
         @Json(name = "iEzsignbulksendtransmission_ASC") iEzsignbulksendtransmission_ASC("iEzsignbulksendtransmission_ASC"),
         @Json(name = "iEzsignbulksendtransmission_DESC") iEzsignbulksendtransmission_DESC("iEzsignbulksendtransmission_DESC"),
         @Json(name = "iEzsignfolder_ASC") iEzsignfolder_ASC("iEzsignfolder_ASC"),
         @Json(name = "iEzsignfolder_DESC") iEzsignfolder_DESC("iEzsignfolder_DESC"),
         @Json(name = "iEzsigndocument_ASC") iEzsigndocument_ASC("iEzsigndocument_ASC"),
         @Json(name = "iEzsigndocument_DESC") iEzsigndocument_DESC("iEzsigndocument_DESC"),
         @Json(name = "iEzsignsignature_ASC") iEzsignsignature_ASC("iEzsignsignature_ASC"),
         @Json(name = "iEzsignsignature_DESC") iEzsignsignature_DESC("iEzsignsignature_DESC"),
         @Json(name = "iEzsignsignatureSigned_ASC") iEzsignsignatureSigned_ASC("iEzsignsignatureSigned_ASC"),
         @Json(name = "iEzsignsignatureSigned_DESC") iEzsignsignatureSigned_DESC("iEzsignsignatureSigned_DESC"),
         @Json(name = "bEzsignbulksendIsactive_ASC") bEzsignbulksendIsactive_ASC("bEzsignbulksendIsactive_ASC"),
         @Json(name = "bEzsignbulksendIsactive_DESC") bEzsignbulksendIsactive_DESC("bEzsignbulksendIsactive_DESC")
     }

    /**
     * Retrieve Ezsignbulksend list
     * Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |---|---| | eEzsignfoldertypePrivacylevel | User&lt;br&gt;Usergroup |
     * @param eOrderBy Specify how you want the results to be sorted (optional)
     * @param iRowMax  (optional, default to 10000)
     * @param iRowOffset  (optional, default to 0)
     * @param acceptLanguage  (optional)
     * @param sFilter  (optional)
     * @return EzsignbulksendGetListV1Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun ezsignbulksendGetListV1(eOrderBy: EOrderByEzsignbulksendGetListV1? = null, iRowMax: kotlin.Int? = 10000, iRowOffset: kotlin.Int? = 0, acceptLanguage: HeaderAcceptLanguage? = null, sFilter: kotlin.String? = null) : EzsignbulksendGetListV1Response {
        val localVarResponse = ezsignbulksendGetListV1WithHttpInfo(eOrderBy = eOrderBy, iRowMax = iRowMax, iRowOffset = iRowOffset, acceptLanguage = acceptLanguage, sFilter = sFilter)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as EzsignbulksendGetListV1Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieve Ezsignbulksend list
     * Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |---|---| | eEzsignfoldertypePrivacylevel | User&lt;br&gt;Usergroup |
     * @param eOrderBy Specify how you want the results to be sorted (optional)
     * @param iRowMax  (optional, default to 10000)
     * @param iRowOffset  (optional, default to 0)
     * @param acceptLanguage  (optional)
     * @param sFilter  (optional)
     * @return ApiResponse<EzsignbulksendGetListV1Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun ezsignbulksendGetListV1WithHttpInfo(eOrderBy: EOrderByEzsignbulksendGetListV1?, iRowMax: kotlin.Int?, iRowOffset: kotlin.Int?, acceptLanguage: HeaderAcceptLanguage?, sFilter: kotlin.String?) : ApiResponse<EzsignbulksendGetListV1Response?> {
        val localVariableConfig = ezsignbulksendGetListV1RequestConfig(eOrderBy = eOrderBy, iRowMax = iRowMax, iRowOffset = iRowOffset, acceptLanguage = acceptLanguage, sFilter = sFilter)

        return request<Unit, EzsignbulksendGetListV1Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation ezsignbulksendGetListV1
     *
     * @param eOrderBy Specify how you want the results to be sorted (optional)
     * @param iRowMax  (optional, default to 10000)
     * @param iRowOffset  (optional, default to 0)
     * @param acceptLanguage  (optional)
     * @param sFilter  (optional)
     * @return RequestConfig
     */
    fun ezsignbulksendGetListV1RequestConfig(eOrderBy: EOrderByEzsignbulksendGetListV1?, iRowMax: kotlin.Int?, iRowOffset: kotlin.Int?, acceptLanguage: HeaderAcceptLanguage?, sFilter: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (eOrderBy != null) {
                    put("eOrderBy", listOf(eOrderBy.value))
                }
                if (iRowMax != null) {
                    put("iRowMax", listOf(iRowMax.toString()))
                }
                if (iRowOffset != null) {
                    put("iRowOffset", listOf(iRowOffset.toString()))
                }
                if (sFilter != null) {
                    put("sFilter", listOf(sFilter.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/1/object/ezsignbulksend/getList",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Retrieve an existing Ezsignbulksend
     * 
     * @param pkiEzsignbulksendID 
     * @return EzsignbulksendGetObjectV2Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun ezsignbulksendGetObjectV2(pkiEzsignbulksendID: kotlin.Int) : EzsignbulksendGetObjectV2Response {
        val localVarResponse = ezsignbulksendGetObjectV2WithHttpInfo(pkiEzsignbulksendID = pkiEzsignbulksendID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as EzsignbulksendGetObjectV2Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieve an existing Ezsignbulksend
     * 
     * @param pkiEzsignbulksendID 
     * @return ApiResponse<EzsignbulksendGetObjectV2Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun ezsignbulksendGetObjectV2WithHttpInfo(pkiEzsignbulksendID: kotlin.Int) : ApiResponse<EzsignbulksendGetObjectV2Response?> {
        val localVariableConfig = ezsignbulksendGetObjectV2RequestConfig(pkiEzsignbulksendID = pkiEzsignbulksendID)

        return request<Unit, EzsignbulksendGetObjectV2Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation ezsignbulksendGetObjectV2
     *
     * @param pkiEzsignbulksendID 
     * @return RequestConfig
     */
    fun ezsignbulksendGetObjectV2RequestConfig(pkiEzsignbulksendID: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/2/object/ezsignbulksend/{pkiEzsignbulksendID}".replace("{"+"pkiEzsignbulksendID"+"}", encodeURIComponent(pkiEzsignbulksendID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Reorder Ezsignbulksenddocumentmappings in the Ezsignbulksend
     * 
     * @param pkiEzsignbulksendID 
     * @param ezsignbulksendReorderV1Request 
     * @return EzsignbulksendReorderV1Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun ezsignbulksendReorderV1(pkiEzsignbulksendID: kotlin.Int, ezsignbulksendReorderV1Request: EzsignbulksendReorderV1Request) : EzsignbulksendReorderV1Response {
        val localVarResponse = ezsignbulksendReorderV1WithHttpInfo(pkiEzsignbulksendID = pkiEzsignbulksendID, ezsignbulksendReorderV1Request = ezsignbulksendReorderV1Request)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as EzsignbulksendReorderV1Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Reorder Ezsignbulksenddocumentmappings in the Ezsignbulksend
     * 
     * @param pkiEzsignbulksendID 
     * @param ezsignbulksendReorderV1Request 
     * @return ApiResponse<EzsignbulksendReorderV1Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun ezsignbulksendReorderV1WithHttpInfo(pkiEzsignbulksendID: kotlin.Int, ezsignbulksendReorderV1Request: EzsignbulksendReorderV1Request) : ApiResponse<EzsignbulksendReorderV1Response?> {
        val localVariableConfig = ezsignbulksendReorderV1RequestConfig(pkiEzsignbulksendID = pkiEzsignbulksendID, ezsignbulksendReorderV1Request = ezsignbulksendReorderV1Request)

        return request<EzsignbulksendReorderV1Request, EzsignbulksendReorderV1Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation ezsignbulksendReorderV1
     *
     * @param pkiEzsignbulksendID 
     * @param ezsignbulksendReorderV1Request 
     * @return RequestConfig
     */
    fun ezsignbulksendReorderV1RequestConfig(pkiEzsignbulksendID: kotlin.Int, ezsignbulksendReorderV1Request: EzsignbulksendReorderV1Request) : RequestConfig<EzsignbulksendReorderV1Request> {
        val localVariableBody = ezsignbulksendReorderV1Request
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/1/object/ezsignbulksend/{pkiEzsignbulksendID}/reorder".replace("{"+"pkiEzsignbulksendID"+"}", encodeURIComponent(pkiEzsignbulksendID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
