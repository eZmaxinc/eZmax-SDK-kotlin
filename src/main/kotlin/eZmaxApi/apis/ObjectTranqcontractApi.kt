/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package eZmaxApi.apis

import java.io.IOException
import okhttp3.Call
import okhttp3.HttpUrl

import eZmaxApi.models.CommonResponseError
import eZmaxApi.models.TranqcontractGetCommunicationCountV1Response
import eZmaxApi.models.TranqcontractGetCommunicationListV1Response
import eZmaxApi.models.TranqcontractGetCommunicationrecipientsV1Response
import eZmaxApi.models.TranqcontractGetCommunicationsendersV1Response

import com.squareup.moshi.Json

import eZmaxApi.infrastructure.ApiClient
import eZmaxApi.infrastructure.ApiResponse
import eZmaxApi.infrastructure.ClientException
import eZmaxApi.infrastructure.ClientError
import eZmaxApi.infrastructure.ServerException
import eZmaxApi.infrastructure.ServerError
import eZmaxApi.infrastructure.MultiValueMap
import eZmaxApi.infrastructure.PartConfig
import eZmaxApi.infrastructure.RequestConfig
import eZmaxApi.infrastructure.RequestMethod
import eZmaxApi.infrastructure.ResponseType
import eZmaxApi.infrastructure.Success
import eZmaxApi.infrastructure.toMultiValue

class ObjectTranqcontractApi(basePath: kotlin.String = defaultBasePath, client: Call.Factory = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://prod.api.appcluster01.ca-central-1.ezmax.com/rest")
        }
    }

    /**
     * Retrieve Communication count
     * 
     * @param pkiTranqcontractID 
     * @return TranqcontractGetCommunicationCountV1Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun tranqcontractGetCommunicationCountV1(pkiTranqcontractID: kotlin.Int) : TranqcontractGetCommunicationCountV1Response {
        val localVarResponse = tranqcontractGetCommunicationCountV1WithHttpInfo(pkiTranqcontractID = pkiTranqcontractID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as TranqcontractGetCommunicationCountV1Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieve Communication count
     * 
     * @param pkiTranqcontractID 
     * @return ApiResponse<TranqcontractGetCommunicationCountV1Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun tranqcontractGetCommunicationCountV1WithHttpInfo(pkiTranqcontractID: kotlin.Int) : ApiResponse<TranqcontractGetCommunicationCountV1Response?> {
        val localVariableConfig = tranqcontractGetCommunicationCountV1RequestConfig(pkiTranqcontractID = pkiTranqcontractID)

        return request<Unit, TranqcontractGetCommunicationCountV1Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation tranqcontractGetCommunicationCountV1
     *
     * @param pkiTranqcontractID 
     * @return RequestConfig
     */
    fun tranqcontractGetCommunicationCountV1RequestConfig(pkiTranqcontractID: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/1/object/tranqcontract/{pkiTranqcontractID}/getCommunicationCount".replace("{"+"pkiTranqcontractID"+"}", encodeURIComponent(pkiTranqcontractID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Retrieve Communication list
     * 
     * @param pkiTranqcontractID 
     * @return TranqcontractGetCommunicationListV1Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun tranqcontractGetCommunicationListV1(pkiTranqcontractID: kotlin.Int) : TranqcontractGetCommunicationListV1Response {
        val localVarResponse = tranqcontractGetCommunicationListV1WithHttpInfo(pkiTranqcontractID = pkiTranqcontractID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as TranqcontractGetCommunicationListV1Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieve Communication list
     * 
     * @param pkiTranqcontractID 
     * @return ApiResponse<TranqcontractGetCommunicationListV1Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun tranqcontractGetCommunicationListV1WithHttpInfo(pkiTranqcontractID: kotlin.Int) : ApiResponse<TranqcontractGetCommunicationListV1Response?> {
        val localVariableConfig = tranqcontractGetCommunicationListV1RequestConfig(pkiTranqcontractID = pkiTranqcontractID)

        return request<Unit, TranqcontractGetCommunicationListV1Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation tranqcontractGetCommunicationListV1
     *
     * @param pkiTranqcontractID 
     * @return RequestConfig
     */
    fun tranqcontractGetCommunicationListV1RequestConfig(pkiTranqcontractID: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/1/object/tranqcontract/{pkiTranqcontractID}/getCommunicationList".replace("{"+"pkiTranqcontractID"+"}", encodeURIComponent(pkiTranqcontractID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Retrieve Tranqcontract&#39;s Communicationrecipient
     * 
     * @param pkiTranqcontractID 
     * @return TranqcontractGetCommunicationrecipientsV1Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun tranqcontractGetCommunicationrecipientsV1(pkiTranqcontractID: kotlin.Int) : TranqcontractGetCommunicationrecipientsV1Response {
        val localVarResponse = tranqcontractGetCommunicationrecipientsV1WithHttpInfo(pkiTranqcontractID = pkiTranqcontractID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as TranqcontractGetCommunicationrecipientsV1Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieve Tranqcontract&#39;s Communicationrecipient
     * 
     * @param pkiTranqcontractID 
     * @return ApiResponse<TranqcontractGetCommunicationrecipientsV1Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun tranqcontractGetCommunicationrecipientsV1WithHttpInfo(pkiTranqcontractID: kotlin.Int) : ApiResponse<TranqcontractGetCommunicationrecipientsV1Response?> {
        val localVariableConfig = tranqcontractGetCommunicationrecipientsV1RequestConfig(pkiTranqcontractID = pkiTranqcontractID)

        return request<Unit, TranqcontractGetCommunicationrecipientsV1Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation tranqcontractGetCommunicationrecipientsV1
     *
     * @param pkiTranqcontractID 
     * @return RequestConfig
     */
    fun tranqcontractGetCommunicationrecipientsV1RequestConfig(pkiTranqcontractID: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/1/object/tranqcontract/{pkiTranqcontractID}/getCommunicationrecipients".replace("{"+"pkiTranqcontractID"+"}", encodeURIComponent(pkiTranqcontractID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Retrieve Tranqcontract&#39;s Communicationsender
     * 
     * @param pkiTranqcontractID 
     * @return TranqcontractGetCommunicationsendersV1Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun tranqcontractGetCommunicationsendersV1(pkiTranqcontractID: kotlin.Int) : TranqcontractGetCommunicationsendersV1Response {
        val localVarResponse = tranqcontractGetCommunicationsendersV1WithHttpInfo(pkiTranqcontractID = pkiTranqcontractID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as TranqcontractGetCommunicationsendersV1Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieve Tranqcontract&#39;s Communicationsender
     * 
     * @param pkiTranqcontractID 
     * @return ApiResponse<TranqcontractGetCommunicationsendersV1Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun tranqcontractGetCommunicationsendersV1WithHttpInfo(pkiTranqcontractID: kotlin.Int) : ApiResponse<TranqcontractGetCommunicationsendersV1Response?> {
        val localVariableConfig = tranqcontractGetCommunicationsendersV1RequestConfig(pkiTranqcontractID = pkiTranqcontractID)

        return request<Unit, TranqcontractGetCommunicationsendersV1Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation tranqcontractGetCommunicationsendersV1
     *
     * @param pkiTranqcontractID 
     * @return RequestConfig
     */
    fun tranqcontractGetCommunicationsendersV1RequestConfig(pkiTranqcontractID: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/1/object/tranqcontract/{pkiTranqcontractID}/getCommunicationsenders".replace("{"+"pkiTranqcontractID"+"}", encodeURIComponent(pkiTranqcontractID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
