/**
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.7
 * Contact: support-api@ezmax.ca
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package eZmaxApi.apis

import java.io.IOException

import eZmaxApi.models.CommonMinusResponseMinusError
import eZmaxApi.models.EzsigntemplatesignerMinusCreateObjectMinusV1MinusRequest
import eZmaxApi.models.EzsigntemplatesignerMinusCreateObjectMinusV1MinusResponse
import eZmaxApi.models.EzsigntemplatesignerMinusDeleteObjectMinusV1MinusResponse
import eZmaxApi.models.EzsigntemplatesignerMinusEditObjectMinusV1MinusRequest
import eZmaxApi.models.EzsigntemplatesignerMinusEditObjectMinusV1MinusResponse
import eZmaxApi.models.EzsigntemplatesignerMinusGetObjectMinusV1MinusResponse

import com.squareup.moshi.Json

import eZmaxApi.infrastructure.ApiClient
import eZmaxApi.infrastructure.ApiResponse
import eZmaxApi.infrastructure.ClientException
import eZmaxApi.infrastructure.ClientError
import eZmaxApi.infrastructure.ServerException
import eZmaxApi.infrastructure.ServerError
import eZmaxApi.infrastructure.MultiValueMap
import eZmaxApi.infrastructure.PartConfig
import eZmaxApi.infrastructure.RequestConfig
import eZmaxApi.infrastructure.RequestMethod
import eZmaxApi.infrastructure.ResponseType
import eZmaxApi.infrastructure.Success
import eZmaxApi.infrastructure.toMultiValue

class ObjectEzsigntemplatesignerApi(basePath: kotlin.String = defaultBasePath) : ApiClient(basePath) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://prod.api.appcluster01.ca-central-1.ezmax.com/rest")
        }
    }

    /**
     * Create a new Ezsigntemplatesigner
     * The endpoint allows to create one or many elements at once.
     * @param ezsigntemplatesignerMinusCreateObjectMinusV1MinusRequest 
     * @return EzsigntemplatesignerMinusCreateObjectMinusV1MinusResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun ezsigntemplatesignerCreateObjectV1(ezsigntemplatesignerMinusCreateObjectMinusV1MinusRequest: EzsigntemplatesignerMinusCreateObjectMinusV1MinusRequest) : EzsigntemplatesignerMinusCreateObjectMinusV1MinusResponse {
        val localVarResponse = ezsigntemplatesignerCreateObjectV1WithHttpInfo(ezsigntemplatesignerMinusCreateObjectMinusV1MinusRequest = ezsigntemplatesignerMinusCreateObjectMinusV1MinusRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as EzsigntemplatesignerMinusCreateObjectMinusV1MinusResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Create a new Ezsigntemplatesigner
     * The endpoint allows to create one or many elements at once.
     * @param ezsigntemplatesignerMinusCreateObjectMinusV1MinusRequest 
     * @return ApiResponse<EzsigntemplatesignerMinusCreateObjectMinusV1MinusResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun ezsigntemplatesignerCreateObjectV1WithHttpInfo(ezsigntemplatesignerMinusCreateObjectMinusV1MinusRequest: EzsigntemplatesignerMinusCreateObjectMinusV1MinusRequest) : ApiResponse<EzsigntemplatesignerMinusCreateObjectMinusV1MinusResponse?> {
        val localVariableConfig = ezsigntemplatesignerCreateObjectV1RequestConfig(ezsigntemplatesignerMinusCreateObjectMinusV1MinusRequest = ezsigntemplatesignerMinusCreateObjectMinusV1MinusRequest)

        return request<EzsigntemplatesignerMinusCreateObjectMinusV1MinusRequest, EzsigntemplatesignerMinusCreateObjectMinusV1MinusResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation ezsigntemplatesignerCreateObjectV1
     *
     * @param ezsigntemplatesignerMinusCreateObjectMinusV1MinusRequest 
     * @return RequestConfig
     */
    fun ezsigntemplatesignerCreateObjectV1RequestConfig(ezsigntemplatesignerMinusCreateObjectMinusV1MinusRequest: EzsigntemplatesignerMinusCreateObjectMinusV1MinusRequest) : RequestConfig<EzsigntemplatesignerMinusCreateObjectMinusV1MinusRequest> {
        val localVariableBody = ezsigntemplatesignerMinusCreateObjectMinusV1MinusRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/1/object/ezsigntemplatesigner",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Delete an existing Ezsigntemplatesigner
     * 
     * @param pkiEzsigntemplatesignerID 
     * @return EzsigntemplatesignerMinusDeleteObjectMinusV1MinusResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun ezsigntemplatesignerDeleteObjectV1(pkiEzsigntemplatesignerID: kotlin.Int) : EzsigntemplatesignerMinusDeleteObjectMinusV1MinusResponse {
        val localVarResponse = ezsigntemplatesignerDeleteObjectV1WithHttpInfo(pkiEzsigntemplatesignerID = pkiEzsigntemplatesignerID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as EzsigntemplatesignerMinusDeleteObjectMinusV1MinusResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Delete an existing Ezsigntemplatesigner
     * 
     * @param pkiEzsigntemplatesignerID 
     * @return ApiResponse<EzsigntemplatesignerMinusDeleteObjectMinusV1MinusResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun ezsigntemplatesignerDeleteObjectV1WithHttpInfo(pkiEzsigntemplatesignerID: kotlin.Int) : ApiResponse<EzsigntemplatesignerMinusDeleteObjectMinusV1MinusResponse?> {
        val localVariableConfig = ezsigntemplatesignerDeleteObjectV1RequestConfig(pkiEzsigntemplatesignerID = pkiEzsigntemplatesignerID)

        return request<Unit, EzsigntemplatesignerMinusDeleteObjectMinusV1MinusResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation ezsigntemplatesignerDeleteObjectV1
     *
     * @param pkiEzsigntemplatesignerID 
     * @return RequestConfig
     */
    fun ezsigntemplatesignerDeleteObjectV1RequestConfig(pkiEzsigntemplatesignerID: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/1/object/ezsigntemplatesigner/{pkiEzsigntemplatesignerID}".replace("{"+"pkiEzsigntemplatesignerID"+"}", "$pkiEzsigntemplatesignerID"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Edit an existing Ezsigntemplatesigner
     * 
     * @param pkiEzsigntemplatesignerID 
     * @param ezsigntemplatesignerMinusEditObjectMinusV1MinusRequest 
     * @return EzsigntemplatesignerMinusEditObjectMinusV1MinusResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun ezsigntemplatesignerEditObjectV1(pkiEzsigntemplatesignerID: kotlin.Int, ezsigntemplatesignerMinusEditObjectMinusV1MinusRequest: EzsigntemplatesignerMinusEditObjectMinusV1MinusRequest) : EzsigntemplatesignerMinusEditObjectMinusV1MinusResponse {
        val localVarResponse = ezsigntemplatesignerEditObjectV1WithHttpInfo(pkiEzsigntemplatesignerID = pkiEzsigntemplatesignerID, ezsigntemplatesignerMinusEditObjectMinusV1MinusRequest = ezsigntemplatesignerMinusEditObjectMinusV1MinusRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as EzsigntemplatesignerMinusEditObjectMinusV1MinusResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Edit an existing Ezsigntemplatesigner
     * 
     * @param pkiEzsigntemplatesignerID 
     * @param ezsigntemplatesignerMinusEditObjectMinusV1MinusRequest 
     * @return ApiResponse<EzsigntemplatesignerMinusEditObjectMinusV1MinusResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun ezsigntemplatesignerEditObjectV1WithHttpInfo(pkiEzsigntemplatesignerID: kotlin.Int, ezsigntemplatesignerMinusEditObjectMinusV1MinusRequest: EzsigntemplatesignerMinusEditObjectMinusV1MinusRequest) : ApiResponse<EzsigntemplatesignerMinusEditObjectMinusV1MinusResponse?> {
        val localVariableConfig = ezsigntemplatesignerEditObjectV1RequestConfig(pkiEzsigntemplatesignerID = pkiEzsigntemplatesignerID, ezsigntemplatesignerMinusEditObjectMinusV1MinusRequest = ezsigntemplatesignerMinusEditObjectMinusV1MinusRequest)

        return request<EzsigntemplatesignerMinusEditObjectMinusV1MinusRequest, EzsigntemplatesignerMinusEditObjectMinusV1MinusResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation ezsigntemplatesignerEditObjectV1
     *
     * @param pkiEzsigntemplatesignerID 
     * @param ezsigntemplatesignerMinusEditObjectMinusV1MinusRequest 
     * @return RequestConfig
     */
    fun ezsigntemplatesignerEditObjectV1RequestConfig(pkiEzsigntemplatesignerID: kotlin.Int, ezsigntemplatesignerMinusEditObjectMinusV1MinusRequest: EzsigntemplatesignerMinusEditObjectMinusV1MinusRequest) : RequestConfig<EzsigntemplatesignerMinusEditObjectMinusV1MinusRequest> {
        val localVariableBody = ezsigntemplatesignerMinusEditObjectMinusV1MinusRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/1/object/ezsigntemplatesigner/{pkiEzsigntemplatesignerID}".replace("{"+"pkiEzsigntemplatesignerID"+"}", "$pkiEzsigntemplatesignerID"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Retrieve an existing Ezsigntemplatesigner
     * 
     * @param pkiEzsigntemplatesignerID 
     * @return EzsigntemplatesignerMinusGetObjectMinusV1MinusResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun ezsigntemplatesignerGetObjectV1(pkiEzsigntemplatesignerID: kotlin.Int) : EzsigntemplatesignerMinusGetObjectMinusV1MinusResponse {
        val localVarResponse = ezsigntemplatesignerGetObjectV1WithHttpInfo(pkiEzsigntemplatesignerID = pkiEzsigntemplatesignerID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as EzsigntemplatesignerMinusGetObjectMinusV1MinusResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieve an existing Ezsigntemplatesigner
     * 
     * @param pkiEzsigntemplatesignerID 
     * @return ApiResponse<EzsigntemplatesignerMinusGetObjectMinusV1MinusResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun ezsigntemplatesignerGetObjectV1WithHttpInfo(pkiEzsigntemplatesignerID: kotlin.Int) : ApiResponse<EzsigntemplatesignerMinusGetObjectMinusV1MinusResponse?> {
        val localVariableConfig = ezsigntemplatesignerGetObjectV1RequestConfig(pkiEzsigntemplatesignerID = pkiEzsigntemplatesignerID)

        return request<Unit, EzsigntemplatesignerMinusGetObjectMinusV1MinusResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation ezsigntemplatesignerGetObjectV1
     *
     * @param pkiEzsigntemplatesignerID 
     * @return RequestConfig
     */
    fun ezsigntemplatesignerGetObjectV1RequestConfig(pkiEzsigntemplatesignerID: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/1/object/ezsigntemplatesigner/{pkiEzsigntemplatesignerID}".replace("{"+"pkiEzsigntemplatesignerID"+"}", "$pkiEzsigntemplatesignerID"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

}
