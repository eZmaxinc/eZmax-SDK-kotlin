/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package eZmaxApi.apis

import java.io.IOException
import okhttp3.Call
import okhttp3.HttpUrl

import eZmaxApi.models.CommonResponseError
import eZmaxApi.models.EzsigntemplatesignerCreateObjectV1Request
import eZmaxApi.models.EzsigntemplatesignerCreateObjectV1Response
import eZmaxApi.models.EzsigntemplatesignerDeleteObjectV1Response
import eZmaxApi.models.EzsigntemplatesignerEditObjectV1Request
import eZmaxApi.models.EzsigntemplatesignerEditObjectV1Response
import eZmaxApi.models.EzsigntemplatesignerGetObjectV2Response

import com.squareup.moshi.Json

import eZmaxApi.infrastructure.ApiClient
import eZmaxApi.infrastructure.ApiResponse
import eZmaxApi.infrastructure.ClientException
import eZmaxApi.infrastructure.ClientError
import eZmaxApi.infrastructure.ServerException
import eZmaxApi.infrastructure.ServerError
import eZmaxApi.infrastructure.MultiValueMap
import eZmaxApi.infrastructure.PartConfig
import eZmaxApi.infrastructure.RequestConfig
import eZmaxApi.infrastructure.RequestMethod
import eZmaxApi.infrastructure.ResponseType
import eZmaxApi.infrastructure.Success
import eZmaxApi.infrastructure.toMultiValue

class ObjectEzsigntemplatesignerApi(basePath: kotlin.String = defaultBasePath, client: Call.Factory = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://prod.api.appcluster01.ca-central-1.ezmax.com/rest")
        }
    }

    /**
     * Create a new Ezsigntemplatesigner
     * The endpoint allows to create one or many elements at once.
     * @param ezsigntemplatesignerCreateObjectV1Request 
     * @return EzsigntemplatesignerCreateObjectV1Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun ezsigntemplatesignerCreateObjectV1(ezsigntemplatesignerCreateObjectV1Request: EzsigntemplatesignerCreateObjectV1Request) : EzsigntemplatesignerCreateObjectV1Response {
        val localVarResponse = ezsigntemplatesignerCreateObjectV1WithHttpInfo(ezsigntemplatesignerCreateObjectV1Request = ezsigntemplatesignerCreateObjectV1Request)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as EzsigntemplatesignerCreateObjectV1Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Create a new Ezsigntemplatesigner
     * The endpoint allows to create one or many elements at once.
     * @param ezsigntemplatesignerCreateObjectV1Request 
     * @return ApiResponse<EzsigntemplatesignerCreateObjectV1Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun ezsigntemplatesignerCreateObjectV1WithHttpInfo(ezsigntemplatesignerCreateObjectV1Request: EzsigntemplatesignerCreateObjectV1Request) : ApiResponse<EzsigntemplatesignerCreateObjectV1Response?> {
        val localVariableConfig = ezsigntemplatesignerCreateObjectV1RequestConfig(ezsigntemplatesignerCreateObjectV1Request = ezsigntemplatesignerCreateObjectV1Request)

        return request<EzsigntemplatesignerCreateObjectV1Request, EzsigntemplatesignerCreateObjectV1Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation ezsigntemplatesignerCreateObjectV1
     *
     * @param ezsigntemplatesignerCreateObjectV1Request 
     * @return RequestConfig
     */
    fun ezsigntemplatesignerCreateObjectV1RequestConfig(ezsigntemplatesignerCreateObjectV1Request: EzsigntemplatesignerCreateObjectV1Request) : RequestConfig<EzsigntemplatesignerCreateObjectV1Request> {
        val localVariableBody = ezsigntemplatesignerCreateObjectV1Request
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/1/object/ezsigntemplatesigner",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Delete an existing Ezsigntemplatesigner
     * 
     * @param pkiEzsigntemplatesignerID 
     * @return EzsigntemplatesignerDeleteObjectV1Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun ezsigntemplatesignerDeleteObjectV1(pkiEzsigntemplatesignerID: kotlin.Int) : EzsigntemplatesignerDeleteObjectV1Response {
        val localVarResponse = ezsigntemplatesignerDeleteObjectV1WithHttpInfo(pkiEzsigntemplatesignerID = pkiEzsigntemplatesignerID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as EzsigntemplatesignerDeleteObjectV1Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Delete an existing Ezsigntemplatesigner
     * 
     * @param pkiEzsigntemplatesignerID 
     * @return ApiResponse<EzsigntemplatesignerDeleteObjectV1Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun ezsigntemplatesignerDeleteObjectV1WithHttpInfo(pkiEzsigntemplatesignerID: kotlin.Int) : ApiResponse<EzsigntemplatesignerDeleteObjectV1Response?> {
        val localVariableConfig = ezsigntemplatesignerDeleteObjectV1RequestConfig(pkiEzsigntemplatesignerID = pkiEzsigntemplatesignerID)

        return request<Unit, EzsigntemplatesignerDeleteObjectV1Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation ezsigntemplatesignerDeleteObjectV1
     *
     * @param pkiEzsigntemplatesignerID 
     * @return RequestConfig
     */
    fun ezsigntemplatesignerDeleteObjectV1RequestConfig(pkiEzsigntemplatesignerID: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/1/object/ezsigntemplatesigner/{pkiEzsigntemplatesignerID}".replace("{"+"pkiEzsigntemplatesignerID"+"}", encodeURIComponent(pkiEzsigntemplatesignerID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Edit an existing Ezsigntemplatesigner
     * 
     * @param pkiEzsigntemplatesignerID 
     * @param ezsigntemplatesignerEditObjectV1Request 
     * @return EzsigntemplatesignerEditObjectV1Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun ezsigntemplatesignerEditObjectV1(pkiEzsigntemplatesignerID: kotlin.Int, ezsigntemplatesignerEditObjectV1Request: EzsigntemplatesignerEditObjectV1Request) : EzsigntemplatesignerEditObjectV1Response {
        val localVarResponse = ezsigntemplatesignerEditObjectV1WithHttpInfo(pkiEzsigntemplatesignerID = pkiEzsigntemplatesignerID, ezsigntemplatesignerEditObjectV1Request = ezsigntemplatesignerEditObjectV1Request)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as EzsigntemplatesignerEditObjectV1Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Edit an existing Ezsigntemplatesigner
     * 
     * @param pkiEzsigntemplatesignerID 
     * @param ezsigntemplatesignerEditObjectV1Request 
     * @return ApiResponse<EzsigntemplatesignerEditObjectV1Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun ezsigntemplatesignerEditObjectV1WithHttpInfo(pkiEzsigntemplatesignerID: kotlin.Int, ezsigntemplatesignerEditObjectV1Request: EzsigntemplatesignerEditObjectV1Request) : ApiResponse<EzsigntemplatesignerEditObjectV1Response?> {
        val localVariableConfig = ezsigntemplatesignerEditObjectV1RequestConfig(pkiEzsigntemplatesignerID = pkiEzsigntemplatesignerID, ezsigntemplatesignerEditObjectV1Request = ezsigntemplatesignerEditObjectV1Request)

        return request<EzsigntemplatesignerEditObjectV1Request, EzsigntemplatesignerEditObjectV1Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation ezsigntemplatesignerEditObjectV1
     *
     * @param pkiEzsigntemplatesignerID 
     * @param ezsigntemplatesignerEditObjectV1Request 
     * @return RequestConfig
     */
    fun ezsigntemplatesignerEditObjectV1RequestConfig(pkiEzsigntemplatesignerID: kotlin.Int, ezsigntemplatesignerEditObjectV1Request: EzsigntemplatesignerEditObjectV1Request) : RequestConfig<EzsigntemplatesignerEditObjectV1Request> {
        val localVariableBody = ezsigntemplatesignerEditObjectV1Request
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/1/object/ezsigntemplatesigner/{pkiEzsigntemplatesignerID}".replace("{"+"pkiEzsigntemplatesignerID"+"}", encodeURIComponent(pkiEzsigntemplatesignerID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Retrieve an existing Ezsigntemplatesigner
     * 
     * @param pkiEzsigntemplatesignerID 
     * @return EzsigntemplatesignerGetObjectV2Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun ezsigntemplatesignerGetObjectV2(pkiEzsigntemplatesignerID: kotlin.Int) : EzsigntemplatesignerGetObjectV2Response {
        val localVarResponse = ezsigntemplatesignerGetObjectV2WithHttpInfo(pkiEzsigntemplatesignerID = pkiEzsigntemplatesignerID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as EzsigntemplatesignerGetObjectV2Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieve an existing Ezsigntemplatesigner
     * 
     * @param pkiEzsigntemplatesignerID 
     * @return ApiResponse<EzsigntemplatesignerGetObjectV2Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun ezsigntemplatesignerGetObjectV2WithHttpInfo(pkiEzsigntemplatesignerID: kotlin.Int) : ApiResponse<EzsigntemplatesignerGetObjectV2Response?> {
        val localVariableConfig = ezsigntemplatesignerGetObjectV2RequestConfig(pkiEzsigntemplatesignerID = pkiEzsigntemplatesignerID)

        return request<Unit, EzsigntemplatesignerGetObjectV2Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation ezsigntemplatesignerGetObjectV2
     *
     * @param pkiEzsigntemplatesignerID 
     * @return RequestConfig
     */
    fun ezsigntemplatesignerGetObjectV2RequestConfig(pkiEzsigntemplatesignerID: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/2/object/ezsigntemplatesigner/{pkiEzsigntemplatesignerID}".replace("{"+"pkiEzsigntemplatesignerID"+"}", encodeURIComponent(pkiEzsigntemplatesignerID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
