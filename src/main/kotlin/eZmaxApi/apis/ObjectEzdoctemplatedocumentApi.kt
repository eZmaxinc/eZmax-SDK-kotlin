/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package eZmaxApi.apis

import java.io.IOException
import okhttp3.Call
import okhttp3.HttpUrl

import eZmaxApi.models.CommonResponseError
import eZmaxApi.models.EzdoctemplatedocumentCreateObjectV1Request
import eZmaxApi.models.EzdoctemplatedocumentCreateObjectV1Response
import eZmaxApi.models.EzdoctemplatedocumentEditObjectV1Request
import eZmaxApi.models.EzdoctemplatedocumentEditObjectV1Response
import eZmaxApi.models.EzdoctemplatedocumentGetAutocompleteV2Response
import eZmaxApi.models.EzdoctemplatedocumentGetListV1Response
import eZmaxApi.models.EzdoctemplatedocumentGetObjectV2Response
import eZmaxApi.models.EzdoctemplatedocumentPatchObjectV1Request
import eZmaxApi.models.EzdoctemplatedocumentPatchObjectV1Response
import eZmaxApi.models.HeaderAcceptLanguage

import com.squareup.moshi.Json

import eZmaxApi.infrastructure.ApiClient
import eZmaxApi.infrastructure.ApiResponse
import eZmaxApi.infrastructure.ClientException
import eZmaxApi.infrastructure.ClientError
import eZmaxApi.infrastructure.ServerException
import eZmaxApi.infrastructure.ServerError
import eZmaxApi.infrastructure.MultiValueMap
import eZmaxApi.infrastructure.PartConfig
import eZmaxApi.infrastructure.RequestConfig
import eZmaxApi.infrastructure.RequestMethod
import eZmaxApi.infrastructure.ResponseType
import eZmaxApi.infrastructure.Success
import eZmaxApi.infrastructure.toMultiValue

class ObjectEzdoctemplatedocumentApi(basePath: kotlin.String = defaultBasePath, client: Call.Factory = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://prod.api.appcluster01.ca-central-1.ezmax.com/rest")
        }
    }

    /**
     * Create a new Ezdoctemplatedocument
     * The endpoint allows to create one or many elements at once.
     * @param ezdoctemplatedocumentCreateObjectV1Request 
     * @return EzdoctemplatedocumentCreateObjectV1Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun ezdoctemplatedocumentCreateObjectV1(ezdoctemplatedocumentCreateObjectV1Request: EzdoctemplatedocumentCreateObjectV1Request) : EzdoctemplatedocumentCreateObjectV1Response {
        val localVarResponse = ezdoctemplatedocumentCreateObjectV1WithHttpInfo(ezdoctemplatedocumentCreateObjectV1Request = ezdoctemplatedocumentCreateObjectV1Request)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as EzdoctemplatedocumentCreateObjectV1Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Create a new Ezdoctemplatedocument
     * The endpoint allows to create one or many elements at once.
     * @param ezdoctemplatedocumentCreateObjectV1Request 
     * @return ApiResponse<EzdoctemplatedocumentCreateObjectV1Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun ezdoctemplatedocumentCreateObjectV1WithHttpInfo(ezdoctemplatedocumentCreateObjectV1Request: EzdoctemplatedocumentCreateObjectV1Request) : ApiResponse<EzdoctemplatedocumentCreateObjectV1Response?> {
        val localVariableConfig = ezdoctemplatedocumentCreateObjectV1RequestConfig(ezdoctemplatedocumentCreateObjectV1Request = ezdoctemplatedocumentCreateObjectV1Request)

        return request<EzdoctemplatedocumentCreateObjectV1Request, EzdoctemplatedocumentCreateObjectV1Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation ezdoctemplatedocumentCreateObjectV1
     *
     * @param ezdoctemplatedocumentCreateObjectV1Request 
     * @return RequestConfig
     */
    fun ezdoctemplatedocumentCreateObjectV1RequestConfig(ezdoctemplatedocumentCreateObjectV1Request: EzdoctemplatedocumentCreateObjectV1Request) : RequestConfig<EzdoctemplatedocumentCreateObjectV1Request> {
        val localVariableBody = ezdoctemplatedocumentCreateObjectV1Request
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/1/object/ezdoctemplatedocument",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Retrieve the content
     * Using this endpoint, you can retrieve the content of an ezdoctemplatedocument.
     * @param pkiEzdoctemplatedocumentID 
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun ezdoctemplatedocumentDownloadV1(pkiEzdoctemplatedocumentID: kotlin.Int) : Unit {
        val localVarResponse = ezdoctemplatedocumentDownloadV1WithHttpInfo(pkiEzdoctemplatedocumentID = pkiEzdoctemplatedocumentID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieve the content
     * Using this endpoint, you can retrieve the content of an ezdoctemplatedocument.
     * @param pkiEzdoctemplatedocumentID 
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun ezdoctemplatedocumentDownloadV1WithHttpInfo(pkiEzdoctemplatedocumentID: kotlin.Int) : ApiResponse<Unit?> {
        val localVariableConfig = ezdoctemplatedocumentDownloadV1RequestConfig(pkiEzdoctemplatedocumentID = pkiEzdoctemplatedocumentID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation ezdoctemplatedocumentDownloadV1
     *
     * @param pkiEzdoctemplatedocumentID 
     * @return RequestConfig
     */
    fun ezdoctemplatedocumentDownloadV1RequestConfig(pkiEzdoctemplatedocumentID: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/1/object/ezdoctemplatedocument/{pkiEzdoctemplatedocumentID}/download".replace("{"+"pkiEzdoctemplatedocumentID"+"}", encodeURIComponent(pkiEzdoctemplatedocumentID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Edit an existing Ezdoctemplatedocument
     * 
     * @param pkiEzdoctemplatedocumentID The unique ID of the Ezdoctemplatedocument
     * @param ezdoctemplatedocumentEditObjectV1Request 
     * @return EzdoctemplatedocumentEditObjectV1Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun ezdoctemplatedocumentEditObjectV1(pkiEzdoctemplatedocumentID: kotlin.Int, ezdoctemplatedocumentEditObjectV1Request: EzdoctemplatedocumentEditObjectV1Request) : EzdoctemplatedocumentEditObjectV1Response {
        val localVarResponse = ezdoctemplatedocumentEditObjectV1WithHttpInfo(pkiEzdoctemplatedocumentID = pkiEzdoctemplatedocumentID, ezdoctemplatedocumentEditObjectV1Request = ezdoctemplatedocumentEditObjectV1Request)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as EzdoctemplatedocumentEditObjectV1Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Edit an existing Ezdoctemplatedocument
     * 
     * @param pkiEzdoctemplatedocumentID The unique ID of the Ezdoctemplatedocument
     * @param ezdoctemplatedocumentEditObjectV1Request 
     * @return ApiResponse<EzdoctemplatedocumentEditObjectV1Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun ezdoctemplatedocumentEditObjectV1WithHttpInfo(pkiEzdoctemplatedocumentID: kotlin.Int, ezdoctemplatedocumentEditObjectV1Request: EzdoctemplatedocumentEditObjectV1Request) : ApiResponse<EzdoctemplatedocumentEditObjectV1Response?> {
        val localVariableConfig = ezdoctemplatedocumentEditObjectV1RequestConfig(pkiEzdoctemplatedocumentID = pkiEzdoctemplatedocumentID, ezdoctemplatedocumentEditObjectV1Request = ezdoctemplatedocumentEditObjectV1Request)

        return request<EzdoctemplatedocumentEditObjectV1Request, EzdoctemplatedocumentEditObjectV1Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation ezdoctemplatedocumentEditObjectV1
     *
     * @param pkiEzdoctemplatedocumentID The unique ID of the Ezdoctemplatedocument
     * @param ezdoctemplatedocumentEditObjectV1Request 
     * @return RequestConfig
     */
    fun ezdoctemplatedocumentEditObjectV1RequestConfig(pkiEzdoctemplatedocumentID: kotlin.Int, ezdoctemplatedocumentEditObjectV1Request: EzdoctemplatedocumentEditObjectV1Request) : RequestConfig<EzdoctemplatedocumentEditObjectV1Request> {
        val localVariableBody = ezdoctemplatedocumentEditObjectV1Request
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/1/object/ezdoctemplatedocument/{pkiEzdoctemplatedocumentID}".replace("{"+"pkiEzdoctemplatedocumentID"+"}", encodeURIComponent(pkiEzdoctemplatedocumentID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter sSelector
     */
     enum class SSelectorEzdoctemplatedocumentGetAutocompleteV2(val value: kotlin.String) {
         @Json(name = "All") All("All"),
         @Json(name = "Ezsignfolder") Ezsignfolder("Ezsignfolder"),
         @Json(name = "Ezsignfoldersignerassociations") Ezsignfoldersignerassociations("Ezsignfoldersignerassociations");

        /**
         * Override [toString()] to avoid using the enum variable name as the value, and instead use
         * the actual value defined in the API spec file.
         *
         * This solves a problem when the variable name and its value are different, and ensures that
         * the client sends the correct enum values to the server always.
         */
        override fun toString(): kotlin.String = "$value"
     }

    /**
     * enum for parameter eType
     */
     enum class ETypeEzdoctemplatedocumentGetAutocompleteV2(val value: kotlin.String) {
         @Json(name = "User") User("User"),
         @Json(name = "Company") Company("Company"),
         @Json(name = "Ezsignfoldertype") Ezsignfoldertype("Ezsignfoldertype"),
         @Json(name = "CompanyUser") CompanyUser("CompanyUser"),
         @Json(name = "CompanyEzsignfoldertype") CompanyEzsignfoldertype("CompanyEzsignfoldertype");

        /**
         * Override [toString()] to avoid using the enum variable name as the value, and instead use
         * the actual value defined in the API spec file.
         *
         * This solves a problem when the variable name and its value are different, and ensures that
         * the client sends the correct enum values to the server always.
         */
        override fun toString(): kotlin.String = "$value"
     }

    /**
     * enum for parameter eFilterActive
     */
     enum class EFilterActiveEzdoctemplatedocumentGetAutocompleteV2(val value: kotlin.String) {
         @Json(name = "All") All("All"),
         @Json(name = "Active") Active("Active"),
         @Json(name = "Inactive") Inactive("Inactive");

        /**
         * Override [toString()] to avoid using the enum variable name as the value, and instead use
         * the actual value defined in the API spec file.
         *
         * This solves a problem when the variable name and its value are different, and ensures that
         * the client sends the correct enum values to the server always.
         */
        override fun toString(): kotlin.String = "$value"
     }

    /**
     * Retrieve Ezdoctemplatedocuments and IDs
     * Get the list of Ezdoctemplatedocument to be used in a dropdown or autocomplete control.
     * @param sSelector The type of Ezdoctemplatedocuments to return
     * @param eType The type of Ezdoctemplatedocument (default to CompanyEzsignfoldertype)
     * @param fkiEzsignfoldertypeID Specify which fkiEzsignfoldertypeID we want to display. only used when eType &#x3D; Ezsignfoldertype (optional)
     * @param eFilterActive Specify which results we want to display. (optional, default to Active)
     * @param sQuery Allow to filter the returned results (optional)
     * @param acceptLanguage  (optional)
     * @return EzdoctemplatedocumentGetAutocompleteV2Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun ezdoctemplatedocumentGetAutocompleteV2(sSelector: SSelectorEzdoctemplatedocumentGetAutocompleteV2, eType: ETypeEzdoctemplatedocumentGetAutocompleteV2 = ETypeEzdoctemplatedocumentGetAutocompleteV2.CompanyEzsignfoldertype, fkiEzsignfoldertypeID: kotlin.String? = null, eFilterActive: EFilterActiveEzdoctemplatedocumentGetAutocompleteV2? = EFilterActiveEzdoctemplatedocumentGetAutocompleteV2.Active, sQuery: kotlin.String? = null, acceptLanguage: HeaderAcceptLanguage? = null) : EzdoctemplatedocumentGetAutocompleteV2Response {
        val localVarResponse = ezdoctemplatedocumentGetAutocompleteV2WithHttpInfo(sSelector = sSelector, eType = eType, fkiEzsignfoldertypeID = fkiEzsignfoldertypeID, eFilterActive = eFilterActive, sQuery = sQuery, acceptLanguage = acceptLanguage)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as EzdoctemplatedocumentGetAutocompleteV2Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieve Ezdoctemplatedocuments and IDs
     * Get the list of Ezdoctemplatedocument to be used in a dropdown or autocomplete control.
     * @param sSelector The type of Ezdoctemplatedocuments to return
     * @param eType The type of Ezdoctemplatedocument (default to CompanyEzsignfoldertype)
     * @param fkiEzsignfoldertypeID Specify which fkiEzsignfoldertypeID we want to display. only used when eType &#x3D; Ezsignfoldertype (optional)
     * @param eFilterActive Specify which results we want to display. (optional, default to Active)
     * @param sQuery Allow to filter the returned results (optional)
     * @param acceptLanguage  (optional)
     * @return ApiResponse<EzdoctemplatedocumentGetAutocompleteV2Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun ezdoctemplatedocumentGetAutocompleteV2WithHttpInfo(sSelector: SSelectorEzdoctemplatedocumentGetAutocompleteV2, eType: ETypeEzdoctemplatedocumentGetAutocompleteV2, fkiEzsignfoldertypeID: kotlin.String?, eFilterActive: EFilterActiveEzdoctemplatedocumentGetAutocompleteV2?, sQuery: kotlin.String?, acceptLanguage: HeaderAcceptLanguage?) : ApiResponse<EzdoctemplatedocumentGetAutocompleteV2Response?> {
        val localVariableConfig = ezdoctemplatedocumentGetAutocompleteV2RequestConfig(sSelector = sSelector, eType = eType, fkiEzsignfoldertypeID = fkiEzsignfoldertypeID, eFilterActive = eFilterActive, sQuery = sQuery, acceptLanguage = acceptLanguage)

        return request<Unit, EzdoctemplatedocumentGetAutocompleteV2Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation ezdoctemplatedocumentGetAutocompleteV2
     *
     * @param sSelector The type of Ezdoctemplatedocuments to return
     * @param eType The type of Ezdoctemplatedocument (default to CompanyEzsignfoldertype)
     * @param fkiEzsignfoldertypeID Specify which fkiEzsignfoldertypeID we want to display. only used when eType &#x3D; Ezsignfoldertype (optional)
     * @param eFilterActive Specify which results we want to display. (optional, default to Active)
     * @param sQuery Allow to filter the returned results (optional)
     * @param acceptLanguage  (optional)
     * @return RequestConfig
     */
    fun ezdoctemplatedocumentGetAutocompleteV2RequestConfig(sSelector: SSelectorEzdoctemplatedocumentGetAutocompleteV2, eType: ETypeEzdoctemplatedocumentGetAutocompleteV2, fkiEzsignfoldertypeID: kotlin.String?, eFilterActive: EFilterActiveEzdoctemplatedocumentGetAutocompleteV2?, sQuery: kotlin.String?, acceptLanguage: HeaderAcceptLanguage?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (fkiEzsignfoldertypeID != null) {
                    put("fkiEzsignfoldertypeID", listOf(fkiEzsignfoldertypeID.toString()))
                }
                put("eType", listOf(eType.value))
                if (eFilterActive != null) {
                    put("eFilterActive", listOf(eFilterActive.value))
                }
                if (sQuery != null) {
                    put("sQuery", listOf(sQuery.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/2/object/ezdoctemplatedocument/getAutocomplete/{sSelector}".replace("{"+"sSelector"+"}", encodeURIComponent(sSelector.value.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter eOrderBy
     */
     enum class EOrderByEzdoctemplatedocumentGetListV1(val value: kotlin.String) {
         @Json(name = "pkiEzdoctemplatedocumentID_ASC") pkiEzdoctemplatedocumentID_ASC("pkiEzdoctemplatedocumentID_ASC"),
         @Json(name = "pkiEzdoctemplatedocumentID_DESC") pkiEzdoctemplatedocumentID_DESC("pkiEzdoctemplatedocumentID_DESC"),
         @Json(name = "fkiLanguageID_ASC") fkiLanguageID_ASC("fkiLanguageID_ASC"),
         @Json(name = "fkiLanguageID_DESC") fkiLanguageID_DESC("fkiLanguageID_DESC"),
         @Json(name = "fkiEzdoctemplatetypeID_ASC") fkiEzdoctemplatetypeID_ASC("fkiEzdoctemplatetypeID_ASC"),
         @Json(name = "fkiEzdoctemplatetypeID_DESC") fkiEzdoctemplatetypeID_DESC("fkiEzdoctemplatetypeID_DESC"),
         @Json(name = "fkiEzdoctemplatefieldtypecategoryID_ASC") fkiEzdoctemplatefieldtypecategoryID_ASC("fkiEzdoctemplatefieldtypecategoryID_ASC"),
         @Json(name = "fkiEzdoctemplatefieldtypecategoryID_DESC") fkiEzdoctemplatefieldtypecategoryID_DESC("fkiEzdoctemplatefieldtypecategoryID_DESC"),
         @Json(name = "bEzdoctemplatedocumentIsactive_ASC") bEzdoctemplatedocumentIsactive_ASC("bEzdoctemplatedocumentIsactive_ASC"),
         @Json(name = "bEzdoctemplatedocumentIsactive_DESC") bEzdoctemplatedocumentIsactive_DESC("bEzdoctemplatedocumentIsactive_DESC"),
         @Json(name = "sEzdoctemplatedocumentNameX_ASC") sEzdoctemplatedocumentNameX_ASC("sEzdoctemplatedocumentNameX_ASC"),
         @Json(name = "sEzdoctemplatedocumentNameX_DESC") sEzdoctemplatedocumentNameX_DESC("sEzdoctemplatedocumentNameX_DESC");

        /**
         * Override [toString()] to avoid using the enum variable name as the value, and instead use
         * the actual value defined in the API spec file.
         *
         * This solves a problem when the variable name and its value are different, and ensures that
         * the client sends the correct enum values to the server always.
         */
        override fun toString(): kotlin.String = "$value"
     }

    /**
     * Retrieve Ezdoctemplatedocument list
     * 
     * @param eOrderBy Specify how you want the results to be sorted (optional)
     * @param iRowMax  (optional)
     * @param iRowOffset  (optional, default to 0)
     * @param acceptLanguage  (optional)
     * @param sFilter  (optional)
     * @return EzdoctemplatedocumentGetListV1Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun ezdoctemplatedocumentGetListV1(eOrderBy: EOrderByEzdoctemplatedocumentGetListV1? = null, iRowMax: kotlin.Int? = null, iRowOffset: kotlin.Int? = 0, acceptLanguage: HeaderAcceptLanguage? = null, sFilter: kotlin.String? = null) : EzdoctemplatedocumentGetListV1Response {
        val localVarResponse = ezdoctemplatedocumentGetListV1WithHttpInfo(eOrderBy = eOrderBy, iRowMax = iRowMax, iRowOffset = iRowOffset, acceptLanguage = acceptLanguage, sFilter = sFilter)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as EzdoctemplatedocumentGetListV1Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieve Ezdoctemplatedocument list
     * 
     * @param eOrderBy Specify how you want the results to be sorted (optional)
     * @param iRowMax  (optional)
     * @param iRowOffset  (optional, default to 0)
     * @param acceptLanguage  (optional)
     * @param sFilter  (optional)
     * @return ApiResponse<EzdoctemplatedocumentGetListV1Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun ezdoctemplatedocumentGetListV1WithHttpInfo(eOrderBy: EOrderByEzdoctemplatedocumentGetListV1?, iRowMax: kotlin.Int?, iRowOffset: kotlin.Int?, acceptLanguage: HeaderAcceptLanguage?, sFilter: kotlin.String?) : ApiResponse<EzdoctemplatedocumentGetListV1Response?> {
        val localVariableConfig = ezdoctemplatedocumentGetListV1RequestConfig(eOrderBy = eOrderBy, iRowMax = iRowMax, iRowOffset = iRowOffset, acceptLanguage = acceptLanguage, sFilter = sFilter)

        return request<Unit, EzdoctemplatedocumentGetListV1Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation ezdoctemplatedocumentGetListV1
     *
     * @param eOrderBy Specify how you want the results to be sorted (optional)
     * @param iRowMax  (optional)
     * @param iRowOffset  (optional, default to 0)
     * @param acceptLanguage  (optional)
     * @param sFilter  (optional)
     * @return RequestConfig
     */
    fun ezdoctemplatedocumentGetListV1RequestConfig(eOrderBy: EOrderByEzdoctemplatedocumentGetListV1?, iRowMax: kotlin.Int?, iRowOffset: kotlin.Int?, acceptLanguage: HeaderAcceptLanguage?, sFilter: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (eOrderBy != null) {
                    put("eOrderBy", listOf(eOrderBy.value))
                }
                if (iRowMax != null) {
                    put("iRowMax", listOf(iRowMax.toString()))
                }
                if (iRowOffset != null) {
                    put("iRowOffset", listOf(iRowOffset.toString()))
                }
                if (sFilter != null) {
                    put("sFilter", listOf(sFilter.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/1/object/ezdoctemplatedocument/getList",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Retrieve an existing Ezdoctemplatedocument
     * 
     * @param pkiEzdoctemplatedocumentID The unique ID of the Ezdoctemplatedocument
     * @return EzdoctemplatedocumentGetObjectV2Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun ezdoctemplatedocumentGetObjectV2(pkiEzdoctemplatedocumentID: kotlin.Int) : EzdoctemplatedocumentGetObjectV2Response {
        val localVarResponse = ezdoctemplatedocumentGetObjectV2WithHttpInfo(pkiEzdoctemplatedocumentID = pkiEzdoctemplatedocumentID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as EzdoctemplatedocumentGetObjectV2Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieve an existing Ezdoctemplatedocument
     * 
     * @param pkiEzdoctemplatedocumentID The unique ID of the Ezdoctemplatedocument
     * @return ApiResponse<EzdoctemplatedocumentGetObjectV2Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun ezdoctemplatedocumentGetObjectV2WithHttpInfo(pkiEzdoctemplatedocumentID: kotlin.Int) : ApiResponse<EzdoctemplatedocumentGetObjectV2Response?> {
        val localVariableConfig = ezdoctemplatedocumentGetObjectV2RequestConfig(pkiEzdoctemplatedocumentID = pkiEzdoctemplatedocumentID)

        return request<Unit, EzdoctemplatedocumentGetObjectV2Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation ezdoctemplatedocumentGetObjectV2
     *
     * @param pkiEzdoctemplatedocumentID The unique ID of the Ezdoctemplatedocument
     * @return RequestConfig
     */
    fun ezdoctemplatedocumentGetObjectV2RequestConfig(pkiEzdoctemplatedocumentID: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/2/object/ezdoctemplatedocument/{pkiEzdoctemplatedocumentID}".replace("{"+"pkiEzdoctemplatedocumentID"+"}", encodeURIComponent(pkiEzdoctemplatedocumentID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Patch an existing Ezdoctemplatedocument
     * 
     * @param pkiEzdoctemplatedocumentID The unique ID of the Ezdoctemplatedocument
     * @param ezdoctemplatedocumentPatchObjectV1Request 
     * @return EzdoctemplatedocumentPatchObjectV1Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun ezdoctemplatedocumentPatchObjectV1(pkiEzdoctemplatedocumentID: kotlin.Int, ezdoctemplatedocumentPatchObjectV1Request: EzdoctemplatedocumentPatchObjectV1Request) : EzdoctemplatedocumentPatchObjectV1Response {
        val localVarResponse = ezdoctemplatedocumentPatchObjectV1WithHttpInfo(pkiEzdoctemplatedocumentID = pkiEzdoctemplatedocumentID, ezdoctemplatedocumentPatchObjectV1Request = ezdoctemplatedocumentPatchObjectV1Request)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as EzdoctemplatedocumentPatchObjectV1Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Patch an existing Ezdoctemplatedocument
     * 
     * @param pkiEzdoctemplatedocumentID The unique ID of the Ezdoctemplatedocument
     * @param ezdoctemplatedocumentPatchObjectV1Request 
     * @return ApiResponse<EzdoctemplatedocumentPatchObjectV1Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun ezdoctemplatedocumentPatchObjectV1WithHttpInfo(pkiEzdoctemplatedocumentID: kotlin.Int, ezdoctemplatedocumentPatchObjectV1Request: EzdoctemplatedocumentPatchObjectV1Request) : ApiResponse<EzdoctemplatedocumentPatchObjectV1Response?> {
        val localVariableConfig = ezdoctemplatedocumentPatchObjectV1RequestConfig(pkiEzdoctemplatedocumentID = pkiEzdoctemplatedocumentID, ezdoctemplatedocumentPatchObjectV1Request = ezdoctemplatedocumentPatchObjectV1Request)

        return request<EzdoctemplatedocumentPatchObjectV1Request, EzdoctemplatedocumentPatchObjectV1Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation ezdoctemplatedocumentPatchObjectV1
     *
     * @param pkiEzdoctemplatedocumentID The unique ID of the Ezdoctemplatedocument
     * @param ezdoctemplatedocumentPatchObjectV1Request 
     * @return RequestConfig
     */
    fun ezdoctemplatedocumentPatchObjectV1RequestConfig(pkiEzdoctemplatedocumentID: kotlin.Int, ezdoctemplatedocumentPatchObjectV1Request: EzdoctemplatedocumentPatchObjectV1Request) : RequestConfig<EzdoctemplatedocumentPatchObjectV1Request> {
        val localVariableBody = ezdoctemplatedocumentPatchObjectV1Request
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PATCH,
            path = "/1/object/ezdoctemplatedocument/{pkiEzdoctemplatedocumentID}".replace("{"+"pkiEzdoctemplatedocumentID"+"}", encodeURIComponent(pkiEzdoctemplatedocumentID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
