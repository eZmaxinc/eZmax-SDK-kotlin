/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package eZmaxApi.apis

import java.io.IOException
import okhttp3.Call
import okhttp3.HttpUrl

import eZmaxApi.models.BuyercontractGetCommunicationCountV1Response
import eZmaxApi.models.BuyercontractGetCommunicationListV1Response
import eZmaxApi.models.BuyercontractGetCommunicationrecipientsV1Response
import eZmaxApi.models.BuyercontractGetCommunicationsendersV1Response
import eZmaxApi.models.CommonResponseError

import com.squareup.moshi.Json

import eZmaxApi.infrastructure.ApiClient
import eZmaxApi.infrastructure.ApiResponse
import eZmaxApi.infrastructure.ClientException
import eZmaxApi.infrastructure.ClientError
import eZmaxApi.infrastructure.ServerException
import eZmaxApi.infrastructure.ServerError
import eZmaxApi.infrastructure.MultiValueMap
import eZmaxApi.infrastructure.PartConfig
import eZmaxApi.infrastructure.RequestConfig
import eZmaxApi.infrastructure.RequestMethod
import eZmaxApi.infrastructure.ResponseType
import eZmaxApi.infrastructure.Success
import eZmaxApi.infrastructure.toMultiValue

class ObjectBuyercontractApi(basePath: kotlin.String = defaultBasePath, client: Call.Factory = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://prod.api.appcluster01.ca-central-1.ezmax.com/rest")
        }
    }

    /**
     * GET /1/object/buyercontract/{pkiBuyercontractID}/getCommunicationCount
     * Retrieve Communication count
     * 
     * @param pkiBuyercontractID 
     * @return BuyercontractGetCommunicationCountV1Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun buyercontractGetCommunicationCountV1(pkiBuyercontractID: kotlin.Int) : BuyercontractGetCommunicationCountV1Response {
        val localVarResponse = buyercontractGetCommunicationCountV1WithHttpInfo(pkiBuyercontractID = pkiBuyercontractID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as BuyercontractGetCommunicationCountV1Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /1/object/buyercontract/{pkiBuyercontractID}/getCommunicationCount
     * Retrieve Communication count
     * 
     * @param pkiBuyercontractID 
     * @return ApiResponse<BuyercontractGetCommunicationCountV1Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun buyercontractGetCommunicationCountV1WithHttpInfo(pkiBuyercontractID: kotlin.Int) : ApiResponse<BuyercontractGetCommunicationCountV1Response?> {
        val localVariableConfig = buyercontractGetCommunicationCountV1RequestConfig(pkiBuyercontractID = pkiBuyercontractID)

        return request<Unit, BuyercontractGetCommunicationCountV1Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation buyercontractGetCommunicationCountV1
     *
     * @param pkiBuyercontractID 
     * @return RequestConfig
     */
    fun buyercontractGetCommunicationCountV1RequestConfig(pkiBuyercontractID: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/1/object/buyercontract/{pkiBuyercontractID}/getCommunicationCount".replace("{"+"pkiBuyercontractID"+"}", encodeURIComponent(pkiBuyercontractID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * GET /1/object/buyercontract/{pkiBuyercontractID}/getCommunicationList
     * Retrieve Communication list
     * 
     * @param pkiBuyercontractID 
     * @return BuyercontractGetCommunicationListV1Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun buyercontractGetCommunicationListV1(pkiBuyercontractID: kotlin.Int) : BuyercontractGetCommunicationListV1Response {
        val localVarResponse = buyercontractGetCommunicationListV1WithHttpInfo(pkiBuyercontractID = pkiBuyercontractID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as BuyercontractGetCommunicationListV1Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /1/object/buyercontract/{pkiBuyercontractID}/getCommunicationList
     * Retrieve Communication list
     * 
     * @param pkiBuyercontractID 
     * @return ApiResponse<BuyercontractGetCommunicationListV1Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun buyercontractGetCommunicationListV1WithHttpInfo(pkiBuyercontractID: kotlin.Int) : ApiResponse<BuyercontractGetCommunicationListV1Response?> {
        val localVariableConfig = buyercontractGetCommunicationListV1RequestConfig(pkiBuyercontractID = pkiBuyercontractID)

        return request<Unit, BuyercontractGetCommunicationListV1Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation buyercontractGetCommunicationListV1
     *
     * @param pkiBuyercontractID 
     * @return RequestConfig
     */
    fun buyercontractGetCommunicationListV1RequestConfig(pkiBuyercontractID: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/1/object/buyercontract/{pkiBuyercontractID}/getCommunicationList".replace("{"+"pkiBuyercontractID"+"}", encodeURIComponent(pkiBuyercontractID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * GET /1/object/buyercontract/{pkiBuyercontractID}/getCommunicationrecipients
     * Retrieve Buyercontract&#39;s Communicationrecipient
     * 
     * @param pkiBuyercontractID 
     * @return BuyercontractGetCommunicationrecipientsV1Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun buyercontractGetCommunicationrecipientsV1(pkiBuyercontractID: kotlin.Int) : BuyercontractGetCommunicationrecipientsV1Response {
        val localVarResponse = buyercontractGetCommunicationrecipientsV1WithHttpInfo(pkiBuyercontractID = pkiBuyercontractID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as BuyercontractGetCommunicationrecipientsV1Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /1/object/buyercontract/{pkiBuyercontractID}/getCommunicationrecipients
     * Retrieve Buyercontract&#39;s Communicationrecipient
     * 
     * @param pkiBuyercontractID 
     * @return ApiResponse<BuyercontractGetCommunicationrecipientsV1Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun buyercontractGetCommunicationrecipientsV1WithHttpInfo(pkiBuyercontractID: kotlin.Int) : ApiResponse<BuyercontractGetCommunicationrecipientsV1Response?> {
        val localVariableConfig = buyercontractGetCommunicationrecipientsV1RequestConfig(pkiBuyercontractID = pkiBuyercontractID)

        return request<Unit, BuyercontractGetCommunicationrecipientsV1Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation buyercontractGetCommunicationrecipientsV1
     *
     * @param pkiBuyercontractID 
     * @return RequestConfig
     */
    fun buyercontractGetCommunicationrecipientsV1RequestConfig(pkiBuyercontractID: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/1/object/buyercontract/{pkiBuyercontractID}/getCommunicationrecipients".replace("{"+"pkiBuyercontractID"+"}", encodeURIComponent(pkiBuyercontractID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * GET /1/object/buyercontract/{pkiBuyercontractID}/getCommunicationsenders
     * Retrieve Buyercontract&#39;s Communicationsender
     * 
     * @param pkiBuyercontractID 
     * @return BuyercontractGetCommunicationsendersV1Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun buyercontractGetCommunicationsendersV1(pkiBuyercontractID: kotlin.Int) : BuyercontractGetCommunicationsendersV1Response {
        val localVarResponse = buyercontractGetCommunicationsendersV1WithHttpInfo(pkiBuyercontractID = pkiBuyercontractID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as BuyercontractGetCommunicationsendersV1Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /1/object/buyercontract/{pkiBuyercontractID}/getCommunicationsenders
     * Retrieve Buyercontract&#39;s Communicationsender
     * 
     * @param pkiBuyercontractID 
     * @return ApiResponse<BuyercontractGetCommunicationsendersV1Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun buyercontractGetCommunicationsendersV1WithHttpInfo(pkiBuyercontractID: kotlin.Int) : ApiResponse<BuyercontractGetCommunicationsendersV1Response?> {
        val localVariableConfig = buyercontractGetCommunicationsendersV1RequestConfig(pkiBuyercontractID = pkiBuyercontractID)

        return request<Unit, BuyercontractGetCommunicationsendersV1Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation buyercontractGetCommunicationsendersV1
     *
     * @param pkiBuyercontractID 
     * @return RequestConfig
     */
    fun buyercontractGetCommunicationsendersV1RequestConfig(pkiBuyercontractID: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/1/object/buyercontract/{pkiBuyercontractID}/getCommunicationsenders".replace("{"+"pkiBuyercontractID"+"}", encodeURIComponent(pkiBuyercontractID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
