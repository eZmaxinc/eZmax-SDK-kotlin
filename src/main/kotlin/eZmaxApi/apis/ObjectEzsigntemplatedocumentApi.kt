/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package eZmaxApi.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import eZmaxApi.models.CommonMinusResponseMinusError
import eZmaxApi.models.CommonMinusResponseMinusErrorMinusSTemporaryFileUrl
import eZmaxApi.models.EzsigntemplatedocumentMinusCreateObjectMinusV1MinusRequest
import eZmaxApi.models.EzsigntemplatedocumentMinusCreateObjectMinusV1MinusResponse
import eZmaxApi.models.EzsigntemplatedocumentMinusEditEzsigntemplateformfieldgroupsMinusV1MinusRequest
import eZmaxApi.models.EzsigntemplatedocumentMinusEditEzsigntemplateformfieldgroupsMinusV1MinusResponse
import eZmaxApi.models.EzsigntemplatedocumentMinusEditEzsigntemplatesignaturesMinusV1MinusRequest
import eZmaxApi.models.EzsigntemplatedocumentMinusEditEzsigntemplatesignaturesMinusV1MinusResponse
import eZmaxApi.models.EzsigntemplatedocumentMinusEditObjectMinusV1MinusRequest
import eZmaxApi.models.EzsigntemplatedocumentMinusEditObjectMinusV1MinusResponse
import eZmaxApi.models.EzsigntemplatedocumentMinusGetEzsigntemplatedocumentpagesMinusV1MinusResponse
import eZmaxApi.models.EzsigntemplatedocumentMinusGetEzsigntemplateformfieldgroupsMinusV1MinusResponse
import eZmaxApi.models.EzsigntemplatedocumentMinusGetEzsigntemplatesignaturesMinusV1MinusResponse
import eZmaxApi.models.EzsigntemplatedocumentMinusGetObjectMinusV1MinusResponse
import eZmaxApi.models.EzsigntemplatedocumentMinusGetObjectMinusV2MinusResponse
import eZmaxApi.models.EzsigntemplatedocumentMinusGetWordsPositionsMinusV1MinusRequest
import eZmaxApi.models.EzsigntemplatedocumentMinusGetWordsPositionsMinusV1MinusResponse
import eZmaxApi.models.EzsigntemplatedocumentMinusPatchObjectMinusV1MinusRequest
import eZmaxApi.models.EzsigntemplatedocumentMinusPatchObjectMinusV1MinusResponse

import com.squareup.moshi.Json

import eZmaxApi.infrastructure.ApiClient
import eZmaxApi.infrastructure.ApiResponse
import eZmaxApi.infrastructure.ClientException
import eZmaxApi.infrastructure.ClientError
import eZmaxApi.infrastructure.ServerException
import eZmaxApi.infrastructure.ServerError
import eZmaxApi.infrastructure.MultiValueMap
import eZmaxApi.infrastructure.PartConfig
import eZmaxApi.infrastructure.RequestConfig
import eZmaxApi.infrastructure.RequestMethod
import eZmaxApi.infrastructure.ResponseType
import eZmaxApi.infrastructure.Success
import eZmaxApi.infrastructure.toMultiValue

class ObjectEzsigntemplatedocumentApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://prod.api.appcluster01.ca-central-1.ezmax.com/rest")
        }
    }

    /**
     * Create a new Ezsigntemplatedocument
     * The endpoint allows to create one or many elements at once.
     * @param ezsigntemplatedocumentMinusCreateObjectMinusV1MinusRequest 
     * @return EzsigntemplatedocumentMinusCreateObjectMinusV1MinusResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun ezsigntemplatedocumentCreateObjectV1(ezsigntemplatedocumentMinusCreateObjectMinusV1MinusRequest: EzsigntemplatedocumentMinusCreateObjectMinusV1MinusRequest) : EzsigntemplatedocumentMinusCreateObjectMinusV1MinusResponse {
        val localVarResponse = ezsigntemplatedocumentCreateObjectV1WithHttpInfo(ezsigntemplatedocumentMinusCreateObjectMinusV1MinusRequest = ezsigntemplatedocumentMinusCreateObjectMinusV1MinusRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as EzsigntemplatedocumentMinusCreateObjectMinusV1MinusResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Create a new Ezsigntemplatedocument
     * The endpoint allows to create one or many elements at once.
     * @param ezsigntemplatedocumentMinusCreateObjectMinusV1MinusRequest 
     * @return ApiResponse<EzsigntemplatedocumentMinusCreateObjectMinusV1MinusResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun ezsigntemplatedocumentCreateObjectV1WithHttpInfo(ezsigntemplatedocumentMinusCreateObjectMinusV1MinusRequest: EzsigntemplatedocumentMinusCreateObjectMinusV1MinusRequest) : ApiResponse<EzsigntemplatedocumentMinusCreateObjectMinusV1MinusResponse?> {
        val localVariableConfig = ezsigntemplatedocumentCreateObjectV1RequestConfig(ezsigntemplatedocumentMinusCreateObjectMinusV1MinusRequest = ezsigntemplatedocumentMinusCreateObjectMinusV1MinusRequest)

        return request<EzsigntemplatedocumentMinusCreateObjectMinusV1MinusRequest, EzsigntemplatedocumentMinusCreateObjectMinusV1MinusResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation ezsigntemplatedocumentCreateObjectV1
     *
     * @param ezsigntemplatedocumentMinusCreateObjectMinusV1MinusRequest 
     * @return RequestConfig
     */
    fun ezsigntemplatedocumentCreateObjectV1RequestConfig(ezsigntemplatedocumentMinusCreateObjectMinusV1MinusRequest: EzsigntemplatedocumentMinusCreateObjectMinusV1MinusRequest) : RequestConfig<EzsigntemplatedocumentMinusCreateObjectMinusV1MinusRequest> {
        val localVariableBody = ezsigntemplatedocumentMinusCreateObjectMinusV1MinusRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/1/object/ezsigntemplatedocument",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Edit multiple Ezsigntemplateformfieldgroups
     * Using this endpoint, you can edit multiple Ezsigntemplateformfieldgroups at the same time.
     * @param pkiEzsigntemplatedocumentID 
     * @param ezsigntemplatedocumentMinusEditEzsigntemplateformfieldgroupsMinusV1MinusRequest 
     * @return EzsigntemplatedocumentMinusEditEzsigntemplateformfieldgroupsMinusV1MinusResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1(pkiEzsigntemplatedocumentID: kotlin.Int, ezsigntemplatedocumentMinusEditEzsigntemplateformfieldgroupsMinusV1MinusRequest: EzsigntemplatedocumentMinusEditEzsigntemplateformfieldgroupsMinusV1MinusRequest) : EzsigntemplatedocumentMinusEditEzsigntemplateformfieldgroupsMinusV1MinusResponse {
        val localVarResponse = ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1WithHttpInfo(pkiEzsigntemplatedocumentID = pkiEzsigntemplatedocumentID, ezsigntemplatedocumentMinusEditEzsigntemplateformfieldgroupsMinusV1MinusRequest = ezsigntemplatedocumentMinusEditEzsigntemplateformfieldgroupsMinusV1MinusRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as EzsigntemplatedocumentMinusEditEzsigntemplateformfieldgroupsMinusV1MinusResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Edit multiple Ezsigntemplateformfieldgroups
     * Using this endpoint, you can edit multiple Ezsigntemplateformfieldgroups at the same time.
     * @param pkiEzsigntemplatedocumentID 
     * @param ezsigntemplatedocumentMinusEditEzsigntemplateformfieldgroupsMinusV1MinusRequest 
     * @return ApiResponse<EzsigntemplatedocumentMinusEditEzsigntemplateformfieldgroupsMinusV1MinusResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1WithHttpInfo(pkiEzsigntemplatedocumentID: kotlin.Int, ezsigntemplatedocumentMinusEditEzsigntemplateformfieldgroupsMinusV1MinusRequest: EzsigntemplatedocumentMinusEditEzsigntemplateformfieldgroupsMinusV1MinusRequest) : ApiResponse<EzsigntemplatedocumentMinusEditEzsigntemplateformfieldgroupsMinusV1MinusResponse?> {
        val localVariableConfig = ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1RequestConfig(pkiEzsigntemplatedocumentID = pkiEzsigntemplatedocumentID, ezsigntemplatedocumentMinusEditEzsigntemplateformfieldgroupsMinusV1MinusRequest = ezsigntemplatedocumentMinusEditEzsigntemplateformfieldgroupsMinusV1MinusRequest)

        return request<EzsigntemplatedocumentMinusEditEzsigntemplateformfieldgroupsMinusV1MinusRequest, EzsigntemplatedocumentMinusEditEzsigntemplateformfieldgroupsMinusV1MinusResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1
     *
     * @param pkiEzsigntemplatedocumentID 
     * @param ezsigntemplatedocumentMinusEditEzsigntemplateformfieldgroupsMinusV1MinusRequest 
     * @return RequestConfig
     */
    fun ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1RequestConfig(pkiEzsigntemplatedocumentID: kotlin.Int, ezsigntemplatedocumentMinusEditEzsigntemplateformfieldgroupsMinusV1MinusRequest: EzsigntemplatedocumentMinusEditEzsigntemplateformfieldgroupsMinusV1MinusRequest) : RequestConfig<EzsigntemplatedocumentMinusEditEzsigntemplateformfieldgroupsMinusV1MinusRequest> {
        val localVariableBody = ezsigntemplatedocumentMinusEditEzsigntemplateformfieldgroupsMinusV1MinusRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/1/object/ezsigntemplatedocument/{pkiEzsigntemplatedocumentID}/editEzsigntemplateformfieldgroups".replace("{"+"pkiEzsigntemplatedocumentID"+"}", encodeURIComponent(pkiEzsigntemplatedocumentID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Edit multiple Ezsigntemplatesignatures
     * Using this endpoint, you can edit multiple Ezsigntemplatesignatures at the same time.
     * @param pkiEzsigntemplatedocumentID 
     * @param ezsigntemplatedocumentMinusEditEzsigntemplatesignaturesMinusV1MinusRequest 
     * @return EzsigntemplatedocumentMinusEditEzsigntemplatesignaturesMinusV1MinusResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun ezsigntemplatedocumentEditEzsigntemplatesignaturesV1(pkiEzsigntemplatedocumentID: kotlin.Int, ezsigntemplatedocumentMinusEditEzsigntemplatesignaturesMinusV1MinusRequest: EzsigntemplatedocumentMinusEditEzsigntemplatesignaturesMinusV1MinusRequest) : EzsigntemplatedocumentMinusEditEzsigntemplatesignaturesMinusV1MinusResponse {
        val localVarResponse = ezsigntemplatedocumentEditEzsigntemplatesignaturesV1WithHttpInfo(pkiEzsigntemplatedocumentID = pkiEzsigntemplatedocumentID, ezsigntemplatedocumentMinusEditEzsigntemplatesignaturesMinusV1MinusRequest = ezsigntemplatedocumentMinusEditEzsigntemplatesignaturesMinusV1MinusRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as EzsigntemplatedocumentMinusEditEzsigntemplatesignaturesMinusV1MinusResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Edit multiple Ezsigntemplatesignatures
     * Using this endpoint, you can edit multiple Ezsigntemplatesignatures at the same time.
     * @param pkiEzsigntemplatedocumentID 
     * @param ezsigntemplatedocumentMinusEditEzsigntemplatesignaturesMinusV1MinusRequest 
     * @return ApiResponse<EzsigntemplatedocumentMinusEditEzsigntemplatesignaturesMinusV1MinusResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun ezsigntemplatedocumentEditEzsigntemplatesignaturesV1WithHttpInfo(pkiEzsigntemplatedocumentID: kotlin.Int, ezsigntemplatedocumentMinusEditEzsigntemplatesignaturesMinusV1MinusRequest: EzsigntemplatedocumentMinusEditEzsigntemplatesignaturesMinusV1MinusRequest) : ApiResponse<EzsigntemplatedocumentMinusEditEzsigntemplatesignaturesMinusV1MinusResponse?> {
        val localVariableConfig = ezsigntemplatedocumentEditEzsigntemplatesignaturesV1RequestConfig(pkiEzsigntemplatedocumentID = pkiEzsigntemplatedocumentID, ezsigntemplatedocumentMinusEditEzsigntemplatesignaturesMinusV1MinusRequest = ezsigntemplatedocumentMinusEditEzsigntemplatesignaturesMinusV1MinusRequest)

        return request<EzsigntemplatedocumentMinusEditEzsigntemplatesignaturesMinusV1MinusRequest, EzsigntemplatedocumentMinusEditEzsigntemplatesignaturesMinusV1MinusResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation ezsigntemplatedocumentEditEzsigntemplatesignaturesV1
     *
     * @param pkiEzsigntemplatedocumentID 
     * @param ezsigntemplatedocumentMinusEditEzsigntemplatesignaturesMinusV1MinusRequest 
     * @return RequestConfig
     */
    fun ezsigntemplatedocumentEditEzsigntemplatesignaturesV1RequestConfig(pkiEzsigntemplatedocumentID: kotlin.Int, ezsigntemplatedocumentMinusEditEzsigntemplatesignaturesMinusV1MinusRequest: EzsigntemplatedocumentMinusEditEzsigntemplatesignaturesMinusV1MinusRequest) : RequestConfig<EzsigntemplatedocumentMinusEditEzsigntemplatesignaturesMinusV1MinusRequest> {
        val localVariableBody = ezsigntemplatedocumentMinusEditEzsigntemplatesignaturesMinusV1MinusRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/1/object/ezsigntemplatedocument/{pkiEzsigntemplatedocumentID}/editEzsigntemplatesignatures".replace("{"+"pkiEzsigntemplatedocumentID"+"}", encodeURIComponent(pkiEzsigntemplatedocumentID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Edit an existing Ezsigntemplatedocument
     * 
     * @param pkiEzsigntemplatedocumentID 
     * @param ezsigntemplatedocumentMinusEditObjectMinusV1MinusRequest 
     * @return EzsigntemplatedocumentMinusEditObjectMinusV1MinusResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun ezsigntemplatedocumentEditObjectV1(pkiEzsigntemplatedocumentID: kotlin.Int, ezsigntemplatedocumentMinusEditObjectMinusV1MinusRequest: EzsigntemplatedocumentMinusEditObjectMinusV1MinusRequest) : EzsigntemplatedocumentMinusEditObjectMinusV1MinusResponse {
        val localVarResponse = ezsigntemplatedocumentEditObjectV1WithHttpInfo(pkiEzsigntemplatedocumentID = pkiEzsigntemplatedocumentID, ezsigntemplatedocumentMinusEditObjectMinusV1MinusRequest = ezsigntemplatedocumentMinusEditObjectMinusV1MinusRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as EzsigntemplatedocumentMinusEditObjectMinusV1MinusResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Edit an existing Ezsigntemplatedocument
     * 
     * @param pkiEzsigntemplatedocumentID 
     * @param ezsigntemplatedocumentMinusEditObjectMinusV1MinusRequest 
     * @return ApiResponse<EzsigntemplatedocumentMinusEditObjectMinusV1MinusResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun ezsigntemplatedocumentEditObjectV1WithHttpInfo(pkiEzsigntemplatedocumentID: kotlin.Int, ezsigntemplatedocumentMinusEditObjectMinusV1MinusRequest: EzsigntemplatedocumentMinusEditObjectMinusV1MinusRequest) : ApiResponse<EzsigntemplatedocumentMinusEditObjectMinusV1MinusResponse?> {
        val localVariableConfig = ezsigntemplatedocumentEditObjectV1RequestConfig(pkiEzsigntemplatedocumentID = pkiEzsigntemplatedocumentID, ezsigntemplatedocumentMinusEditObjectMinusV1MinusRequest = ezsigntemplatedocumentMinusEditObjectMinusV1MinusRequest)

        return request<EzsigntemplatedocumentMinusEditObjectMinusV1MinusRequest, EzsigntemplatedocumentMinusEditObjectMinusV1MinusResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation ezsigntemplatedocumentEditObjectV1
     *
     * @param pkiEzsigntemplatedocumentID 
     * @param ezsigntemplatedocumentMinusEditObjectMinusV1MinusRequest 
     * @return RequestConfig
     */
    fun ezsigntemplatedocumentEditObjectV1RequestConfig(pkiEzsigntemplatedocumentID: kotlin.Int, ezsigntemplatedocumentMinusEditObjectMinusV1MinusRequest: EzsigntemplatedocumentMinusEditObjectMinusV1MinusRequest) : RequestConfig<EzsigntemplatedocumentMinusEditObjectMinusV1MinusRequest> {
        val localVariableBody = ezsigntemplatedocumentMinusEditObjectMinusV1MinusRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/1/object/ezsigntemplatedocument/{pkiEzsigntemplatedocumentID}".replace("{"+"pkiEzsigntemplatedocumentID"+"}", encodeURIComponent(pkiEzsigntemplatedocumentID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Retrieve an existing Ezsigntemplatedocument&#39;s Ezsigntemplatedocumentpages
     * 
     * @param pkiEzsigntemplatedocumentID 
     * @return EzsigntemplatedocumentMinusGetEzsigntemplatedocumentpagesMinusV1MinusResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun ezsigntemplatedocumentGetEzsigntemplatedocumentpagesV1(pkiEzsigntemplatedocumentID: kotlin.Int) : EzsigntemplatedocumentMinusGetEzsigntemplatedocumentpagesMinusV1MinusResponse {
        val localVarResponse = ezsigntemplatedocumentGetEzsigntemplatedocumentpagesV1WithHttpInfo(pkiEzsigntemplatedocumentID = pkiEzsigntemplatedocumentID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as EzsigntemplatedocumentMinusGetEzsigntemplatedocumentpagesMinusV1MinusResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieve an existing Ezsigntemplatedocument&#39;s Ezsigntemplatedocumentpages
     * 
     * @param pkiEzsigntemplatedocumentID 
     * @return ApiResponse<EzsigntemplatedocumentMinusGetEzsigntemplatedocumentpagesMinusV1MinusResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun ezsigntemplatedocumentGetEzsigntemplatedocumentpagesV1WithHttpInfo(pkiEzsigntemplatedocumentID: kotlin.Int) : ApiResponse<EzsigntemplatedocumentMinusGetEzsigntemplatedocumentpagesMinusV1MinusResponse?> {
        val localVariableConfig = ezsigntemplatedocumentGetEzsigntemplatedocumentpagesV1RequestConfig(pkiEzsigntemplatedocumentID = pkiEzsigntemplatedocumentID)

        return request<Unit, EzsigntemplatedocumentMinusGetEzsigntemplatedocumentpagesMinusV1MinusResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation ezsigntemplatedocumentGetEzsigntemplatedocumentpagesV1
     *
     * @param pkiEzsigntemplatedocumentID 
     * @return RequestConfig
     */
    fun ezsigntemplatedocumentGetEzsigntemplatedocumentpagesV1RequestConfig(pkiEzsigntemplatedocumentID: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/1/object/ezsigntemplatedocument/{pkiEzsigntemplatedocumentID}/getEzsigntemplatedocumentpages".replace("{"+"pkiEzsigntemplatedocumentID"+"}", encodeURIComponent(pkiEzsigntemplatedocumentID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Retrieve an existing Ezsigntemplatedocument&#39;s Ezsigntemplateformfieldgroups
     * 
     * @param pkiEzsigntemplatedocumentID 
     * @return EzsigntemplatedocumentMinusGetEzsigntemplateformfieldgroupsMinusV1MinusResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun ezsigntemplatedocumentGetEzsigntemplateformfieldgroupsV1(pkiEzsigntemplatedocumentID: kotlin.Int) : EzsigntemplatedocumentMinusGetEzsigntemplateformfieldgroupsMinusV1MinusResponse {
        val localVarResponse = ezsigntemplatedocumentGetEzsigntemplateformfieldgroupsV1WithHttpInfo(pkiEzsigntemplatedocumentID = pkiEzsigntemplatedocumentID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as EzsigntemplatedocumentMinusGetEzsigntemplateformfieldgroupsMinusV1MinusResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieve an existing Ezsigntemplatedocument&#39;s Ezsigntemplateformfieldgroups
     * 
     * @param pkiEzsigntemplatedocumentID 
     * @return ApiResponse<EzsigntemplatedocumentMinusGetEzsigntemplateformfieldgroupsMinusV1MinusResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun ezsigntemplatedocumentGetEzsigntemplateformfieldgroupsV1WithHttpInfo(pkiEzsigntemplatedocumentID: kotlin.Int) : ApiResponse<EzsigntemplatedocumentMinusGetEzsigntemplateformfieldgroupsMinusV1MinusResponse?> {
        val localVariableConfig = ezsigntemplatedocumentGetEzsigntemplateformfieldgroupsV1RequestConfig(pkiEzsigntemplatedocumentID = pkiEzsigntemplatedocumentID)

        return request<Unit, EzsigntemplatedocumentMinusGetEzsigntemplateformfieldgroupsMinusV1MinusResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation ezsigntemplatedocumentGetEzsigntemplateformfieldgroupsV1
     *
     * @param pkiEzsigntemplatedocumentID 
     * @return RequestConfig
     */
    fun ezsigntemplatedocumentGetEzsigntemplateformfieldgroupsV1RequestConfig(pkiEzsigntemplatedocumentID: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/1/object/ezsigntemplatedocument/{pkiEzsigntemplatedocumentID}/getEzsigntemplateformfieldgroups".replace("{"+"pkiEzsigntemplatedocumentID"+"}", encodeURIComponent(pkiEzsigntemplatedocumentID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Retrieve an existing Ezsigntemplatedocument&#39;s Ezsigntemplatesignatures
     * 
     * @param pkiEzsigntemplatedocumentID 
     * @return EzsigntemplatedocumentMinusGetEzsigntemplatesignaturesMinusV1MinusResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun ezsigntemplatedocumentGetEzsigntemplatesignaturesV1(pkiEzsigntemplatedocumentID: kotlin.Int) : EzsigntemplatedocumentMinusGetEzsigntemplatesignaturesMinusV1MinusResponse {
        val localVarResponse = ezsigntemplatedocumentGetEzsigntemplatesignaturesV1WithHttpInfo(pkiEzsigntemplatedocumentID = pkiEzsigntemplatedocumentID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as EzsigntemplatedocumentMinusGetEzsigntemplatesignaturesMinusV1MinusResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieve an existing Ezsigntemplatedocument&#39;s Ezsigntemplatesignatures
     * 
     * @param pkiEzsigntemplatedocumentID 
     * @return ApiResponse<EzsigntemplatedocumentMinusGetEzsigntemplatesignaturesMinusV1MinusResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun ezsigntemplatedocumentGetEzsigntemplatesignaturesV1WithHttpInfo(pkiEzsigntemplatedocumentID: kotlin.Int) : ApiResponse<EzsigntemplatedocumentMinusGetEzsigntemplatesignaturesMinusV1MinusResponse?> {
        val localVariableConfig = ezsigntemplatedocumentGetEzsigntemplatesignaturesV1RequestConfig(pkiEzsigntemplatedocumentID = pkiEzsigntemplatedocumentID)

        return request<Unit, EzsigntemplatedocumentMinusGetEzsigntemplatesignaturesMinusV1MinusResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation ezsigntemplatedocumentGetEzsigntemplatesignaturesV1
     *
     * @param pkiEzsigntemplatedocumentID 
     * @return RequestConfig
     */
    fun ezsigntemplatedocumentGetEzsigntemplatesignaturesV1RequestConfig(pkiEzsigntemplatedocumentID: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/1/object/ezsigntemplatedocument/{pkiEzsigntemplatedocumentID}/getEzsigntemplatesignatures".replace("{"+"pkiEzsigntemplatedocumentID"+"}", encodeURIComponent(pkiEzsigntemplatedocumentID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Retrieve an existing Ezsigntemplatedocument
     * 
     * @param pkiEzsigntemplatedocumentID 
     * @return EzsigntemplatedocumentMinusGetObjectMinusV1MinusResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    @Deprecated(message = "This operation is deprecated.")
    fun ezsigntemplatedocumentGetObjectV1(pkiEzsigntemplatedocumentID: kotlin.Int) : EzsigntemplatedocumentMinusGetObjectMinusV1MinusResponse {
        @Suppress("DEPRECATION")
        val localVarResponse = ezsigntemplatedocumentGetObjectV1WithHttpInfo(pkiEzsigntemplatedocumentID = pkiEzsigntemplatedocumentID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as EzsigntemplatedocumentMinusGetObjectMinusV1MinusResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieve an existing Ezsigntemplatedocument
     * 
     * @param pkiEzsigntemplatedocumentID 
     * @return ApiResponse<EzsigntemplatedocumentMinusGetObjectMinusV1MinusResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    @Deprecated(message = "This operation is deprecated.")
    fun ezsigntemplatedocumentGetObjectV1WithHttpInfo(pkiEzsigntemplatedocumentID: kotlin.Int) : ApiResponse<EzsigntemplatedocumentMinusGetObjectMinusV1MinusResponse?> {
        @Suppress("DEPRECATION")
        val localVariableConfig = ezsigntemplatedocumentGetObjectV1RequestConfig(pkiEzsigntemplatedocumentID = pkiEzsigntemplatedocumentID)

        return request<Unit, EzsigntemplatedocumentMinusGetObjectMinusV1MinusResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation ezsigntemplatedocumentGetObjectV1
     *
     * @param pkiEzsigntemplatedocumentID 
     * @return RequestConfig
     */
    @Deprecated(message = "This operation is deprecated.")
    fun ezsigntemplatedocumentGetObjectV1RequestConfig(pkiEzsigntemplatedocumentID: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/1/object/ezsigntemplatedocument/{pkiEzsigntemplatedocumentID}".replace("{"+"pkiEzsigntemplatedocumentID"+"}", encodeURIComponent(pkiEzsigntemplatedocumentID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Retrieve an existing Ezsigntemplatedocument
     * 
     * @param pkiEzsigntemplatedocumentID 
     * @return EzsigntemplatedocumentMinusGetObjectMinusV2MinusResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun ezsigntemplatedocumentGetObjectV2(pkiEzsigntemplatedocumentID: kotlin.Int) : EzsigntemplatedocumentMinusGetObjectMinusV2MinusResponse {
        val localVarResponse = ezsigntemplatedocumentGetObjectV2WithHttpInfo(pkiEzsigntemplatedocumentID = pkiEzsigntemplatedocumentID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as EzsigntemplatedocumentMinusGetObjectMinusV2MinusResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieve an existing Ezsigntemplatedocument
     * 
     * @param pkiEzsigntemplatedocumentID 
     * @return ApiResponse<EzsigntemplatedocumentMinusGetObjectMinusV2MinusResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun ezsigntemplatedocumentGetObjectV2WithHttpInfo(pkiEzsigntemplatedocumentID: kotlin.Int) : ApiResponse<EzsigntemplatedocumentMinusGetObjectMinusV2MinusResponse?> {
        val localVariableConfig = ezsigntemplatedocumentGetObjectV2RequestConfig(pkiEzsigntemplatedocumentID = pkiEzsigntemplatedocumentID)

        return request<Unit, EzsigntemplatedocumentMinusGetObjectMinusV2MinusResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation ezsigntemplatedocumentGetObjectV2
     *
     * @param pkiEzsigntemplatedocumentID 
     * @return RequestConfig
     */
    fun ezsigntemplatedocumentGetObjectV2RequestConfig(pkiEzsigntemplatedocumentID: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/2/object/ezsigntemplatedocument/{pkiEzsigntemplatedocumentID}".replace("{"+"pkiEzsigntemplatedocumentID"+"}", encodeURIComponent(pkiEzsigntemplatedocumentID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Retrieve positions X,Y of given words from a Ezsigntemplatedocument
     * 
     * @param pkiEzsigntemplatedocumentID 
     * @param ezsigntemplatedocumentMinusGetWordsPositionsMinusV1MinusRequest 
     * @return EzsigntemplatedocumentMinusGetWordsPositionsMinusV1MinusResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun ezsigntemplatedocumentGetWordsPositionsV1(pkiEzsigntemplatedocumentID: kotlin.Int, ezsigntemplatedocumentMinusGetWordsPositionsMinusV1MinusRequest: EzsigntemplatedocumentMinusGetWordsPositionsMinusV1MinusRequest) : EzsigntemplatedocumentMinusGetWordsPositionsMinusV1MinusResponse {
        val localVarResponse = ezsigntemplatedocumentGetWordsPositionsV1WithHttpInfo(pkiEzsigntemplatedocumentID = pkiEzsigntemplatedocumentID, ezsigntemplatedocumentMinusGetWordsPositionsMinusV1MinusRequest = ezsigntemplatedocumentMinusGetWordsPositionsMinusV1MinusRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as EzsigntemplatedocumentMinusGetWordsPositionsMinusV1MinusResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieve positions X,Y of given words from a Ezsigntemplatedocument
     * 
     * @param pkiEzsigntemplatedocumentID 
     * @param ezsigntemplatedocumentMinusGetWordsPositionsMinusV1MinusRequest 
     * @return ApiResponse<EzsigntemplatedocumentMinusGetWordsPositionsMinusV1MinusResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun ezsigntemplatedocumentGetWordsPositionsV1WithHttpInfo(pkiEzsigntemplatedocumentID: kotlin.Int, ezsigntemplatedocumentMinusGetWordsPositionsMinusV1MinusRequest: EzsigntemplatedocumentMinusGetWordsPositionsMinusV1MinusRequest) : ApiResponse<EzsigntemplatedocumentMinusGetWordsPositionsMinusV1MinusResponse?> {
        val localVariableConfig = ezsigntemplatedocumentGetWordsPositionsV1RequestConfig(pkiEzsigntemplatedocumentID = pkiEzsigntemplatedocumentID, ezsigntemplatedocumentMinusGetWordsPositionsMinusV1MinusRequest = ezsigntemplatedocumentMinusGetWordsPositionsMinusV1MinusRequest)

        return request<EzsigntemplatedocumentMinusGetWordsPositionsMinusV1MinusRequest, EzsigntemplatedocumentMinusGetWordsPositionsMinusV1MinusResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation ezsigntemplatedocumentGetWordsPositionsV1
     *
     * @param pkiEzsigntemplatedocumentID 
     * @param ezsigntemplatedocumentMinusGetWordsPositionsMinusV1MinusRequest 
     * @return RequestConfig
     */
    fun ezsigntemplatedocumentGetWordsPositionsV1RequestConfig(pkiEzsigntemplatedocumentID: kotlin.Int, ezsigntemplatedocumentMinusGetWordsPositionsMinusV1MinusRequest: EzsigntemplatedocumentMinusGetWordsPositionsMinusV1MinusRequest) : RequestConfig<EzsigntemplatedocumentMinusGetWordsPositionsMinusV1MinusRequest> {
        val localVariableBody = ezsigntemplatedocumentMinusGetWordsPositionsMinusV1MinusRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/1/object/ezsigntemplatedocument/{pkiEzsigntemplatedocumentID}/getWordsPositions".replace("{"+"pkiEzsigntemplatedocumentID"+"}", encodeURIComponent(pkiEzsigntemplatedocumentID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Patch an existing Ezsigntemplatedocument
     * 
     * @param pkiEzsigntemplatedocumentID 
     * @param ezsigntemplatedocumentMinusPatchObjectMinusV1MinusRequest 
     * @return EzsigntemplatedocumentMinusPatchObjectMinusV1MinusResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun ezsigntemplatedocumentPatchObjectV1(pkiEzsigntemplatedocumentID: kotlin.Int, ezsigntemplatedocumentMinusPatchObjectMinusV1MinusRequest: EzsigntemplatedocumentMinusPatchObjectMinusV1MinusRequest) : EzsigntemplatedocumentMinusPatchObjectMinusV1MinusResponse {
        val localVarResponse = ezsigntemplatedocumentPatchObjectV1WithHttpInfo(pkiEzsigntemplatedocumentID = pkiEzsigntemplatedocumentID, ezsigntemplatedocumentMinusPatchObjectMinusV1MinusRequest = ezsigntemplatedocumentMinusPatchObjectMinusV1MinusRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as EzsigntemplatedocumentMinusPatchObjectMinusV1MinusResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Patch an existing Ezsigntemplatedocument
     * 
     * @param pkiEzsigntemplatedocumentID 
     * @param ezsigntemplatedocumentMinusPatchObjectMinusV1MinusRequest 
     * @return ApiResponse<EzsigntemplatedocumentMinusPatchObjectMinusV1MinusResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun ezsigntemplatedocumentPatchObjectV1WithHttpInfo(pkiEzsigntemplatedocumentID: kotlin.Int, ezsigntemplatedocumentMinusPatchObjectMinusV1MinusRequest: EzsigntemplatedocumentMinusPatchObjectMinusV1MinusRequest) : ApiResponse<EzsigntemplatedocumentMinusPatchObjectMinusV1MinusResponse?> {
        val localVariableConfig = ezsigntemplatedocumentPatchObjectV1RequestConfig(pkiEzsigntemplatedocumentID = pkiEzsigntemplatedocumentID, ezsigntemplatedocumentMinusPatchObjectMinusV1MinusRequest = ezsigntemplatedocumentMinusPatchObjectMinusV1MinusRequest)

        return request<EzsigntemplatedocumentMinusPatchObjectMinusV1MinusRequest, EzsigntemplatedocumentMinusPatchObjectMinusV1MinusResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation ezsigntemplatedocumentPatchObjectV1
     *
     * @param pkiEzsigntemplatedocumentID 
     * @param ezsigntemplatedocumentMinusPatchObjectMinusV1MinusRequest 
     * @return RequestConfig
     */
    fun ezsigntemplatedocumentPatchObjectV1RequestConfig(pkiEzsigntemplatedocumentID: kotlin.Int, ezsigntemplatedocumentMinusPatchObjectMinusV1MinusRequest: EzsigntemplatedocumentMinusPatchObjectMinusV1MinusRequest) : RequestConfig<EzsigntemplatedocumentMinusPatchObjectMinusV1MinusRequest> {
        val localVariableBody = ezsigntemplatedocumentMinusPatchObjectMinusV1MinusRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PATCH,
            path = "/1/object/ezsigntemplatedocument/{pkiEzsigntemplatedocumentID}".replace("{"+"pkiEzsigntemplatedocumentID"+"}", encodeURIComponent(pkiEzsigntemplatedocumentID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
