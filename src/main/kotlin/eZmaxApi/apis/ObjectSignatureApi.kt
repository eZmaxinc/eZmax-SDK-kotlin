/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package eZmaxApi.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import eZmaxApi.models.CommonMinusResponseMinusError
import eZmaxApi.models.SignatureMinusCreateObjectMinusV1MinusRequest
import eZmaxApi.models.SignatureMinusCreateObjectMinusV1MinusResponse
import eZmaxApi.models.SignatureMinusDeleteObjectMinusV1MinusResponse
import eZmaxApi.models.SignatureMinusEditObjectMinusV1MinusRequest
import eZmaxApi.models.SignatureMinusEditObjectMinusV1MinusResponse
import eZmaxApi.models.SignatureMinusGetObjectMinusV2MinusResponse

import com.squareup.moshi.Json

import eZmaxApi.infrastructure.ApiClient
import eZmaxApi.infrastructure.ApiResponse
import eZmaxApi.infrastructure.ClientException
import eZmaxApi.infrastructure.ClientError
import eZmaxApi.infrastructure.ServerException
import eZmaxApi.infrastructure.ServerError
import eZmaxApi.infrastructure.MultiValueMap
import eZmaxApi.infrastructure.PartConfig
import eZmaxApi.infrastructure.RequestConfig
import eZmaxApi.infrastructure.RequestMethod
import eZmaxApi.infrastructure.ResponseType
import eZmaxApi.infrastructure.Success
import eZmaxApi.infrastructure.toMultiValue

class ObjectSignatureApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://prod.api.appcluster01.ca-central-1.ezmax.com/rest")
        }
    }

    /**
     * Create a new Signature
     * The endpoint allows to create one or many elements at once.
     * @param signatureMinusCreateObjectMinusV1MinusRequest 
     * @return SignatureMinusCreateObjectMinusV1MinusResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun signatureCreateObjectV1(signatureMinusCreateObjectMinusV1MinusRequest: SignatureMinusCreateObjectMinusV1MinusRequest) : SignatureMinusCreateObjectMinusV1MinusResponse {
        val localVarResponse = signatureCreateObjectV1WithHttpInfo(signatureMinusCreateObjectMinusV1MinusRequest = signatureMinusCreateObjectMinusV1MinusRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as SignatureMinusCreateObjectMinusV1MinusResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Create a new Signature
     * The endpoint allows to create one or many elements at once.
     * @param signatureMinusCreateObjectMinusV1MinusRequest 
     * @return ApiResponse<SignatureMinusCreateObjectMinusV1MinusResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun signatureCreateObjectV1WithHttpInfo(signatureMinusCreateObjectMinusV1MinusRequest: SignatureMinusCreateObjectMinusV1MinusRequest) : ApiResponse<SignatureMinusCreateObjectMinusV1MinusResponse?> {
        val localVariableConfig = signatureCreateObjectV1RequestConfig(signatureMinusCreateObjectMinusV1MinusRequest = signatureMinusCreateObjectMinusV1MinusRequest)

        return request<SignatureMinusCreateObjectMinusV1MinusRequest, SignatureMinusCreateObjectMinusV1MinusResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation signatureCreateObjectV1
     *
     * @param signatureMinusCreateObjectMinusV1MinusRequest 
     * @return RequestConfig
     */
    fun signatureCreateObjectV1RequestConfig(signatureMinusCreateObjectMinusV1MinusRequest: SignatureMinusCreateObjectMinusV1MinusRequest) : RequestConfig<SignatureMinusCreateObjectMinusV1MinusRequest> {
        val localVariableBody = signatureMinusCreateObjectMinusV1MinusRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/1/object/signature",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Delete an existing Signature
     * 
     * @param pkiSignatureID The unique ID of the Signature
     * @return SignatureMinusDeleteObjectMinusV1MinusResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun signatureDeleteObjectV1(pkiSignatureID: kotlin.Int) : SignatureMinusDeleteObjectMinusV1MinusResponse {
        val localVarResponse = signatureDeleteObjectV1WithHttpInfo(pkiSignatureID = pkiSignatureID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as SignatureMinusDeleteObjectMinusV1MinusResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Delete an existing Signature
     * 
     * @param pkiSignatureID The unique ID of the Signature
     * @return ApiResponse<SignatureMinusDeleteObjectMinusV1MinusResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun signatureDeleteObjectV1WithHttpInfo(pkiSignatureID: kotlin.Int) : ApiResponse<SignatureMinusDeleteObjectMinusV1MinusResponse?> {
        val localVariableConfig = signatureDeleteObjectV1RequestConfig(pkiSignatureID = pkiSignatureID)

        return request<Unit, SignatureMinusDeleteObjectMinusV1MinusResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation signatureDeleteObjectV1
     *
     * @param pkiSignatureID The unique ID of the Signature
     * @return RequestConfig
     */
    fun signatureDeleteObjectV1RequestConfig(pkiSignatureID: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/1/object/signature/{pkiSignatureID}".replace("{"+"pkiSignatureID"+"}", encodeURIComponent(pkiSignatureID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Edit an existing Signature
     * 
     * @param pkiSignatureID The unique ID of the Signature
     * @param signatureMinusEditObjectMinusV1MinusRequest 
     * @return SignatureMinusEditObjectMinusV1MinusResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun signatureEditObjectV1(pkiSignatureID: kotlin.Int, signatureMinusEditObjectMinusV1MinusRequest: SignatureMinusEditObjectMinusV1MinusRequest) : SignatureMinusEditObjectMinusV1MinusResponse {
        val localVarResponse = signatureEditObjectV1WithHttpInfo(pkiSignatureID = pkiSignatureID, signatureMinusEditObjectMinusV1MinusRequest = signatureMinusEditObjectMinusV1MinusRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as SignatureMinusEditObjectMinusV1MinusResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Edit an existing Signature
     * 
     * @param pkiSignatureID The unique ID of the Signature
     * @param signatureMinusEditObjectMinusV1MinusRequest 
     * @return ApiResponse<SignatureMinusEditObjectMinusV1MinusResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun signatureEditObjectV1WithHttpInfo(pkiSignatureID: kotlin.Int, signatureMinusEditObjectMinusV1MinusRequest: SignatureMinusEditObjectMinusV1MinusRequest) : ApiResponse<SignatureMinusEditObjectMinusV1MinusResponse?> {
        val localVariableConfig = signatureEditObjectV1RequestConfig(pkiSignatureID = pkiSignatureID, signatureMinusEditObjectMinusV1MinusRequest = signatureMinusEditObjectMinusV1MinusRequest)

        return request<SignatureMinusEditObjectMinusV1MinusRequest, SignatureMinusEditObjectMinusV1MinusResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation signatureEditObjectV1
     *
     * @param pkiSignatureID The unique ID of the Signature
     * @param signatureMinusEditObjectMinusV1MinusRequest 
     * @return RequestConfig
     */
    fun signatureEditObjectV1RequestConfig(pkiSignatureID: kotlin.Int, signatureMinusEditObjectMinusV1MinusRequest: SignatureMinusEditObjectMinusV1MinusRequest) : RequestConfig<SignatureMinusEditObjectMinusV1MinusRequest> {
        val localVariableBody = signatureMinusEditObjectMinusV1MinusRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/1/object/signature/{pkiSignatureID}".replace("{"+"pkiSignatureID"+"}", encodeURIComponent(pkiSignatureID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Retrieve an existing Signature
     * 
     * @param pkiSignatureID The unique ID of the Signature
     * @return SignatureMinusGetObjectMinusV2MinusResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun signatureGetObjectV2(pkiSignatureID: kotlin.Int) : SignatureMinusGetObjectMinusV2MinusResponse {
        val localVarResponse = signatureGetObjectV2WithHttpInfo(pkiSignatureID = pkiSignatureID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as SignatureMinusGetObjectMinusV2MinusResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieve an existing Signature
     * 
     * @param pkiSignatureID The unique ID of the Signature
     * @return ApiResponse<SignatureMinusGetObjectMinusV2MinusResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun signatureGetObjectV2WithHttpInfo(pkiSignatureID: kotlin.Int) : ApiResponse<SignatureMinusGetObjectMinusV2MinusResponse?> {
        val localVariableConfig = signatureGetObjectV2RequestConfig(pkiSignatureID = pkiSignatureID)

        return request<Unit, SignatureMinusGetObjectMinusV2MinusResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation signatureGetObjectV2
     *
     * @param pkiSignatureID The unique ID of the Signature
     * @return RequestConfig
     */
    fun signatureGetObjectV2RequestConfig(pkiSignatureID: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/2/object/signature/{pkiSignatureID}".replace("{"+"pkiSignatureID"+"}", encodeURIComponent(pkiSignatureID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
