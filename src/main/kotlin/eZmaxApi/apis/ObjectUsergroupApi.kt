/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package eZmaxApi.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import eZmaxApi.models.CommonMinusResponseMinusError
import eZmaxApi.models.HeaderMinusAcceptMinusLanguage
import eZmaxApi.models.UsergroupMinusCreateObjectMinusV1MinusRequest
import eZmaxApi.models.UsergroupMinusCreateObjectMinusV1MinusResponse
import eZmaxApi.models.UsergroupMinusEditObjectMinusV1MinusRequest
import eZmaxApi.models.UsergroupMinusEditObjectMinusV1MinusResponse
import eZmaxApi.models.UsergroupMinusEditPermissionsMinusV1MinusRequest
import eZmaxApi.models.UsergroupMinusEditPermissionsMinusV1MinusResponse
import eZmaxApi.models.UsergroupMinusEditUsergroupmembershipsMinusV1MinusRequest
import eZmaxApi.models.UsergroupMinusEditUsergroupmembershipsMinusV1MinusResponse
import eZmaxApi.models.UsergroupMinusGetAutocompleteMinusV2MinusResponse
import eZmaxApi.models.UsergroupMinusGetListMinusV1MinusResponse
import eZmaxApi.models.UsergroupMinusGetObjectMinusV2MinusResponse
import eZmaxApi.models.UsergroupMinusGetPermissionsMinusV1MinusResponse
import eZmaxApi.models.UsergroupMinusGetUsergroupmembershipsMinusV1MinusResponse

import com.squareup.moshi.Json

import eZmaxApi.infrastructure.ApiClient
import eZmaxApi.infrastructure.ApiResponse
import eZmaxApi.infrastructure.ClientException
import eZmaxApi.infrastructure.ClientError
import eZmaxApi.infrastructure.ServerException
import eZmaxApi.infrastructure.ServerError
import eZmaxApi.infrastructure.MultiValueMap
import eZmaxApi.infrastructure.PartConfig
import eZmaxApi.infrastructure.RequestConfig
import eZmaxApi.infrastructure.RequestMethod
import eZmaxApi.infrastructure.ResponseType
import eZmaxApi.infrastructure.Success
import eZmaxApi.infrastructure.toMultiValue

class ObjectUsergroupApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://prod.api.appcluster01.ca-central-1.ezmax.com/rest")
        }
    }

    /**
     * Create a new Usergroup
     * The endpoint allows to create one or many elements at once.
     * @param usergroupMinusCreateObjectMinusV1MinusRequest 
     * @return UsergroupMinusCreateObjectMinusV1MinusResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun usergroupCreateObjectV1(usergroupMinusCreateObjectMinusV1MinusRequest: UsergroupMinusCreateObjectMinusV1MinusRequest) : UsergroupMinusCreateObjectMinusV1MinusResponse {
        val localVarResponse = usergroupCreateObjectV1WithHttpInfo(usergroupMinusCreateObjectMinusV1MinusRequest = usergroupMinusCreateObjectMinusV1MinusRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as UsergroupMinusCreateObjectMinusV1MinusResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Create a new Usergroup
     * The endpoint allows to create one or many elements at once.
     * @param usergroupMinusCreateObjectMinusV1MinusRequest 
     * @return ApiResponse<UsergroupMinusCreateObjectMinusV1MinusResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun usergroupCreateObjectV1WithHttpInfo(usergroupMinusCreateObjectMinusV1MinusRequest: UsergroupMinusCreateObjectMinusV1MinusRequest) : ApiResponse<UsergroupMinusCreateObjectMinusV1MinusResponse?> {
        val localVariableConfig = usergroupCreateObjectV1RequestConfig(usergroupMinusCreateObjectMinusV1MinusRequest = usergroupMinusCreateObjectMinusV1MinusRequest)

        return request<UsergroupMinusCreateObjectMinusV1MinusRequest, UsergroupMinusCreateObjectMinusV1MinusResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation usergroupCreateObjectV1
     *
     * @param usergroupMinusCreateObjectMinusV1MinusRequest 
     * @return RequestConfig
     */
    fun usergroupCreateObjectV1RequestConfig(usergroupMinusCreateObjectMinusV1MinusRequest: UsergroupMinusCreateObjectMinusV1MinusRequest) : RequestConfig<UsergroupMinusCreateObjectMinusV1MinusRequest> {
        val localVariableBody = usergroupMinusCreateObjectMinusV1MinusRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/1/object/usergroup",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Edit an existing Usergroup
     * 
     * @param pkiUsergroupID 
     * @param usergroupMinusEditObjectMinusV1MinusRequest 
     * @return UsergroupMinusEditObjectMinusV1MinusResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun usergroupEditObjectV1(pkiUsergroupID: kotlin.Int, usergroupMinusEditObjectMinusV1MinusRequest: UsergroupMinusEditObjectMinusV1MinusRequest) : UsergroupMinusEditObjectMinusV1MinusResponse {
        val localVarResponse = usergroupEditObjectV1WithHttpInfo(pkiUsergroupID = pkiUsergroupID, usergroupMinusEditObjectMinusV1MinusRequest = usergroupMinusEditObjectMinusV1MinusRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as UsergroupMinusEditObjectMinusV1MinusResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Edit an existing Usergroup
     * 
     * @param pkiUsergroupID 
     * @param usergroupMinusEditObjectMinusV1MinusRequest 
     * @return ApiResponse<UsergroupMinusEditObjectMinusV1MinusResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun usergroupEditObjectV1WithHttpInfo(pkiUsergroupID: kotlin.Int, usergroupMinusEditObjectMinusV1MinusRequest: UsergroupMinusEditObjectMinusV1MinusRequest) : ApiResponse<UsergroupMinusEditObjectMinusV1MinusResponse?> {
        val localVariableConfig = usergroupEditObjectV1RequestConfig(pkiUsergroupID = pkiUsergroupID, usergroupMinusEditObjectMinusV1MinusRequest = usergroupMinusEditObjectMinusV1MinusRequest)

        return request<UsergroupMinusEditObjectMinusV1MinusRequest, UsergroupMinusEditObjectMinusV1MinusResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation usergroupEditObjectV1
     *
     * @param pkiUsergroupID 
     * @param usergroupMinusEditObjectMinusV1MinusRequest 
     * @return RequestConfig
     */
    fun usergroupEditObjectV1RequestConfig(pkiUsergroupID: kotlin.Int, usergroupMinusEditObjectMinusV1MinusRequest: UsergroupMinusEditObjectMinusV1MinusRequest) : RequestConfig<UsergroupMinusEditObjectMinusV1MinusRequest> {
        val localVariableBody = usergroupMinusEditObjectMinusV1MinusRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/1/object/usergroup/{pkiUsergroupID}".replace("{"+"pkiUsergroupID"+"}", encodeURIComponent(pkiUsergroupID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Edit multiple Permissions
     * Using this endpoint, you can edit multiple Permissions at the same time.
     * @param pkiUsergroupID 
     * @param usergroupMinusEditPermissionsMinusV1MinusRequest 
     * @return UsergroupMinusEditPermissionsMinusV1MinusResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun usergroupEditPermissionsV1(pkiUsergroupID: kotlin.Int, usergroupMinusEditPermissionsMinusV1MinusRequest: UsergroupMinusEditPermissionsMinusV1MinusRequest) : UsergroupMinusEditPermissionsMinusV1MinusResponse {
        val localVarResponse = usergroupEditPermissionsV1WithHttpInfo(pkiUsergroupID = pkiUsergroupID, usergroupMinusEditPermissionsMinusV1MinusRequest = usergroupMinusEditPermissionsMinusV1MinusRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as UsergroupMinusEditPermissionsMinusV1MinusResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Edit multiple Permissions
     * Using this endpoint, you can edit multiple Permissions at the same time.
     * @param pkiUsergroupID 
     * @param usergroupMinusEditPermissionsMinusV1MinusRequest 
     * @return ApiResponse<UsergroupMinusEditPermissionsMinusV1MinusResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun usergroupEditPermissionsV1WithHttpInfo(pkiUsergroupID: kotlin.Int, usergroupMinusEditPermissionsMinusV1MinusRequest: UsergroupMinusEditPermissionsMinusV1MinusRequest) : ApiResponse<UsergroupMinusEditPermissionsMinusV1MinusResponse?> {
        val localVariableConfig = usergroupEditPermissionsV1RequestConfig(pkiUsergroupID = pkiUsergroupID, usergroupMinusEditPermissionsMinusV1MinusRequest = usergroupMinusEditPermissionsMinusV1MinusRequest)

        return request<UsergroupMinusEditPermissionsMinusV1MinusRequest, UsergroupMinusEditPermissionsMinusV1MinusResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation usergroupEditPermissionsV1
     *
     * @param pkiUsergroupID 
     * @param usergroupMinusEditPermissionsMinusV1MinusRequest 
     * @return RequestConfig
     */
    fun usergroupEditPermissionsV1RequestConfig(pkiUsergroupID: kotlin.Int, usergroupMinusEditPermissionsMinusV1MinusRequest: UsergroupMinusEditPermissionsMinusV1MinusRequest) : RequestConfig<UsergroupMinusEditPermissionsMinusV1MinusRequest> {
        val localVariableBody = usergroupMinusEditPermissionsMinusV1MinusRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/1/object/usergroup/{pkiUsergroupID}/editPermissions".replace("{"+"pkiUsergroupID"+"}", encodeURIComponent(pkiUsergroupID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Edit multiple Usergroupmemberships
     * Using this endpoint, you can edit multiple Usergroupmemberships at the same time.
     * @param pkiUsergroupID 
     * @param usergroupMinusEditUsergroupmembershipsMinusV1MinusRequest 
     * @return UsergroupMinusEditUsergroupmembershipsMinusV1MinusResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun usergroupEditUsergroupmembershipsV1(pkiUsergroupID: kotlin.Int, usergroupMinusEditUsergroupmembershipsMinusV1MinusRequest: UsergroupMinusEditUsergroupmembershipsMinusV1MinusRequest) : UsergroupMinusEditUsergroupmembershipsMinusV1MinusResponse {
        val localVarResponse = usergroupEditUsergroupmembershipsV1WithHttpInfo(pkiUsergroupID = pkiUsergroupID, usergroupMinusEditUsergroupmembershipsMinusV1MinusRequest = usergroupMinusEditUsergroupmembershipsMinusV1MinusRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as UsergroupMinusEditUsergroupmembershipsMinusV1MinusResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Edit multiple Usergroupmemberships
     * Using this endpoint, you can edit multiple Usergroupmemberships at the same time.
     * @param pkiUsergroupID 
     * @param usergroupMinusEditUsergroupmembershipsMinusV1MinusRequest 
     * @return ApiResponse<UsergroupMinusEditUsergroupmembershipsMinusV1MinusResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun usergroupEditUsergroupmembershipsV1WithHttpInfo(pkiUsergroupID: kotlin.Int, usergroupMinusEditUsergroupmembershipsMinusV1MinusRequest: UsergroupMinusEditUsergroupmembershipsMinusV1MinusRequest) : ApiResponse<UsergroupMinusEditUsergroupmembershipsMinusV1MinusResponse?> {
        val localVariableConfig = usergroupEditUsergroupmembershipsV1RequestConfig(pkiUsergroupID = pkiUsergroupID, usergroupMinusEditUsergroupmembershipsMinusV1MinusRequest = usergroupMinusEditUsergroupmembershipsMinusV1MinusRequest)

        return request<UsergroupMinusEditUsergroupmembershipsMinusV1MinusRequest, UsergroupMinusEditUsergroupmembershipsMinusV1MinusResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation usergroupEditUsergroupmembershipsV1
     *
     * @param pkiUsergroupID 
     * @param usergroupMinusEditUsergroupmembershipsMinusV1MinusRequest 
     * @return RequestConfig
     */
    fun usergroupEditUsergroupmembershipsV1RequestConfig(pkiUsergroupID: kotlin.Int, usergroupMinusEditUsergroupmembershipsMinusV1MinusRequest: UsergroupMinusEditUsergroupmembershipsMinusV1MinusRequest) : RequestConfig<UsergroupMinusEditUsergroupmembershipsMinusV1MinusRequest> {
        val localVariableBody = usergroupMinusEditUsergroupmembershipsMinusV1MinusRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/1/object/usergroup/{pkiUsergroupID}/editUsergroupmemberships".replace("{"+"pkiUsergroupID"+"}", encodeURIComponent(pkiUsergroupID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter sSelector
     */
     enum class SSelector_usergroupGetAutocompleteV2(val value: kotlin.String) {
         @Json(name = "All") All("All")
     }

    /**
     * enum for parameter eFilterActive
     */
     enum class EFilterActive_usergroupGetAutocompleteV2(val value: kotlin.String) {
         @Json(name = "All") All("All"),
         @Json(name = "Active") Active("Active"),
         @Json(name = "Inactive") Inactive("Inactive")
     }

    /**
     * Retrieve Usergroups and IDs
     * Get the list of Usergroup to be used in a dropdown or autocomplete control.
     * @param sSelector The type of Usergroups to return
     * @param eFilterActive Specify which results we want to display. (optional, default to Active)
     * @param sQuery Allow to filter the returned results (optional)
     * @param acceptLanguage  (optional)
     * @return UsergroupMinusGetAutocompleteMinusV2MinusResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun usergroupGetAutocompleteV2(sSelector: SSelector_usergroupGetAutocompleteV2, eFilterActive: EFilterActive_usergroupGetAutocompleteV2? = EFilterActive_usergroupGetAutocompleteV2.Active, sQuery: kotlin.String? = null, acceptLanguage: HeaderMinusAcceptMinusLanguage? = null) : UsergroupMinusGetAutocompleteMinusV2MinusResponse {
        val localVarResponse = usergroupGetAutocompleteV2WithHttpInfo(sSelector = sSelector, eFilterActive = eFilterActive, sQuery = sQuery, acceptLanguage = acceptLanguage)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as UsergroupMinusGetAutocompleteMinusV2MinusResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieve Usergroups and IDs
     * Get the list of Usergroup to be used in a dropdown or autocomplete control.
     * @param sSelector The type of Usergroups to return
     * @param eFilterActive Specify which results we want to display. (optional, default to Active)
     * @param sQuery Allow to filter the returned results (optional)
     * @param acceptLanguage  (optional)
     * @return ApiResponse<UsergroupMinusGetAutocompleteMinusV2MinusResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun usergroupGetAutocompleteV2WithHttpInfo(sSelector: SSelector_usergroupGetAutocompleteV2, eFilterActive: EFilterActive_usergroupGetAutocompleteV2?, sQuery: kotlin.String?, acceptLanguage: HeaderMinusAcceptMinusLanguage?) : ApiResponse<UsergroupMinusGetAutocompleteMinusV2MinusResponse?> {
        val localVariableConfig = usergroupGetAutocompleteV2RequestConfig(sSelector = sSelector, eFilterActive = eFilterActive, sQuery = sQuery, acceptLanguage = acceptLanguage)

        return request<Unit, UsergroupMinusGetAutocompleteMinusV2MinusResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation usergroupGetAutocompleteV2
     *
     * @param sSelector The type of Usergroups to return
     * @param eFilterActive Specify which results we want to display. (optional, default to Active)
     * @param sQuery Allow to filter the returned results (optional)
     * @param acceptLanguage  (optional)
     * @return RequestConfig
     */
    fun usergroupGetAutocompleteV2RequestConfig(sSelector: SSelector_usergroupGetAutocompleteV2, eFilterActive: EFilterActive_usergroupGetAutocompleteV2?, sQuery: kotlin.String?, acceptLanguage: HeaderMinusAcceptMinusLanguage?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (eFilterActive != null) {
                    put("eFilterActive", listOf(eFilterActive.toString()))
                }
                if (sQuery != null) {
                    put("sQuery", listOf(sQuery.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/2/object/usergroup/getAutocomplete/{sSelector}".replace("{"+"sSelector"+"}", encodeURIComponent(sSelector.value.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter eOrderBy
     */
     enum class EOrderBy_usergroupGetListV1(val value: kotlin.String) {
         @Json(name = "pkiUsergroupID_ASC") pkiUsergroupID_ASC("pkiUsergroupID_ASC"),
         @Json(name = "pkiUsergroupID_DESC") pkiUsergroupID_DESC("pkiUsergroupID_DESC"),
         @Json(name = "sUsergroupNameX_ASC") sUsergroupNameX_ASC("sUsergroupNameX_ASC"),
         @Json(name = "sUsergroupNameX_DESC") sUsergroupNameX_DESC("sUsergroupNameX_DESC"),
         @Json(name = "iCountUser_ASC") iCountUser_ASC("iCountUser_ASC"),
         @Json(name = "iCountUser_DESC") iCountUser_DESC("iCountUser_DESC")
     }

    /**
     * Retrieve Usergroup list
     * 
     * @param eOrderBy Specify how you want the results to be sorted (optional)
     * @param iRowMax  (optional, default to 10000)
     * @param iRowOffset  (optional, default to 0)
     * @param acceptLanguage  (optional)
     * @param sFilter  (optional)
     * @return UsergroupMinusGetListMinusV1MinusResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun usergroupGetListV1(eOrderBy: EOrderBy_usergroupGetListV1? = null, iRowMax: kotlin.Int? = 10000, iRowOffset: kotlin.Int? = 0, acceptLanguage: HeaderMinusAcceptMinusLanguage? = null, sFilter: kotlin.String? = null) : UsergroupMinusGetListMinusV1MinusResponse {
        val localVarResponse = usergroupGetListV1WithHttpInfo(eOrderBy = eOrderBy, iRowMax = iRowMax, iRowOffset = iRowOffset, acceptLanguage = acceptLanguage, sFilter = sFilter)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as UsergroupMinusGetListMinusV1MinusResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieve Usergroup list
     * 
     * @param eOrderBy Specify how you want the results to be sorted (optional)
     * @param iRowMax  (optional, default to 10000)
     * @param iRowOffset  (optional, default to 0)
     * @param acceptLanguage  (optional)
     * @param sFilter  (optional)
     * @return ApiResponse<UsergroupMinusGetListMinusV1MinusResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun usergroupGetListV1WithHttpInfo(eOrderBy: EOrderBy_usergroupGetListV1?, iRowMax: kotlin.Int?, iRowOffset: kotlin.Int?, acceptLanguage: HeaderMinusAcceptMinusLanguage?, sFilter: kotlin.String?) : ApiResponse<UsergroupMinusGetListMinusV1MinusResponse?> {
        val localVariableConfig = usergroupGetListV1RequestConfig(eOrderBy = eOrderBy, iRowMax = iRowMax, iRowOffset = iRowOffset, acceptLanguage = acceptLanguage, sFilter = sFilter)

        return request<Unit, UsergroupMinusGetListMinusV1MinusResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation usergroupGetListV1
     *
     * @param eOrderBy Specify how you want the results to be sorted (optional)
     * @param iRowMax  (optional, default to 10000)
     * @param iRowOffset  (optional, default to 0)
     * @param acceptLanguage  (optional)
     * @param sFilter  (optional)
     * @return RequestConfig
     */
    fun usergroupGetListV1RequestConfig(eOrderBy: EOrderBy_usergroupGetListV1?, iRowMax: kotlin.Int?, iRowOffset: kotlin.Int?, acceptLanguage: HeaderMinusAcceptMinusLanguage?, sFilter: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (eOrderBy != null) {
                    put("eOrderBy", listOf(eOrderBy.toString()))
                }
                if (iRowMax != null) {
                    put("iRowMax", listOf(iRowMax.toString()))
                }
                if (iRowOffset != null) {
                    put("iRowOffset", listOf(iRowOffset.toString()))
                }
                if (sFilter != null) {
                    put("sFilter", listOf(sFilter.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/1/object/usergroup/getList",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Retrieve an existing Usergroup
     * 
     * @param pkiUsergroupID 
     * @return UsergroupMinusGetObjectMinusV2MinusResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun usergroupGetObjectV2(pkiUsergroupID: kotlin.Int) : UsergroupMinusGetObjectMinusV2MinusResponse {
        val localVarResponse = usergroupGetObjectV2WithHttpInfo(pkiUsergroupID = pkiUsergroupID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as UsergroupMinusGetObjectMinusV2MinusResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieve an existing Usergroup
     * 
     * @param pkiUsergroupID 
     * @return ApiResponse<UsergroupMinusGetObjectMinusV2MinusResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun usergroupGetObjectV2WithHttpInfo(pkiUsergroupID: kotlin.Int) : ApiResponse<UsergroupMinusGetObjectMinusV2MinusResponse?> {
        val localVariableConfig = usergroupGetObjectV2RequestConfig(pkiUsergroupID = pkiUsergroupID)

        return request<Unit, UsergroupMinusGetObjectMinusV2MinusResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation usergroupGetObjectV2
     *
     * @param pkiUsergroupID 
     * @return RequestConfig
     */
    fun usergroupGetObjectV2RequestConfig(pkiUsergroupID: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/2/object/usergroup/{pkiUsergroupID}".replace("{"+"pkiUsergroupID"+"}", encodeURIComponent(pkiUsergroupID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Retrieve an existing Usergroup&#39;s Permissions
     * 
     * @param pkiUsergroupID 
     * @return UsergroupMinusGetPermissionsMinusV1MinusResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun usergroupGetPermissionsV1(pkiUsergroupID: kotlin.Int) : UsergroupMinusGetPermissionsMinusV1MinusResponse {
        val localVarResponse = usergroupGetPermissionsV1WithHttpInfo(pkiUsergroupID = pkiUsergroupID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as UsergroupMinusGetPermissionsMinusV1MinusResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieve an existing Usergroup&#39;s Permissions
     * 
     * @param pkiUsergroupID 
     * @return ApiResponse<UsergroupMinusGetPermissionsMinusV1MinusResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun usergroupGetPermissionsV1WithHttpInfo(pkiUsergroupID: kotlin.Int) : ApiResponse<UsergroupMinusGetPermissionsMinusV1MinusResponse?> {
        val localVariableConfig = usergroupGetPermissionsV1RequestConfig(pkiUsergroupID = pkiUsergroupID)

        return request<Unit, UsergroupMinusGetPermissionsMinusV1MinusResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation usergroupGetPermissionsV1
     *
     * @param pkiUsergroupID 
     * @return RequestConfig
     */
    fun usergroupGetPermissionsV1RequestConfig(pkiUsergroupID: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/1/object/usergroup/{pkiUsergroupID}/getPermissions".replace("{"+"pkiUsergroupID"+"}", encodeURIComponent(pkiUsergroupID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Retrieve an existing Usergroup&#39;s Usergroupmemberships
     * 
     * @param pkiUsergroupID 
     * @return UsergroupMinusGetUsergroupmembershipsMinusV1MinusResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun usergroupGetUsergroupmembershipsV1(pkiUsergroupID: kotlin.Int) : UsergroupMinusGetUsergroupmembershipsMinusV1MinusResponse {
        val localVarResponse = usergroupGetUsergroupmembershipsV1WithHttpInfo(pkiUsergroupID = pkiUsergroupID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as UsergroupMinusGetUsergroupmembershipsMinusV1MinusResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieve an existing Usergroup&#39;s Usergroupmemberships
     * 
     * @param pkiUsergroupID 
     * @return ApiResponse<UsergroupMinusGetUsergroupmembershipsMinusV1MinusResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun usergroupGetUsergroupmembershipsV1WithHttpInfo(pkiUsergroupID: kotlin.Int) : ApiResponse<UsergroupMinusGetUsergroupmembershipsMinusV1MinusResponse?> {
        val localVariableConfig = usergroupGetUsergroupmembershipsV1RequestConfig(pkiUsergroupID = pkiUsergroupID)

        return request<Unit, UsergroupMinusGetUsergroupmembershipsMinusV1MinusResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation usergroupGetUsergroupmembershipsV1
     *
     * @param pkiUsergroupID 
     * @return RequestConfig
     */
    fun usergroupGetUsergroupmembershipsV1RequestConfig(pkiUsergroupID: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/1/object/usergroup/{pkiUsergroupID}/getUsergroupmemberships".replace("{"+"pkiUsergroupID"+"}", encodeURIComponent(pkiUsergroupID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
