/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package eZmaxApi.apis

import java.io.IOException
import okhttp3.Call
import okhttp3.HttpUrl

import eZmaxApi.models.CommonResponseError
import eZmaxApi.models.HeaderAcceptLanguage
import eZmaxApi.models.UsergroupCreateObjectV1Request
import eZmaxApi.models.UsergroupCreateObjectV1Response
import eZmaxApi.models.UsergroupEditObjectV1Request
import eZmaxApi.models.UsergroupEditObjectV1Response
import eZmaxApi.models.UsergroupEditPermissionsV1Request
import eZmaxApi.models.UsergroupEditPermissionsV1Response
import eZmaxApi.models.UsergroupEditUsergroupdelegationsV1Request
import eZmaxApi.models.UsergroupEditUsergroupdelegationsV1Response
import eZmaxApi.models.UsergroupEditUsergroupmembershipsV1Request
import eZmaxApi.models.UsergroupEditUsergroupmembershipsV1Response
import eZmaxApi.models.UsergroupGetAutocompleteV2Response
import eZmaxApi.models.UsergroupGetListV1Response
import eZmaxApi.models.UsergroupGetObjectV2Response
import eZmaxApi.models.UsergroupGetPermissionsV1Response
import eZmaxApi.models.UsergroupGetUsergroupdelegationsV1Response
import eZmaxApi.models.UsergroupGetUsergroupmembershipsV1Response

import com.squareup.moshi.Json

import eZmaxApi.infrastructure.ApiClient
import eZmaxApi.infrastructure.ApiResponse
import eZmaxApi.infrastructure.ClientException
import eZmaxApi.infrastructure.ClientError
import eZmaxApi.infrastructure.ServerException
import eZmaxApi.infrastructure.ServerError
import eZmaxApi.infrastructure.MultiValueMap
import eZmaxApi.infrastructure.PartConfig
import eZmaxApi.infrastructure.RequestConfig
import eZmaxApi.infrastructure.RequestMethod
import eZmaxApi.infrastructure.ResponseType
import eZmaxApi.infrastructure.Success
import eZmaxApi.infrastructure.toMultiValue

class ObjectUsergroupApi(basePath: kotlin.String = defaultBasePath, client: Call.Factory = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://prod.api.appcluster01.ca-central-1.ezmax.com/rest")
        }
    }

    /**
     * Create a new Usergroup
     * The endpoint allows to create one or many elements at once.
     * @param usergroupCreateObjectV1Request 
     * @return UsergroupCreateObjectV1Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun usergroupCreateObjectV1(usergroupCreateObjectV1Request: UsergroupCreateObjectV1Request) : UsergroupCreateObjectV1Response {
        val localVarResponse = usergroupCreateObjectV1WithHttpInfo(usergroupCreateObjectV1Request = usergroupCreateObjectV1Request)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as UsergroupCreateObjectV1Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Create a new Usergroup
     * The endpoint allows to create one or many elements at once.
     * @param usergroupCreateObjectV1Request 
     * @return ApiResponse<UsergroupCreateObjectV1Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun usergroupCreateObjectV1WithHttpInfo(usergroupCreateObjectV1Request: UsergroupCreateObjectV1Request) : ApiResponse<UsergroupCreateObjectV1Response?> {
        val localVariableConfig = usergroupCreateObjectV1RequestConfig(usergroupCreateObjectV1Request = usergroupCreateObjectV1Request)

        return request<UsergroupCreateObjectV1Request, UsergroupCreateObjectV1Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation usergroupCreateObjectV1
     *
     * @param usergroupCreateObjectV1Request 
     * @return RequestConfig
     */
    fun usergroupCreateObjectV1RequestConfig(usergroupCreateObjectV1Request: UsergroupCreateObjectV1Request) : RequestConfig<UsergroupCreateObjectV1Request> {
        val localVariableBody = usergroupCreateObjectV1Request
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/1/object/usergroup",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Edit an existing Usergroup
     * 
     * @param pkiUsergroupID 
     * @param usergroupEditObjectV1Request 
     * @return UsergroupEditObjectV1Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun usergroupEditObjectV1(pkiUsergroupID: kotlin.Int, usergroupEditObjectV1Request: UsergroupEditObjectV1Request) : UsergroupEditObjectV1Response {
        val localVarResponse = usergroupEditObjectV1WithHttpInfo(pkiUsergroupID = pkiUsergroupID, usergroupEditObjectV1Request = usergroupEditObjectV1Request)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as UsergroupEditObjectV1Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Edit an existing Usergroup
     * 
     * @param pkiUsergroupID 
     * @param usergroupEditObjectV1Request 
     * @return ApiResponse<UsergroupEditObjectV1Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun usergroupEditObjectV1WithHttpInfo(pkiUsergroupID: kotlin.Int, usergroupEditObjectV1Request: UsergroupEditObjectV1Request) : ApiResponse<UsergroupEditObjectV1Response?> {
        val localVariableConfig = usergroupEditObjectV1RequestConfig(pkiUsergroupID = pkiUsergroupID, usergroupEditObjectV1Request = usergroupEditObjectV1Request)

        return request<UsergroupEditObjectV1Request, UsergroupEditObjectV1Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation usergroupEditObjectV1
     *
     * @param pkiUsergroupID 
     * @param usergroupEditObjectV1Request 
     * @return RequestConfig
     */
    fun usergroupEditObjectV1RequestConfig(pkiUsergroupID: kotlin.Int, usergroupEditObjectV1Request: UsergroupEditObjectV1Request) : RequestConfig<UsergroupEditObjectV1Request> {
        val localVariableBody = usergroupEditObjectV1Request
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/1/object/usergroup/{pkiUsergroupID}".replace("{"+"pkiUsergroupID"+"}", encodeURIComponent(pkiUsergroupID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Edit multiple Permissions
     * Using this endpoint, you can edit multiple Permissions at the same time.
     * @param pkiUsergroupID 
     * @param usergroupEditPermissionsV1Request 
     * @return UsergroupEditPermissionsV1Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun usergroupEditPermissionsV1(pkiUsergroupID: kotlin.Int, usergroupEditPermissionsV1Request: UsergroupEditPermissionsV1Request) : UsergroupEditPermissionsV1Response {
        val localVarResponse = usergroupEditPermissionsV1WithHttpInfo(pkiUsergroupID = pkiUsergroupID, usergroupEditPermissionsV1Request = usergroupEditPermissionsV1Request)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as UsergroupEditPermissionsV1Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Edit multiple Permissions
     * Using this endpoint, you can edit multiple Permissions at the same time.
     * @param pkiUsergroupID 
     * @param usergroupEditPermissionsV1Request 
     * @return ApiResponse<UsergroupEditPermissionsV1Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun usergroupEditPermissionsV1WithHttpInfo(pkiUsergroupID: kotlin.Int, usergroupEditPermissionsV1Request: UsergroupEditPermissionsV1Request) : ApiResponse<UsergroupEditPermissionsV1Response?> {
        val localVariableConfig = usergroupEditPermissionsV1RequestConfig(pkiUsergroupID = pkiUsergroupID, usergroupEditPermissionsV1Request = usergroupEditPermissionsV1Request)

        return request<UsergroupEditPermissionsV1Request, UsergroupEditPermissionsV1Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation usergroupEditPermissionsV1
     *
     * @param pkiUsergroupID 
     * @param usergroupEditPermissionsV1Request 
     * @return RequestConfig
     */
    fun usergroupEditPermissionsV1RequestConfig(pkiUsergroupID: kotlin.Int, usergroupEditPermissionsV1Request: UsergroupEditPermissionsV1Request) : RequestConfig<UsergroupEditPermissionsV1Request> {
        val localVariableBody = usergroupEditPermissionsV1Request
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/1/object/usergroup/{pkiUsergroupID}/editPermissions".replace("{"+"pkiUsergroupID"+"}", encodeURIComponent(pkiUsergroupID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Edit multiple Usergroupdelegations
     * Edit multiple Usergroupdelegations
     * @param pkiUsergroupID 
     * @param usergroupEditUsergroupdelegationsV1Request 
     * @return UsergroupEditUsergroupdelegationsV1Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun usergroupEditUsergroupdelegationsV1(pkiUsergroupID: kotlin.Int, usergroupEditUsergroupdelegationsV1Request: UsergroupEditUsergroupdelegationsV1Request) : UsergroupEditUsergroupdelegationsV1Response {
        val localVarResponse = usergroupEditUsergroupdelegationsV1WithHttpInfo(pkiUsergroupID = pkiUsergroupID, usergroupEditUsergroupdelegationsV1Request = usergroupEditUsergroupdelegationsV1Request)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as UsergroupEditUsergroupdelegationsV1Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Edit multiple Usergroupdelegations
     * Edit multiple Usergroupdelegations
     * @param pkiUsergroupID 
     * @param usergroupEditUsergroupdelegationsV1Request 
     * @return ApiResponse<UsergroupEditUsergroupdelegationsV1Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun usergroupEditUsergroupdelegationsV1WithHttpInfo(pkiUsergroupID: kotlin.Int, usergroupEditUsergroupdelegationsV1Request: UsergroupEditUsergroupdelegationsV1Request) : ApiResponse<UsergroupEditUsergroupdelegationsV1Response?> {
        val localVariableConfig = usergroupEditUsergroupdelegationsV1RequestConfig(pkiUsergroupID = pkiUsergroupID, usergroupEditUsergroupdelegationsV1Request = usergroupEditUsergroupdelegationsV1Request)

        return request<UsergroupEditUsergroupdelegationsV1Request, UsergroupEditUsergroupdelegationsV1Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation usergroupEditUsergroupdelegationsV1
     *
     * @param pkiUsergroupID 
     * @param usergroupEditUsergroupdelegationsV1Request 
     * @return RequestConfig
     */
    fun usergroupEditUsergroupdelegationsV1RequestConfig(pkiUsergroupID: kotlin.Int, usergroupEditUsergroupdelegationsV1Request: UsergroupEditUsergroupdelegationsV1Request) : RequestConfig<UsergroupEditUsergroupdelegationsV1Request> {
        val localVariableBody = usergroupEditUsergroupdelegationsV1Request
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/1/object/usergroup/{pkiUsergroupID}/editUsergroupdelegations".replace("{"+"pkiUsergroupID"+"}", encodeURIComponent(pkiUsergroupID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Edit multiple Usergroupmemberships
     * Using this endpoint, you can edit multiple Usergroupmemberships at the same time.
     * @param pkiUsergroupID 
     * @param usergroupEditUsergroupmembershipsV1Request 
     * @return UsergroupEditUsergroupmembershipsV1Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun usergroupEditUsergroupmembershipsV1(pkiUsergroupID: kotlin.Int, usergroupEditUsergroupmembershipsV1Request: UsergroupEditUsergroupmembershipsV1Request) : UsergroupEditUsergroupmembershipsV1Response {
        val localVarResponse = usergroupEditUsergroupmembershipsV1WithHttpInfo(pkiUsergroupID = pkiUsergroupID, usergroupEditUsergroupmembershipsV1Request = usergroupEditUsergroupmembershipsV1Request)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as UsergroupEditUsergroupmembershipsV1Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Edit multiple Usergroupmemberships
     * Using this endpoint, you can edit multiple Usergroupmemberships at the same time.
     * @param pkiUsergroupID 
     * @param usergroupEditUsergroupmembershipsV1Request 
     * @return ApiResponse<UsergroupEditUsergroupmembershipsV1Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun usergroupEditUsergroupmembershipsV1WithHttpInfo(pkiUsergroupID: kotlin.Int, usergroupEditUsergroupmembershipsV1Request: UsergroupEditUsergroupmembershipsV1Request) : ApiResponse<UsergroupEditUsergroupmembershipsV1Response?> {
        val localVariableConfig = usergroupEditUsergroupmembershipsV1RequestConfig(pkiUsergroupID = pkiUsergroupID, usergroupEditUsergroupmembershipsV1Request = usergroupEditUsergroupmembershipsV1Request)

        return request<UsergroupEditUsergroupmembershipsV1Request, UsergroupEditUsergroupmembershipsV1Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation usergroupEditUsergroupmembershipsV1
     *
     * @param pkiUsergroupID 
     * @param usergroupEditUsergroupmembershipsV1Request 
     * @return RequestConfig
     */
    fun usergroupEditUsergroupmembershipsV1RequestConfig(pkiUsergroupID: kotlin.Int, usergroupEditUsergroupmembershipsV1Request: UsergroupEditUsergroupmembershipsV1Request) : RequestConfig<UsergroupEditUsergroupmembershipsV1Request> {
        val localVariableBody = usergroupEditUsergroupmembershipsV1Request
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/1/object/usergroup/{pkiUsergroupID}/editUsergroupmemberships".replace("{"+"pkiUsergroupID"+"}", encodeURIComponent(pkiUsergroupID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter sSelector
     */
     enum class SSelectorUsergroupGetAutocompleteV2(val value: kotlin.String) {
         @Json(name = "All") All("All"),
         @Json(name = "AllButEveryone") AllButEveryone("AllButEveryone");

        /**
         * Override [toString()] to avoid using the enum variable name as the value, and instead use
         * the actual value defined in the API spec file.
         *
         * This solves a problem when the variable name and its value are different, and ensures that
         * the client sends the correct enum values to the server always.
         */
        override fun toString(): kotlin.String = "$value"
     }

    /**
     * enum for parameter eFilterActive
     */
     enum class EFilterActiveUsergroupGetAutocompleteV2(val value: kotlin.String) {
         @Json(name = "All") All("All"),
         @Json(name = "Active") Active("Active"),
         @Json(name = "Inactive") Inactive("Inactive");

        /**
         * Override [toString()] to avoid using the enum variable name as the value, and instead use
         * the actual value defined in the API spec file.
         *
         * This solves a problem when the variable name and its value are different, and ensures that
         * the client sends the correct enum values to the server always.
         */
        override fun toString(): kotlin.String = "$value"
     }

    /**
     * Retrieve Usergroups and IDs
     * Get the list of Usergroup to be used in a dropdown or autocomplete control.
     * @param sSelector The type of Usergroups to return
     * @param eFilterActive Specify which results we want to display. (optional, default to Active)
     * @param sQuery Allow to filter the returned results (optional)
     * @param acceptLanguage  (optional)
     * @return UsergroupGetAutocompleteV2Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun usergroupGetAutocompleteV2(sSelector: SSelectorUsergroupGetAutocompleteV2, eFilterActive: EFilterActiveUsergroupGetAutocompleteV2? = EFilterActiveUsergroupGetAutocompleteV2.Active, sQuery: kotlin.String? = null, acceptLanguage: HeaderAcceptLanguage? = null) : UsergroupGetAutocompleteV2Response {
        val localVarResponse = usergroupGetAutocompleteV2WithHttpInfo(sSelector = sSelector, eFilterActive = eFilterActive, sQuery = sQuery, acceptLanguage = acceptLanguage)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as UsergroupGetAutocompleteV2Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieve Usergroups and IDs
     * Get the list of Usergroup to be used in a dropdown or autocomplete control.
     * @param sSelector The type of Usergroups to return
     * @param eFilterActive Specify which results we want to display. (optional, default to Active)
     * @param sQuery Allow to filter the returned results (optional)
     * @param acceptLanguage  (optional)
     * @return ApiResponse<UsergroupGetAutocompleteV2Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun usergroupGetAutocompleteV2WithHttpInfo(sSelector: SSelectorUsergroupGetAutocompleteV2, eFilterActive: EFilterActiveUsergroupGetAutocompleteV2?, sQuery: kotlin.String?, acceptLanguage: HeaderAcceptLanguage?) : ApiResponse<UsergroupGetAutocompleteV2Response?> {
        val localVariableConfig = usergroupGetAutocompleteV2RequestConfig(sSelector = sSelector, eFilterActive = eFilterActive, sQuery = sQuery, acceptLanguage = acceptLanguage)

        return request<Unit, UsergroupGetAutocompleteV2Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation usergroupGetAutocompleteV2
     *
     * @param sSelector The type of Usergroups to return
     * @param eFilterActive Specify which results we want to display. (optional, default to Active)
     * @param sQuery Allow to filter the returned results (optional)
     * @param acceptLanguage  (optional)
     * @return RequestConfig
     */
    fun usergroupGetAutocompleteV2RequestConfig(sSelector: SSelectorUsergroupGetAutocompleteV2, eFilterActive: EFilterActiveUsergroupGetAutocompleteV2?, sQuery: kotlin.String?, acceptLanguage: HeaderAcceptLanguage?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (eFilterActive != null) {
                    put("eFilterActive", listOf(eFilterActive.value))
                }
                if (sQuery != null) {
                    put("sQuery", listOf(sQuery.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/2/object/usergroup/getAutocomplete/{sSelector}".replace("{"+"sSelector"+"}", encodeURIComponent(sSelector.value.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter eOrderBy
     */
     enum class EOrderByUsergroupGetListV1(val value: kotlin.String) {
         @Json(name = "pkiUsergroupID_ASC") pkiUsergroupID_ASC("pkiUsergroupID_ASC"),
         @Json(name = "pkiUsergroupID_DESC") pkiUsergroupID_DESC("pkiUsergroupID_DESC"),
         @Json(name = "sUsergroupNameX_ASC") sUsergroupNameX_ASC("sUsergroupNameX_ASC"),
         @Json(name = "sUsergroupNameX_DESC") sUsergroupNameX_DESC("sUsergroupNameX_DESC"),
         @Json(name = "iCountUser_ASC") iCountUser_ASC("iCountUser_ASC"),
         @Json(name = "iCountUser_DESC") iCountUser_DESC("iCountUser_DESC");

        /**
         * Override [toString()] to avoid using the enum variable name as the value, and instead use
         * the actual value defined in the API spec file.
         *
         * This solves a problem when the variable name and its value are different, and ensures that
         * the client sends the correct enum values to the server always.
         */
        override fun toString(): kotlin.String = "$value"
     }

    /**
     * Retrieve Usergroup list
     * 
     * @param eOrderBy Specify how you want the results to be sorted (optional)
     * @param iRowMax  (optional)
     * @param iRowOffset  (optional, default to 0)
     * @param acceptLanguage  (optional)
     * @param sFilter  (optional)
     * @return UsergroupGetListV1Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun usergroupGetListV1(eOrderBy: EOrderByUsergroupGetListV1? = null, iRowMax: kotlin.Int? = null, iRowOffset: kotlin.Int? = 0, acceptLanguage: HeaderAcceptLanguage? = null, sFilter: kotlin.String? = null) : UsergroupGetListV1Response {
        val localVarResponse = usergroupGetListV1WithHttpInfo(eOrderBy = eOrderBy, iRowMax = iRowMax, iRowOffset = iRowOffset, acceptLanguage = acceptLanguage, sFilter = sFilter)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as UsergroupGetListV1Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieve Usergroup list
     * 
     * @param eOrderBy Specify how you want the results to be sorted (optional)
     * @param iRowMax  (optional)
     * @param iRowOffset  (optional, default to 0)
     * @param acceptLanguage  (optional)
     * @param sFilter  (optional)
     * @return ApiResponse<UsergroupGetListV1Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun usergroupGetListV1WithHttpInfo(eOrderBy: EOrderByUsergroupGetListV1?, iRowMax: kotlin.Int?, iRowOffset: kotlin.Int?, acceptLanguage: HeaderAcceptLanguage?, sFilter: kotlin.String?) : ApiResponse<UsergroupGetListV1Response?> {
        val localVariableConfig = usergroupGetListV1RequestConfig(eOrderBy = eOrderBy, iRowMax = iRowMax, iRowOffset = iRowOffset, acceptLanguage = acceptLanguage, sFilter = sFilter)

        return request<Unit, UsergroupGetListV1Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation usergroupGetListV1
     *
     * @param eOrderBy Specify how you want the results to be sorted (optional)
     * @param iRowMax  (optional)
     * @param iRowOffset  (optional, default to 0)
     * @param acceptLanguage  (optional)
     * @param sFilter  (optional)
     * @return RequestConfig
     */
    fun usergroupGetListV1RequestConfig(eOrderBy: EOrderByUsergroupGetListV1?, iRowMax: kotlin.Int?, iRowOffset: kotlin.Int?, acceptLanguage: HeaderAcceptLanguage?, sFilter: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (eOrderBy != null) {
                    put("eOrderBy", listOf(eOrderBy.value))
                }
                if (iRowMax != null) {
                    put("iRowMax", listOf(iRowMax.toString()))
                }
                if (iRowOffset != null) {
                    put("iRowOffset", listOf(iRowOffset.toString()))
                }
                if (sFilter != null) {
                    put("sFilter", listOf(sFilter.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/1/object/usergroup/getList",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Retrieve an existing Usergroup
     * 
     * @param pkiUsergroupID 
     * @return UsergroupGetObjectV2Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun usergroupGetObjectV2(pkiUsergroupID: kotlin.Int) : UsergroupGetObjectV2Response {
        val localVarResponse = usergroupGetObjectV2WithHttpInfo(pkiUsergroupID = pkiUsergroupID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as UsergroupGetObjectV2Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieve an existing Usergroup
     * 
     * @param pkiUsergroupID 
     * @return ApiResponse<UsergroupGetObjectV2Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun usergroupGetObjectV2WithHttpInfo(pkiUsergroupID: kotlin.Int) : ApiResponse<UsergroupGetObjectV2Response?> {
        val localVariableConfig = usergroupGetObjectV2RequestConfig(pkiUsergroupID = pkiUsergroupID)

        return request<Unit, UsergroupGetObjectV2Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation usergroupGetObjectV2
     *
     * @param pkiUsergroupID 
     * @return RequestConfig
     */
    fun usergroupGetObjectV2RequestConfig(pkiUsergroupID: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/2/object/usergroup/{pkiUsergroupID}".replace("{"+"pkiUsergroupID"+"}", encodeURIComponent(pkiUsergroupID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Retrieve an existing Usergroup&#39;s Permissions
     * 
     * @param pkiUsergroupID 
     * @return UsergroupGetPermissionsV1Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun usergroupGetPermissionsV1(pkiUsergroupID: kotlin.Int) : UsergroupGetPermissionsV1Response {
        val localVarResponse = usergroupGetPermissionsV1WithHttpInfo(pkiUsergroupID = pkiUsergroupID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as UsergroupGetPermissionsV1Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieve an existing Usergroup&#39;s Permissions
     * 
     * @param pkiUsergroupID 
     * @return ApiResponse<UsergroupGetPermissionsV1Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun usergroupGetPermissionsV1WithHttpInfo(pkiUsergroupID: kotlin.Int) : ApiResponse<UsergroupGetPermissionsV1Response?> {
        val localVariableConfig = usergroupGetPermissionsV1RequestConfig(pkiUsergroupID = pkiUsergroupID)

        return request<Unit, UsergroupGetPermissionsV1Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation usergroupGetPermissionsV1
     *
     * @param pkiUsergroupID 
     * @return RequestConfig
     */
    fun usergroupGetPermissionsV1RequestConfig(pkiUsergroupID: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/1/object/usergroup/{pkiUsergroupID}/getPermissions".replace("{"+"pkiUsergroupID"+"}", encodeURIComponent(pkiUsergroupID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Retrieve an existing Usergroup&#39;s Usergroupdelegations
     * 
     * @param pkiUsergroupID 
     * @return UsergroupGetUsergroupdelegationsV1Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun usergroupGetUsergroupdelegationsV1(pkiUsergroupID: kotlin.Int) : UsergroupGetUsergroupdelegationsV1Response {
        val localVarResponse = usergroupGetUsergroupdelegationsV1WithHttpInfo(pkiUsergroupID = pkiUsergroupID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as UsergroupGetUsergroupdelegationsV1Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieve an existing Usergroup&#39;s Usergroupdelegations
     * 
     * @param pkiUsergroupID 
     * @return ApiResponse<UsergroupGetUsergroupdelegationsV1Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun usergroupGetUsergroupdelegationsV1WithHttpInfo(pkiUsergroupID: kotlin.Int) : ApiResponse<UsergroupGetUsergroupdelegationsV1Response?> {
        val localVariableConfig = usergroupGetUsergroupdelegationsV1RequestConfig(pkiUsergroupID = pkiUsergroupID)

        return request<Unit, UsergroupGetUsergroupdelegationsV1Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation usergroupGetUsergroupdelegationsV1
     *
     * @param pkiUsergroupID 
     * @return RequestConfig
     */
    fun usergroupGetUsergroupdelegationsV1RequestConfig(pkiUsergroupID: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/1/object/usergroup/{pkiUsergroupID}/getUsergroupdelegations".replace("{"+"pkiUsergroupID"+"}", encodeURIComponent(pkiUsergroupID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Retrieve an existing Usergroup&#39;s Usergroupmemberships
     * 
     * @param pkiUsergroupID 
     * @return UsergroupGetUsergroupmembershipsV1Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun usergroupGetUsergroupmembershipsV1(pkiUsergroupID: kotlin.Int) : UsergroupGetUsergroupmembershipsV1Response {
        val localVarResponse = usergroupGetUsergroupmembershipsV1WithHttpInfo(pkiUsergroupID = pkiUsergroupID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as UsergroupGetUsergroupmembershipsV1Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieve an existing Usergroup&#39;s Usergroupmemberships
     * 
     * @param pkiUsergroupID 
     * @return ApiResponse<UsergroupGetUsergroupmembershipsV1Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun usergroupGetUsergroupmembershipsV1WithHttpInfo(pkiUsergroupID: kotlin.Int) : ApiResponse<UsergroupGetUsergroupmembershipsV1Response?> {
        val localVariableConfig = usergroupGetUsergroupmembershipsV1RequestConfig(pkiUsergroupID = pkiUsergroupID)

        return request<Unit, UsergroupGetUsergroupmembershipsV1Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation usergroupGetUsergroupmembershipsV1
     *
     * @param pkiUsergroupID 
     * @return RequestConfig
     */
    fun usergroupGetUsergroupmembershipsV1RequestConfig(pkiUsergroupID: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/1/object/usergroup/{pkiUsergroupID}/getUsergroupmemberships".replace("{"+"pkiUsergroupID"+"}", encodeURIComponent(pkiUsergroupID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
