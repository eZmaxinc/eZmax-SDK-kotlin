/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package eZmaxApi.apis

import java.io.IOException
import okhttp3.Call
import okhttp3.HttpUrl

import eZmaxApi.models.CommonResponseError
import eZmaxApi.models.EzsigntemplatepublicCreateEzsignfolderV1Request
import eZmaxApi.models.EzsigntemplatepublicCreateEzsignfolderV1Response
import eZmaxApi.models.EzsigntemplatepublicCreateObjectV1Request
import eZmaxApi.models.EzsigntemplatepublicCreateObjectV1Response
import eZmaxApi.models.EzsigntemplatepublicEditObjectV1Request
import eZmaxApi.models.EzsigntemplatepublicEditObjectV1Response
import eZmaxApi.models.EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request
import eZmaxApi.models.EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1Response
import eZmaxApi.models.EzsigntemplatepublicGetFormsDataV1Response
import eZmaxApi.models.EzsigntemplatepublicGetListV1Response
import eZmaxApi.models.EzsigntemplatepublicGetObjectV2Response
import eZmaxApi.models.EzsigntemplatepublicResetLimitExceededCounterV1Response
import eZmaxApi.models.EzsigntemplatepublicResetUrlV1Response
import eZmaxApi.models.HeaderAcceptLanguage

import com.squareup.moshi.Json

import eZmaxApi.infrastructure.ApiClient
import eZmaxApi.infrastructure.ApiResponse
import eZmaxApi.infrastructure.ClientException
import eZmaxApi.infrastructure.ClientError
import eZmaxApi.infrastructure.ServerException
import eZmaxApi.infrastructure.ServerError
import eZmaxApi.infrastructure.MultiValueMap
import eZmaxApi.infrastructure.PartConfig
import eZmaxApi.infrastructure.RequestConfig
import eZmaxApi.infrastructure.RequestMethod
import eZmaxApi.infrastructure.ResponseType
import eZmaxApi.infrastructure.Success
import eZmaxApi.infrastructure.toMultiValue

class ObjectEzsigntemplatepublicApi(basePath: kotlin.String = defaultBasePath, client: Call.Factory = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://prod.api.appcluster01.ca-central-1.ezmax.com/rest")
        }
    }

    /**
     * Create an Ezsignfolder
     * Create an Ezsignfolder
     * @param ezsigntemplatepublicCreateEzsignfolderV1Request 
     * @return EzsigntemplatepublicCreateEzsignfolderV1Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun ezsigntemplatepublicCreateEzsignfolderV1(ezsigntemplatepublicCreateEzsignfolderV1Request: EzsigntemplatepublicCreateEzsignfolderV1Request) : EzsigntemplatepublicCreateEzsignfolderV1Response {
        val localVarResponse = ezsigntemplatepublicCreateEzsignfolderV1WithHttpInfo(ezsigntemplatepublicCreateEzsignfolderV1Request = ezsigntemplatepublicCreateEzsignfolderV1Request)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as EzsigntemplatepublicCreateEzsignfolderV1Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Create an Ezsignfolder
     * Create an Ezsignfolder
     * @param ezsigntemplatepublicCreateEzsignfolderV1Request 
     * @return ApiResponse<EzsigntemplatepublicCreateEzsignfolderV1Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun ezsigntemplatepublicCreateEzsignfolderV1WithHttpInfo(ezsigntemplatepublicCreateEzsignfolderV1Request: EzsigntemplatepublicCreateEzsignfolderV1Request) : ApiResponse<EzsigntemplatepublicCreateEzsignfolderV1Response?> {
        val localVariableConfig = ezsigntemplatepublicCreateEzsignfolderV1RequestConfig(ezsigntemplatepublicCreateEzsignfolderV1Request = ezsigntemplatepublicCreateEzsignfolderV1Request)

        return request<EzsigntemplatepublicCreateEzsignfolderV1Request, EzsigntemplatepublicCreateEzsignfolderV1Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation ezsigntemplatepublicCreateEzsignfolderV1
     *
     * @param ezsigntemplatepublicCreateEzsignfolderV1Request 
     * @return RequestConfig
     */
    fun ezsigntemplatepublicCreateEzsignfolderV1RequestConfig(ezsigntemplatepublicCreateEzsignfolderV1Request: EzsigntemplatepublicCreateEzsignfolderV1Request) : RequestConfig<EzsigntemplatepublicCreateEzsignfolderV1Request> {
        val localVariableBody = ezsigntemplatepublicCreateEzsignfolderV1Request
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/1/object/ezsigntemplatepublic/createEzsignfolder",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Create a new Ezsigntemplatepublic
     * The endpoint allows to create one or many elements at once.
     * @param ezsigntemplatepublicCreateObjectV1Request 
     * @return EzsigntemplatepublicCreateObjectV1Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun ezsigntemplatepublicCreateObjectV1(ezsigntemplatepublicCreateObjectV1Request: EzsigntemplatepublicCreateObjectV1Request) : EzsigntemplatepublicCreateObjectV1Response {
        val localVarResponse = ezsigntemplatepublicCreateObjectV1WithHttpInfo(ezsigntemplatepublicCreateObjectV1Request = ezsigntemplatepublicCreateObjectV1Request)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as EzsigntemplatepublicCreateObjectV1Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Create a new Ezsigntemplatepublic
     * The endpoint allows to create one or many elements at once.
     * @param ezsigntemplatepublicCreateObjectV1Request 
     * @return ApiResponse<EzsigntemplatepublicCreateObjectV1Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun ezsigntemplatepublicCreateObjectV1WithHttpInfo(ezsigntemplatepublicCreateObjectV1Request: EzsigntemplatepublicCreateObjectV1Request) : ApiResponse<EzsigntemplatepublicCreateObjectV1Response?> {
        val localVariableConfig = ezsigntemplatepublicCreateObjectV1RequestConfig(ezsigntemplatepublicCreateObjectV1Request = ezsigntemplatepublicCreateObjectV1Request)

        return request<EzsigntemplatepublicCreateObjectV1Request, EzsigntemplatepublicCreateObjectV1Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation ezsigntemplatepublicCreateObjectV1
     *
     * @param ezsigntemplatepublicCreateObjectV1Request 
     * @return RequestConfig
     */
    fun ezsigntemplatepublicCreateObjectV1RequestConfig(ezsigntemplatepublicCreateObjectV1Request: EzsigntemplatepublicCreateObjectV1Request) : RequestConfig<EzsigntemplatepublicCreateObjectV1Request> {
        val localVariableBody = ezsigntemplatepublicCreateObjectV1Request
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/1/object/ezsigntemplatepublic",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Edit an existing Ezsigntemplatepublic
     * 
     * @param pkiEzsigntemplatepublicID The unique ID of the Ezsigntemplatepublic
     * @param ezsigntemplatepublicEditObjectV1Request 
     * @return EzsigntemplatepublicEditObjectV1Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun ezsigntemplatepublicEditObjectV1(pkiEzsigntemplatepublicID: kotlin.Int, ezsigntemplatepublicEditObjectV1Request: EzsigntemplatepublicEditObjectV1Request) : EzsigntemplatepublicEditObjectV1Response {
        val localVarResponse = ezsigntemplatepublicEditObjectV1WithHttpInfo(pkiEzsigntemplatepublicID = pkiEzsigntemplatepublicID, ezsigntemplatepublicEditObjectV1Request = ezsigntemplatepublicEditObjectV1Request)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as EzsigntemplatepublicEditObjectV1Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Edit an existing Ezsigntemplatepublic
     * 
     * @param pkiEzsigntemplatepublicID The unique ID of the Ezsigntemplatepublic
     * @param ezsigntemplatepublicEditObjectV1Request 
     * @return ApiResponse<EzsigntemplatepublicEditObjectV1Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun ezsigntemplatepublicEditObjectV1WithHttpInfo(pkiEzsigntemplatepublicID: kotlin.Int, ezsigntemplatepublicEditObjectV1Request: EzsigntemplatepublicEditObjectV1Request) : ApiResponse<EzsigntemplatepublicEditObjectV1Response?> {
        val localVariableConfig = ezsigntemplatepublicEditObjectV1RequestConfig(pkiEzsigntemplatepublicID = pkiEzsigntemplatepublicID, ezsigntemplatepublicEditObjectV1Request = ezsigntemplatepublicEditObjectV1Request)

        return request<EzsigntemplatepublicEditObjectV1Request, EzsigntemplatepublicEditObjectV1Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation ezsigntemplatepublicEditObjectV1
     *
     * @param pkiEzsigntemplatepublicID The unique ID of the Ezsigntemplatepublic
     * @param ezsigntemplatepublicEditObjectV1Request 
     * @return RequestConfig
     */
    fun ezsigntemplatepublicEditObjectV1RequestConfig(pkiEzsigntemplatepublicID: kotlin.Int, ezsigntemplatepublicEditObjectV1Request: EzsigntemplatepublicEditObjectV1Request) : RequestConfig<EzsigntemplatepublicEditObjectV1Request> {
        val localVariableBody = ezsigntemplatepublicEditObjectV1Request
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/1/object/ezsigntemplatepublic/{pkiEzsigntemplatepublicID}".replace("{"+"pkiEzsigntemplatepublicID"+"}", encodeURIComponent(pkiEzsigntemplatepublicID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Retrieve the Ezsigntemplatepublic details
     * Retrieve the Ezsigntemplatepublic details
     * @param ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request 
     * @return EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1(ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request: EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request) : EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1Response {
        val localVarResponse = ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1WithHttpInfo(ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request = ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieve the Ezsigntemplatepublic details
     * Retrieve the Ezsigntemplatepublic details
     * @param ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request 
     * @return ApiResponse<EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1WithHttpInfo(ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request: EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request) : ApiResponse<EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1Response?> {
        val localVariableConfig = ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1RequestConfig(ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request = ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request)

        return request<EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request, EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1
     *
     * @param ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request 
     * @return RequestConfig
     */
    fun ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1RequestConfig(ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request: EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request) : RequestConfig<EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request> {
        val localVariableBody = ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/1/object/ezsigntemplatepublic/getEzsigntemplatepublicDetails",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Retrieve an existing Ezsigntemplatepublic&#39;s forms data
     * 
     * @param pkiEzsigntemplatepublicID 
     * @return EzsigntemplatepublicGetFormsDataV1Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun ezsigntemplatepublicGetFormsDataV1(pkiEzsigntemplatepublicID: kotlin.Int) : EzsigntemplatepublicGetFormsDataV1Response {
        val localVarResponse = ezsigntemplatepublicGetFormsDataV1WithHttpInfo(pkiEzsigntemplatepublicID = pkiEzsigntemplatepublicID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as EzsigntemplatepublicGetFormsDataV1Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieve an existing Ezsigntemplatepublic&#39;s forms data
     * 
     * @param pkiEzsigntemplatepublicID 
     * @return ApiResponse<EzsigntemplatepublicGetFormsDataV1Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun ezsigntemplatepublicGetFormsDataV1WithHttpInfo(pkiEzsigntemplatepublicID: kotlin.Int) : ApiResponse<EzsigntemplatepublicGetFormsDataV1Response?> {
        val localVariableConfig = ezsigntemplatepublicGetFormsDataV1RequestConfig(pkiEzsigntemplatepublicID = pkiEzsigntemplatepublicID)

        return request<Unit, EzsigntemplatepublicGetFormsDataV1Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation ezsigntemplatepublicGetFormsDataV1
     *
     * @param pkiEzsigntemplatepublicID 
     * @return RequestConfig
     */
    fun ezsigntemplatepublicGetFormsDataV1RequestConfig(pkiEzsigntemplatepublicID: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/1/object/ezsigntemplatepublic/{pkiEzsigntemplatepublicID}/getFormsData".replace("{"+"pkiEzsigntemplatepublicID"+"}", encodeURIComponent(pkiEzsigntemplatepublicID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter eOrderBy
     */
     enum class EOrderByEzsigntemplatepublicGetListV1(val value: kotlin.String) {
         @Json(name = "pkiEzsigntemplatepublicID_ASC") pkiEzsigntemplatepublicID_ASC("pkiEzsigntemplatepublicID_ASC"),
         @Json(name = "pkiEzsigntemplatepublicID_DESC") pkiEzsigntemplatepublicID_DESC("pkiEzsigntemplatepublicID_DESC"),
         @Json(name = "fkiEzsignfoldertypeID_ASC") fkiEzsignfoldertypeID_ASC("fkiEzsignfoldertypeID_ASC"),
         @Json(name = "fkiEzsignfoldertypeID_DESC") fkiEzsignfoldertypeID_DESC("fkiEzsignfoldertypeID_DESC"),
         @Json(name = "sEzsignfoldertypeNameX_ASC") sEzsignfoldertypeNameX_ASC("sEzsignfoldertypeNameX_ASC"),
         @Json(name = "sEzsignfoldertypeNameX_DESC") sEzsignfoldertypeNameX_DESC("sEzsignfoldertypeNameX_DESC"),
         @Json(name = "fkiUserlogintypeID_ASC") fkiUserlogintypeID_ASC("fkiUserlogintypeID_ASC"),
         @Json(name = "fkiUserlogintypeID_DESC") fkiUserlogintypeID_DESC("fkiUserlogintypeID_DESC"),
         @Json(name = "fkiEzsigntemplateID_ASC") fkiEzsigntemplateID_ASC("fkiEzsigntemplateID_ASC"),
         @Json(name = "fkiEzsigntemplateID_DESC") fkiEzsigntemplateID_DESC("fkiEzsigntemplateID_DESC"),
         @Json(name = "fkiEzsigntemplatepackageID_ASC") fkiEzsigntemplatepackageID_ASC("fkiEzsigntemplatepackageID_ASC"),
         @Json(name = "fkiEzsigntemplatepackageID_DESC") fkiEzsigntemplatepackageID_DESC("fkiEzsigntemplatepackageID_DESC"),
         @Json(name = "sEzsigntemplatepublicDescription_ASC") sEzsigntemplatepublicDescription_ASC("sEzsigntemplatepublicDescription_ASC"),
         @Json(name = "sEzsigntemplatepublicDescription_DESC") sEzsigntemplatepublicDescription_DESC("sEzsigntemplatepublicDescription_DESC"),
         @Json(name = "bEzsigntemplatepublicIsactive_ASC") bEzsigntemplatepublicIsactive_ASC("bEzsigntemplatepublicIsactive_ASC"),
         @Json(name = "bEzsigntemplatepublicIsactive_DESC") bEzsigntemplatepublicIsactive_DESC("bEzsigntemplatepublicIsactive_DESC"),
         @Json(name = "tEzsigntemplatepublicNote_ASC") tEzsigntemplatepublicNote_ASC("tEzsigntemplatepublicNote_ASC"),
         @Json(name = "tEzsigntemplatepublicNote_DESC") tEzsigntemplatepublicNote_DESC("tEzsigntemplatepublicNote_DESC"),
         @Json(name = "eEzsigntemplatepublicLimittype_ASC") eEzsigntemplatepublicLimittype_ASC("eEzsigntemplatepublicLimittype_ASC"),
         @Json(name = "eEzsigntemplatepublicLimittype_DESC") eEzsigntemplatepublicLimittype_DESC("eEzsigntemplatepublicLimittype_DESC"),
         @Json(name = "iEzsigntemplatepublicLimit_ASC") iEzsigntemplatepublicLimit_ASC("iEzsigntemplatepublicLimit_ASC"),
         @Json(name = "iEzsigntemplatepublicLimit_DESC") iEzsigntemplatepublicLimit_DESC("iEzsigntemplatepublicLimit_DESC"),
         @Json(name = "iEzsigntemplatepublicLimitexceeded_ASC") iEzsigntemplatepublicLimitexceeded_ASC("iEzsigntemplatepublicLimitexceeded_ASC"),
         @Json(name = "iEzsigntemplatepublicLimitexceeded_DESC") iEzsigntemplatepublicLimitexceeded_DESC("iEzsigntemplatepublicLimitexceeded_DESC"),
         @Json(name = "dtEzsigntemplatepublicLimitexceededsince_ASC") dtEzsigntemplatepublicLimitexceededsince_ASC("dtEzsigntemplatepublicLimitexceededsince_ASC"),
         @Json(name = "dtEzsigntemplatepublicLimitexceededsince_DESC") dtEzsigntemplatepublicLimitexceededsince_DESC("dtEzsigntemplatepublicLimitexceededsince_DESC"),
         @Json(name = "iEzsignfolder_ASC") iEzsignfolder_ASC("iEzsignfolder_ASC"),
         @Json(name = "iEzsignfolder_DESC") iEzsignfolder_DESC("iEzsignfolder_DESC"),
         @Json(name = "iEzsigndocument_ASC") iEzsigndocument_ASC("iEzsigndocument_ASC"),
         @Json(name = "iEzsigndocument_DESC") iEzsigndocument_DESC("iEzsigndocument_DESC"),
         @Json(name = "sEzsigntemplatepublicEzsigntemplatedescription_ASC") sEzsigntemplatepublicEzsigntemplatedescription_ASC("sEzsigntemplatepublicEzsigntemplatedescription_ASC"),
         @Json(name = "sEzsigntemplatepublicEzsigntemplatedescription_DESC") sEzsigntemplatepublicEzsigntemplatedescription_DESC("sEzsigntemplatepublicEzsigntemplatedescription_DESC");

        /**
         * Override [toString()] to avoid using the enum variable name as the value, and instead use
         * the actual value defined in the API spec file.
         *
         * This solves a problem when the variable name and its value are different, and ensures that
         * the client sends the correct enum values to the server always.
         */
        override fun toString(): kotlin.String = "$value"
     }

    /**
     * Retrieve Ezsigntemplatepublic list
     * Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |---|---| | eEzsigntemplatepublicLimittype | Hour&lt;br&gt;Day&lt;br&gt;Month&lt;br&gt;Total |
     * @param eOrderBy Specify how you want the results to be sorted (optional)
     * @param iRowMax  (optional)
     * @param iRowOffset  (optional, default to 0)
     * @param acceptLanguage  (optional)
     * @param sFilter  (optional)
     * @return EzsigntemplatepublicGetListV1Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun ezsigntemplatepublicGetListV1(eOrderBy: EOrderByEzsigntemplatepublicGetListV1? = null, iRowMax: kotlin.Int? = null, iRowOffset: kotlin.Int? = 0, acceptLanguage: HeaderAcceptLanguage? = null, sFilter: kotlin.String? = null) : EzsigntemplatepublicGetListV1Response {
        val localVarResponse = ezsigntemplatepublicGetListV1WithHttpInfo(eOrderBy = eOrderBy, iRowMax = iRowMax, iRowOffset = iRowOffset, acceptLanguage = acceptLanguage, sFilter = sFilter)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as EzsigntemplatepublicGetListV1Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieve Ezsigntemplatepublic list
     * Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |---|---| | eEzsigntemplatepublicLimittype | Hour&lt;br&gt;Day&lt;br&gt;Month&lt;br&gt;Total |
     * @param eOrderBy Specify how you want the results to be sorted (optional)
     * @param iRowMax  (optional)
     * @param iRowOffset  (optional, default to 0)
     * @param acceptLanguage  (optional)
     * @param sFilter  (optional)
     * @return ApiResponse<EzsigntemplatepublicGetListV1Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun ezsigntemplatepublicGetListV1WithHttpInfo(eOrderBy: EOrderByEzsigntemplatepublicGetListV1?, iRowMax: kotlin.Int?, iRowOffset: kotlin.Int?, acceptLanguage: HeaderAcceptLanguage?, sFilter: kotlin.String?) : ApiResponse<EzsigntemplatepublicGetListV1Response?> {
        val localVariableConfig = ezsigntemplatepublicGetListV1RequestConfig(eOrderBy = eOrderBy, iRowMax = iRowMax, iRowOffset = iRowOffset, acceptLanguage = acceptLanguage, sFilter = sFilter)

        return request<Unit, EzsigntemplatepublicGetListV1Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation ezsigntemplatepublicGetListV1
     *
     * @param eOrderBy Specify how you want the results to be sorted (optional)
     * @param iRowMax  (optional)
     * @param iRowOffset  (optional, default to 0)
     * @param acceptLanguage  (optional)
     * @param sFilter  (optional)
     * @return RequestConfig
     */
    fun ezsigntemplatepublicGetListV1RequestConfig(eOrderBy: EOrderByEzsigntemplatepublicGetListV1?, iRowMax: kotlin.Int?, iRowOffset: kotlin.Int?, acceptLanguage: HeaderAcceptLanguage?, sFilter: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (eOrderBy != null) {
                    put("eOrderBy", listOf(eOrderBy.value))
                }
                if (iRowMax != null) {
                    put("iRowMax", listOf(iRowMax.toString()))
                }
                if (iRowOffset != null) {
                    put("iRowOffset", listOf(iRowOffset.toString()))
                }
                if (sFilter != null) {
                    put("sFilter", listOf(sFilter.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/1/object/ezsigntemplatepublic/getList",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Retrieve an existing Ezsigntemplatepublic
     * 
     * @param pkiEzsigntemplatepublicID The unique ID of the Ezsigntemplatepublic
     * @return EzsigntemplatepublicGetObjectV2Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun ezsigntemplatepublicGetObjectV2(pkiEzsigntemplatepublicID: kotlin.Int) : EzsigntemplatepublicGetObjectV2Response {
        val localVarResponse = ezsigntemplatepublicGetObjectV2WithHttpInfo(pkiEzsigntemplatepublicID = pkiEzsigntemplatepublicID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as EzsigntemplatepublicGetObjectV2Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieve an existing Ezsigntemplatepublic
     * 
     * @param pkiEzsigntemplatepublicID The unique ID of the Ezsigntemplatepublic
     * @return ApiResponse<EzsigntemplatepublicGetObjectV2Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun ezsigntemplatepublicGetObjectV2WithHttpInfo(pkiEzsigntemplatepublicID: kotlin.Int) : ApiResponse<EzsigntemplatepublicGetObjectV2Response?> {
        val localVariableConfig = ezsigntemplatepublicGetObjectV2RequestConfig(pkiEzsigntemplatepublicID = pkiEzsigntemplatepublicID)

        return request<Unit, EzsigntemplatepublicGetObjectV2Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation ezsigntemplatepublicGetObjectV2
     *
     * @param pkiEzsigntemplatepublicID The unique ID of the Ezsigntemplatepublic
     * @return RequestConfig
     */
    fun ezsigntemplatepublicGetObjectV2RequestConfig(pkiEzsigntemplatepublicID: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/2/object/ezsigntemplatepublic/{pkiEzsigntemplatepublicID}".replace("{"+"pkiEzsigntemplatepublicID"+"}", encodeURIComponent(pkiEzsigntemplatepublicID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Reset the limit exceeded counter
     * 
     * @param pkiEzsigntemplatepublicID 
     * @param body 
     * @return EzsigntemplatepublicResetLimitExceededCounterV1Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun ezsigntemplatepublicResetLimitExceededCounterV1(pkiEzsigntemplatepublicID: kotlin.Int, body: kotlin.Any) : EzsigntemplatepublicResetLimitExceededCounterV1Response {
        val localVarResponse = ezsigntemplatepublicResetLimitExceededCounterV1WithHttpInfo(pkiEzsigntemplatepublicID = pkiEzsigntemplatepublicID, body = body)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as EzsigntemplatepublicResetLimitExceededCounterV1Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Reset the limit exceeded counter
     * 
     * @param pkiEzsigntemplatepublicID 
     * @param body 
     * @return ApiResponse<EzsigntemplatepublicResetLimitExceededCounterV1Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun ezsigntemplatepublicResetLimitExceededCounterV1WithHttpInfo(pkiEzsigntemplatepublicID: kotlin.Int, body: kotlin.Any) : ApiResponse<EzsigntemplatepublicResetLimitExceededCounterV1Response?> {
        val localVariableConfig = ezsigntemplatepublicResetLimitExceededCounterV1RequestConfig(pkiEzsigntemplatepublicID = pkiEzsigntemplatepublicID, body = body)

        return request<kotlin.Any, EzsigntemplatepublicResetLimitExceededCounterV1Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation ezsigntemplatepublicResetLimitExceededCounterV1
     *
     * @param pkiEzsigntemplatepublicID 
     * @param body 
     * @return RequestConfig
     */
    fun ezsigntemplatepublicResetLimitExceededCounterV1RequestConfig(pkiEzsigntemplatepublicID: kotlin.Int, body: kotlin.Any) : RequestConfig<kotlin.Any> {
        val localVariableBody = body
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/1/object/ezsigntemplatepublic/{pkiEzsigntemplatepublicID}/resetLimitExceededCounter".replace("{"+"pkiEzsigntemplatepublicID"+"}", encodeURIComponent(pkiEzsigntemplatepublicID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Reset the Ezsigntemplatepublic url
     * 
     * @param pkiEzsigntemplatepublicID 
     * @param body 
     * @return EzsigntemplatepublicResetUrlV1Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun ezsigntemplatepublicResetUrlV1(pkiEzsigntemplatepublicID: kotlin.Int, body: kotlin.Any) : EzsigntemplatepublicResetUrlV1Response {
        val localVarResponse = ezsigntemplatepublicResetUrlV1WithHttpInfo(pkiEzsigntemplatepublicID = pkiEzsigntemplatepublicID, body = body)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as EzsigntemplatepublicResetUrlV1Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Reset the Ezsigntemplatepublic url
     * 
     * @param pkiEzsigntemplatepublicID 
     * @param body 
     * @return ApiResponse<EzsigntemplatepublicResetUrlV1Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun ezsigntemplatepublicResetUrlV1WithHttpInfo(pkiEzsigntemplatepublicID: kotlin.Int, body: kotlin.Any) : ApiResponse<EzsigntemplatepublicResetUrlV1Response?> {
        val localVariableConfig = ezsigntemplatepublicResetUrlV1RequestConfig(pkiEzsigntemplatepublicID = pkiEzsigntemplatepublicID, body = body)

        return request<kotlin.Any, EzsigntemplatepublicResetUrlV1Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation ezsigntemplatepublicResetUrlV1
     *
     * @param pkiEzsigntemplatepublicID 
     * @param body 
     * @return RequestConfig
     */
    fun ezsigntemplatepublicResetUrlV1RequestConfig(pkiEzsigntemplatepublicID: kotlin.Int, body: kotlin.Any) : RequestConfig<kotlin.Any> {
        val localVariableBody = body
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/1/object/ezsigntemplatepublic/{pkiEzsigntemplatepublicID}/resetUrl".replace("{"+"pkiEzsigntemplatepublicID"+"}", encodeURIComponent(pkiEzsigntemplatepublicID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
