/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package eZmaxApi.apis

import java.io.IOException
import okhttp3.Call
import okhttp3.HttpUrl

import eZmaxApi.models.CommonResponseError
import eZmaxApi.models.EzsignannotationCreateObjectV1Request
import eZmaxApi.models.EzsignannotationCreateObjectV1Response
import eZmaxApi.models.EzsignannotationDeleteObjectV1Response
import eZmaxApi.models.EzsignannotationEditObjectV1Request
import eZmaxApi.models.EzsignannotationEditObjectV1Response
import eZmaxApi.models.EzsignannotationGetObjectV2Response

import com.squareup.moshi.Json

import eZmaxApi.infrastructure.ApiClient
import eZmaxApi.infrastructure.ApiResponse
import eZmaxApi.infrastructure.ClientException
import eZmaxApi.infrastructure.ClientError
import eZmaxApi.infrastructure.ServerException
import eZmaxApi.infrastructure.ServerError
import eZmaxApi.infrastructure.MultiValueMap
import eZmaxApi.infrastructure.PartConfig
import eZmaxApi.infrastructure.RequestConfig
import eZmaxApi.infrastructure.RequestMethod
import eZmaxApi.infrastructure.ResponseType
import eZmaxApi.infrastructure.Success
import eZmaxApi.infrastructure.toMultiValue

class ObjectEzsignannotationApi(basePath: kotlin.String = defaultBasePath, client: Call.Factory = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://prod.api.appcluster01.ca-central-1.ezmax.com/rest")
        }
    }

    /**
     * Create a new Ezsignannotation
     * The endpoint allows to create one or many elements at once.
     * @param ezsignannotationCreateObjectV1Request 
     * @return EzsignannotationCreateObjectV1Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun ezsignannotationCreateObjectV1(ezsignannotationCreateObjectV1Request: EzsignannotationCreateObjectV1Request) : EzsignannotationCreateObjectV1Response {
        val localVarResponse = ezsignannotationCreateObjectV1WithHttpInfo(ezsignannotationCreateObjectV1Request = ezsignannotationCreateObjectV1Request)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as EzsignannotationCreateObjectV1Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Create a new Ezsignannotation
     * The endpoint allows to create one or many elements at once.
     * @param ezsignannotationCreateObjectV1Request 
     * @return ApiResponse<EzsignannotationCreateObjectV1Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun ezsignannotationCreateObjectV1WithHttpInfo(ezsignannotationCreateObjectV1Request: EzsignannotationCreateObjectV1Request) : ApiResponse<EzsignannotationCreateObjectV1Response?> {
        val localVariableConfig = ezsignannotationCreateObjectV1RequestConfig(ezsignannotationCreateObjectV1Request = ezsignannotationCreateObjectV1Request)

        return request<EzsignannotationCreateObjectV1Request, EzsignannotationCreateObjectV1Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation ezsignannotationCreateObjectV1
     *
     * @param ezsignannotationCreateObjectV1Request 
     * @return RequestConfig
     */
    fun ezsignannotationCreateObjectV1RequestConfig(ezsignannotationCreateObjectV1Request: EzsignannotationCreateObjectV1Request) : RequestConfig<EzsignannotationCreateObjectV1Request> {
        val localVariableBody = ezsignannotationCreateObjectV1Request
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/1/object/ezsignannotation",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Delete an existing Ezsignannotation
     * 
     * @param pkiEzsignannotationID 
     * @return EzsignannotationDeleteObjectV1Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun ezsignannotationDeleteObjectV1(pkiEzsignannotationID: kotlin.Int) : EzsignannotationDeleteObjectV1Response {
        val localVarResponse = ezsignannotationDeleteObjectV1WithHttpInfo(pkiEzsignannotationID = pkiEzsignannotationID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as EzsignannotationDeleteObjectV1Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Delete an existing Ezsignannotation
     * 
     * @param pkiEzsignannotationID 
     * @return ApiResponse<EzsignannotationDeleteObjectV1Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun ezsignannotationDeleteObjectV1WithHttpInfo(pkiEzsignannotationID: kotlin.Int) : ApiResponse<EzsignannotationDeleteObjectV1Response?> {
        val localVariableConfig = ezsignannotationDeleteObjectV1RequestConfig(pkiEzsignannotationID = pkiEzsignannotationID)

        return request<Unit, EzsignannotationDeleteObjectV1Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation ezsignannotationDeleteObjectV1
     *
     * @param pkiEzsignannotationID 
     * @return RequestConfig
     */
    fun ezsignannotationDeleteObjectV1RequestConfig(pkiEzsignannotationID: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/1/object/ezsignannotation/{pkiEzsignannotationID}".replace("{"+"pkiEzsignannotationID"+"}", encodeURIComponent(pkiEzsignannotationID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Edit an existing Ezsignannotation
     * 
     * @param pkiEzsignannotationID 
     * @param ezsignannotationEditObjectV1Request 
     * @return EzsignannotationEditObjectV1Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun ezsignannotationEditObjectV1(pkiEzsignannotationID: kotlin.Int, ezsignannotationEditObjectV1Request: EzsignannotationEditObjectV1Request) : EzsignannotationEditObjectV1Response {
        val localVarResponse = ezsignannotationEditObjectV1WithHttpInfo(pkiEzsignannotationID = pkiEzsignannotationID, ezsignannotationEditObjectV1Request = ezsignannotationEditObjectV1Request)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as EzsignannotationEditObjectV1Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Edit an existing Ezsignannotation
     * 
     * @param pkiEzsignannotationID 
     * @param ezsignannotationEditObjectV1Request 
     * @return ApiResponse<EzsignannotationEditObjectV1Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun ezsignannotationEditObjectV1WithHttpInfo(pkiEzsignannotationID: kotlin.Int, ezsignannotationEditObjectV1Request: EzsignannotationEditObjectV1Request) : ApiResponse<EzsignannotationEditObjectV1Response?> {
        val localVariableConfig = ezsignannotationEditObjectV1RequestConfig(pkiEzsignannotationID = pkiEzsignannotationID, ezsignannotationEditObjectV1Request = ezsignannotationEditObjectV1Request)

        return request<EzsignannotationEditObjectV1Request, EzsignannotationEditObjectV1Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation ezsignannotationEditObjectV1
     *
     * @param pkiEzsignannotationID 
     * @param ezsignannotationEditObjectV1Request 
     * @return RequestConfig
     */
    fun ezsignannotationEditObjectV1RequestConfig(pkiEzsignannotationID: kotlin.Int, ezsignannotationEditObjectV1Request: EzsignannotationEditObjectV1Request) : RequestConfig<EzsignannotationEditObjectV1Request> {
        val localVariableBody = ezsignannotationEditObjectV1Request
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/1/object/ezsignannotation/{pkiEzsignannotationID}".replace("{"+"pkiEzsignannotationID"+"}", encodeURIComponent(pkiEzsignannotationID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Retrieve an existing Ezsignannotation
     * 
     * @param pkiEzsignannotationID 
     * @return EzsignannotationGetObjectV2Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun ezsignannotationGetObjectV2(pkiEzsignannotationID: kotlin.Int) : EzsignannotationGetObjectV2Response {
        val localVarResponse = ezsignannotationGetObjectV2WithHttpInfo(pkiEzsignannotationID = pkiEzsignannotationID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as EzsignannotationGetObjectV2Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieve an existing Ezsignannotation
     * 
     * @param pkiEzsignannotationID 
     * @return ApiResponse<EzsignannotationGetObjectV2Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun ezsignannotationGetObjectV2WithHttpInfo(pkiEzsignannotationID: kotlin.Int) : ApiResponse<EzsignannotationGetObjectV2Response?> {
        val localVariableConfig = ezsignannotationGetObjectV2RequestConfig(pkiEzsignannotationID = pkiEzsignannotationID)

        return request<Unit, EzsignannotationGetObjectV2Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation ezsignannotationGetObjectV2
     *
     * @param pkiEzsignannotationID 
     * @return RequestConfig
     */
    fun ezsignannotationGetObjectV2RequestConfig(pkiEzsignannotationID: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/2/object/ezsignannotation/{pkiEzsignannotationID}".replace("{"+"pkiEzsignannotationID"+"}", encodeURIComponent(pkiEzsignannotationID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
