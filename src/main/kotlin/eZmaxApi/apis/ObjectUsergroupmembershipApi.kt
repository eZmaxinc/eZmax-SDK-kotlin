/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package eZmaxApi.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import eZmaxApi.models.CommonMinusResponseMinusError
import eZmaxApi.models.UsergroupmembershipMinusCreateObjectMinusV1MinusRequest
import eZmaxApi.models.UsergroupmembershipMinusCreateObjectMinusV1MinusResponse
import eZmaxApi.models.UsergroupmembershipMinusDeleteObjectMinusV1MinusResponse
import eZmaxApi.models.UsergroupmembershipMinusEditObjectMinusV1MinusRequest
import eZmaxApi.models.UsergroupmembershipMinusEditObjectMinusV1MinusResponse
import eZmaxApi.models.UsergroupmembershipMinusGetObjectMinusV2MinusResponse

import com.squareup.moshi.Json

import eZmaxApi.infrastructure.ApiClient
import eZmaxApi.infrastructure.ApiResponse
import eZmaxApi.infrastructure.ClientException
import eZmaxApi.infrastructure.ClientError
import eZmaxApi.infrastructure.ServerException
import eZmaxApi.infrastructure.ServerError
import eZmaxApi.infrastructure.MultiValueMap
import eZmaxApi.infrastructure.PartConfig
import eZmaxApi.infrastructure.RequestConfig
import eZmaxApi.infrastructure.RequestMethod
import eZmaxApi.infrastructure.ResponseType
import eZmaxApi.infrastructure.Success
import eZmaxApi.infrastructure.toMultiValue

class ObjectUsergroupmembershipApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://prod.api.appcluster01.ca-central-1.ezmax.com/rest")
        }
    }

    /**
     * Create a new Usergroupmembership
     * The endpoint allows to create one or many elements at once.
     * @param usergroupmembershipMinusCreateObjectMinusV1MinusRequest 
     * @return UsergroupmembershipMinusCreateObjectMinusV1MinusResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun usergroupmembershipCreateObjectV1(usergroupmembershipMinusCreateObjectMinusV1MinusRequest: UsergroupmembershipMinusCreateObjectMinusV1MinusRequest) : UsergroupmembershipMinusCreateObjectMinusV1MinusResponse {
        val localVarResponse = usergroupmembershipCreateObjectV1WithHttpInfo(usergroupmembershipMinusCreateObjectMinusV1MinusRequest = usergroupmembershipMinusCreateObjectMinusV1MinusRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as UsergroupmembershipMinusCreateObjectMinusV1MinusResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Create a new Usergroupmembership
     * The endpoint allows to create one or many elements at once.
     * @param usergroupmembershipMinusCreateObjectMinusV1MinusRequest 
     * @return ApiResponse<UsergroupmembershipMinusCreateObjectMinusV1MinusResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun usergroupmembershipCreateObjectV1WithHttpInfo(usergroupmembershipMinusCreateObjectMinusV1MinusRequest: UsergroupmembershipMinusCreateObjectMinusV1MinusRequest) : ApiResponse<UsergroupmembershipMinusCreateObjectMinusV1MinusResponse?> {
        val localVariableConfig = usergroupmembershipCreateObjectV1RequestConfig(usergroupmembershipMinusCreateObjectMinusV1MinusRequest = usergroupmembershipMinusCreateObjectMinusV1MinusRequest)

        return request<UsergroupmembershipMinusCreateObjectMinusV1MinusRequest, UsergroupmembershipMinusCreateObjectMinusV1MinusResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation usergroupmembershipCreateObjectV1
     *
     * @param usergroupmembershipMinusCreateObjectMinusV1MinusRequest 
     * @return RequestConfig
     */
    fun usergroupmembershipCreateObjectV1RequestConfig(usergroupmembershipMinusCreateObjectMinusV1MinusRequest: UsergroupmembershipMinusCreateObjectMinusV1MinusRequest) : RequestConfig<UsergroupmembershipMinusCreateObjectMinusV1MinusRequest> {
        val localVariableBody = usergroupmembershipMinusCreateObjectMinusV1MinusRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/1/object/usergroupmembership",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Delete an existing Usergroupmembership
     * 
     * @param pkiUsergroupmembershipID 
     * @return UsergroupmembershipMinusDeleteObjectMinusV1MinusResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun usergroupmembershipDeleteObjectV1(pkiUsergroupmembershipID: kotlin.Int) : UsergroupmembershipMinusDeleteObjectMinusV1MinusResponse {
        val localVarResponse = usergroupmembershipDeleteObjectV1WithHttpInfo(pkiUsergroupmembershipID = pkiUsergroupmembershipID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as UsergroupmembershipMinusDeleteObjectMinusV1MinusResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Delete an existing Usergroupmembership
     * 
     * @param pkiUsergroupmembershipID 
     * @return ApiResponse<UsergroupmembershipMinusDeleteObjectMinusV1MinusResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun usergroupmembershipDeleteObjectV1WithHttpInfo(pkiUsergroupmembershipID: kotlin.Int) : ApiResponse<UsergroupmembershipMinusDeleteObjectMinusV1MinusResponse?> {
        val localVariableConfig = usergroupmembershipDeleteObjectV1RequestConfig(pkiUsergroupmembershipID = pkiUsergroupmembershipID)

        return request<Unit, UsergroupmembershipMinusDeleteObjectMinusV1MinusResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation usergroupmembershipDeleteObjectV1
     *
     * @param pkiUsergroupmembershipID 
     * @return RequestConfig
     */
    fun usergroupmembershipDeleteObjectV1RequestConfig(pkiUsergroupmembershipID: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/1/object/usergroupmembership/{pkiUsergroupmembershipID}".replace("{"+"pkiUsergroupmembershipID"+"}", encodeURIComponent(pkiUsergroupmembershipID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Edit an existing Usergroupmembership
     * 
     * @param pkiUsergroupmembershipID 
     * @param usergroupmembershipMinusEditObjectMinusV1MinusRequest 
     * @return UsergroupmembershipMinusEditObjectMinusV1MinusResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun usergroupmembershipEditObjectV1(pkiUsergroupmembershipID: kotlin.Int, usergroupmembershipMinusEditObjectMinusV1MinusRequest: UsergroupmembershipMinusEditObjectMinusV1MinusRequest) : UsergroupmembershipMinusEditObjectMinusV1MinusResponse {
        val localVarResponse = usergroupmembershipEditObjectV1WithHttpInfo(pkiUsergroupmembershipID = pkiUsergroupmembershipID, usergroupmembershipMinusEditObjectMinusV1MinusRequest = usergroupmembershipMinusEditObjectMinusV1MinusRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as UsergroupmembershipMinusEditObjectMinusV1MinusResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Edit an existing Usergroupmembership
     * 
     * @param pkiUsergroupmembershipID 
     * @param usergroupmembershipMinusEditObjectMinusV1MinusRequest 
     * @return ApiResponse<UsergroupmembershipMinusEditObjectMinusV1MinusResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun usergroupmembershipEditObjectV1WithHttpInfo(pkiUsergroupmembershipID: kotlin.Int, usergroupmembershipMinusEditObjectMinusV1MinusRequest: UsergroupmembershipMinusEditObjectMinusV1MinusRequest) : ApiResponse<UsergroupmembershipMinusEditObjectMinusV1MinusResponse?> {
        val localVariableConfig = usergroupmembershipEditObjectV1RequestConfig(pkiUsergroupmembershipID = pkiUsergroupmembershipID, usergroupmembershipMinusEditObjectMinusV1MinusRequest = usergroupmembershipMinusEditObjectMinusV1MinusRequest)

        return request<UsergroupmembershipMinusEditObjectMinusV1MinusRequest, UsergroupmembershipMinusEditObjectMinusV1MinusResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation usergroupmembershipEditObjectV1
     *
     * @param pkiUsergroupmembershipID 
     * @param usergroupmembershipMinusEditObjectMinusV1MinusRequest 
     * @return RequestConfig
     */
    fun usergroupmembershipEditObjectV1RequestConfig(pkiUsergroupmembershipID: kotlin.Int, usergroupmembershipMinusEditObjectMinusV1MinusRequest: UsergroupmembershipMinusEditObjectMinusV1MinusRequest) : RequestConfig<UsergroupmembershipMinusEditObjectMinusV1MinusRequest> {
        val localVariableBody = usergroupmembershipMinusEditObjectMinusV1MinusRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/1/object/usergroupmembership/{pkiUsergroupmembershipID}".replace("{"+"pkiUsergroupmembershipID"+"}", encodeURIComponent(pkiUsergroupmembershipID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Retrieve an existing Usergroupmembership
     * 
     * @param pkiUsergroupmembershipID 
     * @return UsergroupmembershipMinusGetObjectMinusV2MinusResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun usergroupmembershipGetObjectV2(pkiUsergroupmembershipID: kotlin.Int) : UsergroupmembershipMinusGetObjectMinusV2MinusResponse {
        val localVarResponse = usergroupmembershipGetObjectV2WithHttpInfo(pkiUsergroupmembershipID = pkiUsergroupmembershipID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as UsergroupmembershipMinusGetObjectMinusV2MinusResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieve an existing Usergroupmembership
     * 
     * @param pkiUsergroupmembershipID 
     * @return ApiResponse<UsergroupmembershipMinusGetObjectMinusV2MinusResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun usergroupmembershipGetObjectV2WithHttpInfo(pkiUsergroupmembershipID: kotlin.Int) : ApiResponse<UsergroupmembershipMinusGetObjectMinusV2MinusResponse?> {
        val localVariableConfig = usergroupmembershipGetObjectV2RequestConfig(pkiUsergroupmembershipID = pkiUsergroupmembershipID)

        return request<Unit, UsergroupmembershipMinusGetObjectMinusV2MinusResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation usergroupmembershipGetObjectV2
     *
     * @param pkiUsergroupmembershipID 
     * @return RequestConfig
     */
    fun usergroupmembershipGetObjectV2RequestConfig(pkiUsergroupmembershipID: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/2/object/usergroupmembership/{pkiUsergroupmembershipID}".replace("{"+"pkiUsergroupmembershipID"+"}", encodeURIComponent(pkiUsergroupmembershipID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
