/**
 * eZmax API Definition
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.3
 * Contact: support-api@ezmax.ca
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package eZmaxApi.apis

import java.io.IOException

import eZmaxApi.models.AuthenticateMinusAuthenticateMinusV2MinusRequest
import eZmaxApi.models.AuthenticateMinusAuthenticateMinusV2MinusResponse
import eZmaxApi.models.CommonMinusResponseMinusError

import eZmaxApi.infrastructure.ApiClient
import eZmaxApi.infrastructure.ApiResponse
import eZmaxApi.infrastructure.ClientException
import eZmaxApi.infrastructure.ClientError
import eZmaxApi.infrastructure.ServerException
import eZmaxApi.infrastructure.ServerError
import eZmaxApi.infrastructure.MultiValueMap
import eZmaxApi.infrastructure.RequestConfig
import eZmaxApi.infrastructure.RequestMethod
import eZmaxApi.infrastructure.ResponseType
import eZmaxApi.infrastructure.Success
import eZmaxApi.infrastructure.toMultiValue

class ModuleAuthenticateApi(basePath: kotlin.String = defaultBasePath) : ApiClient(basePath) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://prod.api.appcluster01.ca-central-1.ezmax.com/rest")
        }
    }

    /**
    * Authenticate a user
    * This endpoint authenticates a user.
    * @param eSessionType  
    * @param authenticateMinusAuthenticateMinusV2MinusRequest  
    * @return AuthenticateMinusAuthenticateMinusV2MinusResponse
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun authenticateAuthenticateV2(eSessionType: kotlin.String, authenticateMinusAuthenticateMinusV2MinusRequest: AuthenticateMinusAuthenticateMinusV2MinusRequest) : AuthenticateMinusAuthenticateMinusV2MinusResponse {
        val localVarResponse = authenticateAuthenticateV2WithHttpInfo(eSessionType = eSessionType, authenticateMinusAuthenticateMinusV2MinusRequest = authenticateMinusAuthenticateMinusV2MinusRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as AuthenticateMinusAuthenticateMinusV2MinusResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Authenticate a user
    * This endpoint authenticates a user.
    * @param eSessionType  
    * @param authenticateMinusAuthenticateMinusV2MinusRequest  
    * @return ApiResponse<AuthenticateMinusAuthenticateMinusV2MinusResponse?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun authenticateAuthenticateV2WithHttpInfo(eSessionType: kotlin.String, authenticateMinusAuthenticateMinusV2MinusRequest: AuthenticateMinusAuthenticateMinusV2MinusRequest) : ApiResponse<AuthenticateMinusAuthenticateMinusV2MinusResponse?> {
        val localVariableConfig = authenticateAuthenticateV2RequestConfig(eSessionType = eSessionType, authenticateMinusAuthenticateMinusV2MinusRequest = authenticateMinusAuthenticateMinusV2MinusRequest)

        return request<AuthenticateMinusAuthenticateMinusV2MinusRequest, AuthenticateMinusAuthenticateMinusV2MinusResponse>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation authenticateAuthenticateV2
    *
    * @param eSessionType  
    * @param authenticateMinusAuthenticateMinusV2MinusRequest  
    * @return RequestConfig
    */
    fun authenticateAuthenticateV2RequestConfig(eSessionType: kotlin.String, authenticateMinusAuthenticateMinusV2MinusRequest: AuthenticateMinusAuthenticateMinusV2MinusRequest) : RequestConfig<AuthenticateMinusAuthenticateMinusV2MinusRequest> {
        val localVariableBody = authenticateMinusAuthenticateMinusV2MinusRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/2/module/authenticate/authenticate/{eSessionType}".replace("{"+"eSessionType"+"}", "$eSessionType"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

}
