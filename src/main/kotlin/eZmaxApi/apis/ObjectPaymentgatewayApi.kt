/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package eZmaxApi.apis

import java.io.IOException
import okhttp3.Call
import okhttp3.HttpUrl

import eZmaxApi.models.CommonResponseError
import eZmaxApi.models.HeaderAcceptLanguage
import eZmaxApi.models.PaymentgatewayCreateObjectV1Request
import eZmaxApi.models.PaymentgatewayCreateObjectV1Response
import eZmaxApi.models.PaymentgatewayEditObjectV1Request
import eZmaxApi.models.PaymentgatewayEditObjectV1Response
import eZmaxApi.models.PaymentgatewayGetAutocompleteV2Response
import eZmaxApi.models.PaymentgatewayGetListV1Response
import eZmaxApi.models.PaymentgatewayGetObjectV2Response

import com.squareup.moshi.Json

import eZmaxApi.infrastructure.ApiClient
import eZmaxApi.infrastructure.ApiResponse
import eZmaxApi.infrastructure.ClientException
import eZmaxApi.infrastructure.ClientError
import eZmaxApi.infrastructure.ServerException
import eZmaxApi.infrastructure.ServerError
import eZmaxApi.infrastructure.MultiValueMap
import eZmaxApi.infrastructure.PartConfig
import eZmaxApi.infrastructure.RequestConfig
import eZmaxApi.infrastructure.RequestMethod
import eZmaxApi.infrastructure.ResponseType
import eZmaxApi.infrastructure.Success
import eZmaxApi.infrastructure.toMultiValue

class ObjectPaymentgatewayApi(basePath: kotlin.String = defaultBasePath, client: Call.Factory = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://prod.api.appcluster01.ca-central-1.ezmax.com/rest")
        }
    }

    /**
     * POST /1/object/paymentgateway
     * Create a new Paymentgateway
     * The endpoint allows to create one or many elements at once.
     * @param paymentgatewayCreateObjectV1Request 
     * @return PaymentgatewayCreateObjectV1Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun paymentgatewayCreateObjectV1(paymentgatewayCreateObjectV1Request: PaymentgatewayCreateObjectV1Request) : PaymentgatewayCreateObjectV1Response {
        val localVarResponse = paymentgatewayCreateObjectV1WithHttpInfo(paymentgatewayCreateObjectV1Request = paymentgatewayCreateObjectV1Request)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as PaymentgatewayCreateObjectV1Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /1/object/paymentgateway
     * Create a new Paymentgateway
     * The endpoint allows to create one or many elements at once.
     * @param paymentgatewayCreateObjectV1Request 
     * @return ApiResponse<PaymentgatewayCreateObjectV1Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun paymentgatewayCreateObjectV1WithHttpInfo(paymentgatewayCreateObjectV1Request: PaymentgatewayCreateObjectV1Request) : ApiResponse<PaymentgatewayCreateObjectV1Response?> {
        val localVariableConfig = paymentgatewayCreateObjectV1RequestConfig(paymentgatewayCreateObjectV1Request = paymentgatewayCreateObjectV1Request)

        return request<PaymentgatewayCreateObjectV1Request, PaymentgatewayCreateObjectV1Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation paymentgatewayCreateObjectV1
     *
     * @param paymentgatewayCreateObjectV1Request 
     * @return RequestConfig
     */
    fun paymentgatewayCreateObjectV1RequestConfig(paymentgatewayCreateObjectV1Request: PaymentgatewayCreateObjectV1Request) : RequestConfig<PaymentgatewayCreateObjectV1Request> {
        val localVariableBody = paymentgatewayCreateObjectV1Request
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/1/object/paymentgateway",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * PUT /1/object/paymentgateway/{pkiPaymentgatewayID}
     * Edit an existing Paymentgateway
     * 
     * @param pkiPaymentgatewayID The unique ID of the Paymentgateway
     * @param paymentgatewayEditObjectV1Request 
     * @return PaymentgatewayEditObjectV1Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun paymentgatewayEditObjectV1(pkiPaymentgatewayID: kotlin.Int, paymentgatewayEditObjectV1Request: PaymentgatewayEditObjectV1Request) : PaymentgatewayEditObjectV1Response {
        val localVarResponse = paymentgatewayEditObjectV1WithHttpInfo(pkiPaymentgatewayID = pkiPaymentgatewayID, paymentgatewayEditObjectV1Request = paymentgatewayEditObjectV1Request)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as PaymentgatewayEditObjectV1Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * PUT /1/object/paymentgateway/{pkiPaymentgatewayID}
     * Edit an existing Paymentgateway
     * 
     * @param pkiPaymentgatewayID The unique ID of the Paymentgateway
     * @param paymentgatewayEditObjectV1Request 
     * @return ApiResponse<PaymentgatewayEditObjectV1Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun paymentgatewayEditObjectV1WithHttpInfo(pkiPaymentgatewayID: kotlin.Int, paymentgatewayEditObjectV1Request: PaymentgatewayEditObjectV1Request) : ApiResponse<PaymentgatewayEditObjectV1Response?> {
        val localVariableConfig = paymentgatewayEditObjectV1RequestConfig(pkiPaymentgatewayID = pkiPaymentgatewayID, paymentgatewayEditObjectV1Request = paymentgatewayEditObjectV1Request)

        return request<PaymentgatewayEditObjectV1Request, PaymentgatewayEditObjectV1Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation paymentgatewayEditObjectV1
     *
     * @param pkiPaymentgatewayID The unique ID of the Paymentgateway
     * @param paymentgatewayEditObjectV1Request 
     * @return RequestConfig
     */
    fun paymentgatewayEditObjectV1RequestConfig(pkiPaymentgatewayID: kotlin.Int, paymentgatewayEditObjectV1Request: PaymentgatewayEditObjectV1Request) : RequestConfig<PaymentgatewayEditObjectV1Request> {
        val localVariableBody = paymentgatewayEditObjectV1Request
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/1/object/paymentgateway/{pkiPaymentgatewayID}".replace("{"+"pkiPaymentgatewayID"+"}", encodeURIComponent(pkiPaymentgatewayID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter sSelector
     */
     enum class SSelectorPaymentgatewayGetAutocompleteV2(val value: kotlin.String) {
         @Json(name = "All") All("All");

        /**
         * Override [toString()] to avoid using the enum variable name as the value, and instead use
         * the actual value defined in the API spec file.
         *
         * This solves a problem when the variable name and its value are different, and ensures that
         * the client sends the correct enum values to the server always.
         */
        override fun toString(): kotlin.String = "$value"
     }

    /**
     * enum for parameter eFilterActive
     */
     enum class EFilterActivePaymentgatewayGetAutocompleteV2(val value: kotlin.String) {
         @Json(name = "All") All("All"),
         @Json(name = "Active") Active("Active"),
         @Json(name = "Inactive") Inactive("Inactive");

        /**
         * Override [toString()] to avoid using the enum variable name as the value, and instead use
         * the actual value defined in the API spec file.
         *
         * This solves a problem when the variable name and its value are different, and ensures that
         * the client sends the correct enum values to the server always.
         */
        override fun toString(): kotlin.String = "$value"
     }

    /**
     * GET /2/object/paymentgateway/getAutocomplete/{sSelector}
     * Retrieve Paymentgateways and IDs
     * Get the list of Paymentgateway to be used in a dropdown or autocomplete control.
     * @param sSelector The type of Paymentgateways to return
     * @param eFilterActive Specify which results we want to display. (optional, default to Active)
     * @param sQuery Allow to filter the returned results (optional)
     * @param acceptLanguage  (optional)
     * @return PaymentgatewayGetAutocompleteV2Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun paymentgatewayGetAutocompleteV2(sSelector: SSelectorPaymentgatewayGetAutocompleteV2, eFilterActive: EFilterActivePaymentgatewayGetAutocompleteV2? = EFilterActivePaymentgatewayGetAutocompleteV2.Active, sQuery: kotlin.String? = null, acceptLanguage: HeaderAcceptLanguage? = null) : PaymentgatewayGetAutocompleteV2Response {
        val localVarResponse = paymentgatewayGetAutocompleteV2WithHttpInfo(sSelector = sSelector, eFilterActive = eFilterActive, sQuery = sQuery, acceptLanguage = acceptLanguage)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as PaymentgatewayGetAutocompleteV2Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /2/object/paymentgateway/getAutocomplete/{sSelector}
     * Retrieve Paymentgateways and IDs
     * Get the list of Paymentgateway to be used in a dropdown or autocomplete control.
     * @param sSelector The type of Paymentgateways to return
     * @param eFilterActive Specify which results we want to display. (optional, default to Active)
     * @param sQuery Allow to filter the returned results (optional)
     * @param acceptLanguage  (optional)
     * @return ApiResponse<PaymentgatewayGetAutocompleteV2Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun paymentgatewayGetAutocompleteV2WithHttpInfo(sSelector: SSelectorPaymentgatewayGetAutocompleteV2, eFilterActive: EFilterActivePaymentgatewayGetAutocompleteV2?, sQuery: kotlin.String?, acceptLanguage: HeaderAcceptLanguage?) : ApiResponse<PaymentgatewayGetAutocompleteV2Response?> {
        val localVariableConfig = paymentgatewayGetAutocompleteV2RequestConfig(sSelector = sSelector, eFilterActive = eFilterActive, sQuery = sQuery, acceptLanguage = acceptLanguage)

        return request<Unit, PaymentgatewayGetAutocompleteV2Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation paymentgatewayGetAutocompleteV2
     *
     * @param sSelector The type of Paymentgateways to return
     * @param eFilterActive Specify which results we want to display. (optional, default to Active)
     * @param sQuery Allow to filter the returned results (optional)
     * @param acceptLanguage  (optional)
     * @return RequestConfig
     */
    fun paymentgatewayGetAutocompleteV2RequestConfig(sSelector: SSelectorPaymentgatewayGetAutocompleteV2, eFilterActive: EFilterActivePaymentgatewayGetAutocompleteV2?, sQuery: kotlin.String?, acceptLanguage: HeaderAcceptLanguage?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (eFilterActive != null) {
                    put("eFilterActive", listOf(eFilterActive.value))
                }
                if (sQuery != null) {
                    put("sQuery", listOf(sQuery.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/2/object/paymentgateway/getAutocomplete/{sSelector}".replace("{"+"sSelector"+"}", encodeURIComponent(sSelector.value.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter eOrderBy
     */
     enum class EOrderByPaymentgatewayGetListV1(val value: kotlin.String) {
         @Json(name = "pkiPaymentgatewayID_ASC") pkiPaymentgatewayID_ASC("pkiPaymentgatewayID_ASC"),
         @Json(name = "pkiPaymentgatewayID_DESC") pkiPaymentgatewayID_DESC("pkiPaymentgatewayID_DESC"),
         @Json(name = "fkiCreditcardmerchantID_ASC") fkiCreditcardmerchantID_ASC("fkiCreditcardmerchantID_ASC"),
         @Json(name = "fkiCreditcardmerchantID_DESC") fkiCreditcardmerchantID_DESC("fkiCreditcardmerchantID_DESC"),
         @Json(name = "ePaymentgatewayProcessor_ASC") ePaymentgatewayProcessor_ASC("ePaymentgatewayProcessor_ASC"),
         @Json(name = "ePaymentgatewayProcessor_DESC") ePaymentgatewayProcessor_DESC("ePaymentgatewayProcessor_DESC");

        /**
         * Override [toString()] to avoid using the enum variable name as the value, and instead use
         * the actual value defined in the API spec file.
         *
         * This solves a problem when the variable name and its value are different, and ensures that
         * the client sends the correct enum values to the server always.
         */
        override fun toString(): kotlin.String = "$value"
     }

    /**
     * GET /1/object/paymentgateway/getList
     * Retrieve Paymentgateway list
     * Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |---|---| | ePaymentgatewayProcessor | Moneris |
     * @param eOrderBy Specify how you want the results to be sorted (optional)
     * @param iRowMax  (optional)
     * @param iRowOffset  (optional, default to 0)
     * @param acceptLanguage  (optional)
     * @param sFilter  (optional)
     * @return PaymentgatewayGetListV1Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun paymentgatewayGetListV1(eOrderBy: EOrderByPaymentgatewayGetListV1? = null, iRowMax: kotlin.Int? = null, iRowOffset: kotlin.Int? = 0, acceptLanguage: HeaderAcceptLanguage? = null, sFilter: kotlin.String? = null) : PaymentgatewayGetListV1Response {
        val localVarResponse = paymentgatewayGetListV1WithHttpInfo(eOrderBy = eOrderBy, iRowMax = iRowMax, iRowOffset = iRowOffset, acceptLanguage = acceptLanguage, sFilter = sFilter)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as PaymentgatewayGetListV1Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /1/object/paymentgateway/getList
     * Retrieve Paymentgateway list
     * Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |---|---| | ePaymentgatewayProcessor | Moneris |
     * @param eOrderBy Specify how you want the results to be sorted (optional)
     * @param iRowMax  (optional)
     * @param iRowOffset  (optional, default to 0)
     * @param acceptLanguage  (optional)
     * @param sFilter  (optional)
     * @return ApiResponse<PaymentgatewayGetListV1Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun paymentgatewayGetListV1WithHttpInfo(eOrderBy: EOrderByPaymentgatewayGetListV1?, iRowMax: kotlin.Int?, iRowOffset: kotlin.Int?, acceptLanguage: HeaderAcceptLanguage?, sFilter: kotlin.String?) : ApiResponse<PaymentgatewayGetListV1Response?> {
        val localVariableConfig = paymentgatewayGetListV1RequestConfig(eOrderBy = eOrderBy, iRowMax = iRowMax, iRowOffset = iRowOffset, acceptLanguage = acceptLanguage, sFilter = sFilter)

        return request<Unit, PaymentgatewayGetListV1Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation paymentgatewayGetListV1
     *
     * @param eOrderBy Specify how you want the results to be sorted (optional)
     * @param iRowMax  (optional)
     * @param iRowOffset  (optional, default to 0)
     * @param acceptLanguage  (optional)
     * @param sFilter  (optional)
     * @return RequestConfig
     */
    fun paymentgatewayGetListV1RequestConfig(eOrderBy: EOrderByPaymentgatewayGetListV1?, iRowMax: kotlin.Int?, iRowOffset: kotlin.Int?, acceptLanguage: HeaderAcceptLanguage?, sFilter: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (eOrderBy != null) {
                    put("eOrderBy", listOf(eOrderBy.value))
                }
                if (iRowMax != null) {
                    put("iRowMax", listOf(iRowMax.toString()))
                }
                if (iRowOffset != null) {
                    put("iRowOffset", listOf(iRowOffset.toString()))
                }
                if (sFilter != null) {
                    put("sFilter", listOf(sFilter.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/1/object/paymentgateway/getList",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * GET /2/object/paymentgateway/{pkiPaymentgatewayID}
     * Retrieve an existing Paymentgateway
     * 
     * @param pkiPaymentgatewayID The unique ID of the Paymentgateway
     * @return PaymentgatewayGetObjectV2Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun paymentgatewayGetObjectV2(pkiPaymentgatewayID: kotlin.Int) : PaymentgatewayGetObjectV2Response {
        val localVarResponse = paymentgatewayGetObjectV2WithHttpInfo(pkiPaymentgatewayID = pkiPaymentgatewayID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as PaymentgatewayGetObjectV2Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /2/object/paymentgateway/{pkiPaymentgatewayID}
     * Retrieve an existing Paymentgateway
     * 
     * @param pkiPaymentgatewayID The unique ID of the Paymentgateway
     * @return ApiResponse<PaymentgatewayGetObjectV2Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun paymentgatewayGetObjectV2WithHttpInfo(pkiPaymentgatewayID: kotlin.Int) : ApiResponse<PaymentgatewayGetObjectV2Response?> {
        val localVariableConfig = paymentgatewayGetObjectV2RequestConfig(pkiPaymentgatewayID = pkiPaymentgatewayID)

        return request<Unit, PaymentgatewayGetObjectV2Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation paymentgatewayGetObjectV2
     *
     * @param pkiPaymentgatewayID The unique ID of the Paymentgateway
     * @return RequestConfig
     */
    fun paymentgatewayGetObjectV2RequestConfig(pkiPaymentgatewayID: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/2/object/paymentgateway/{pkiPaymentgatewayID}".replace("{"+"pkiPaymentgatewayID"+"}", encodeURIComponent(pkiPaymentgatewayID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
