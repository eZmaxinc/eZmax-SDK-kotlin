/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package eZmaxApi.apis

import java.io.IOException
import okhttp3.Call
import okhttp3.HttpUrl

import eZmaxApi.models.AuthenticationexternalCreateObjectV1Request
import eZmaxApi.models.AuthenticationexternalCreateObjectV1Response
import eZmaxApi.models.AuthenticationexternalDeleteObjectV1Response
import eZmaxApi.models.AuthenticationexternalEditObjectV1Request
import eZmaxApi.models.AuthenticationexternalEditObjectV1Response
import eZmaxApi.models.AuthenticationexternalGetAutocompleteV2Response
import eZmaxApi.models.AuthenticationexternalGetListV1Response
import eZmaxApi.models.AuthenticationexternalGetObjectV2Response
import eZmaxApi.models.AuthenticationexternalResetAuthorizationV1Response
import eZmaxApi.models.CommonResponseError
import eZmaxApi.models.HeaderAcceptLanguage

import com.squareup.moshi.Json

import eZmaxApi.infrastructure.ApiClient
import eZmaxApi.infrastructure.ApiResponse
import eZmaxApi.infrastructure.ClientException
import eZmaxApi.infrastructure.ClientError
import eZmaxApi.infrastructure.ServerException
import eZmaxApi.infrastructure.ServerError
import eZmaxApi.infrastructure.MultiValueMap
import eZmaxApi.infrastructure.PartConfig
import eZmaxApi.infrastructure.RequestConfig
import eZmaxApi.infrastructure.RequestMethod
import eZmaxApi.infrastructure.ResponseType
import eZmaxApi.infrastructure.Success
import eZmaxApi.infrastructure.toMultiValue

class ObjectAuthenticationexternalApi(basePath: kotlin.String = defaultBasePath, client: Call.Factory = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://prod.api.appcluster01.ca-central-1.ezmax.com/rest")
        }
    }

    /**
     * POST /1/object/authenticationexternal
     * Create a new Authenticationexternal
     * The endpoint allows to create one or many elements at once.
     * @param authenticationexternalCreateObjectV1Request 
     * @return AuthenticationexternalCreateObjectV1Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun authenticationexternalCreateObjectV1(authenticationexternalCreateObjectV1Request: AuthenticationexternalCreateObjectV1Request) : AuthenticationexternalCreateObjectV1Response {
        val localVarResponse = authenticationexternalCreateObjectV1WithHttpInfo(authenticationexternalCreateObjectV1Request = authenticationexternalCreateObjectV1Request)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as AuthenticationexternalCreateObjectV1Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /1/object/authenticationexternal
     * Create a new Authenticationexternal
     * The endpoint allows to create one or many elements at once.
     * @param authenticationexternalCreateObjectV1Request 
     * @return ApiResponse<AuthenticationexternalCreateObjectV1Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun authenticationexternalCreateObjectV1WithHttpInfo(authenticationexternalCreateObjectV1Request: AuthenticationexternalCreateObjectV1Request) : ApiResponse<AuthenticationexternalCreateObjectV1Response?> {
        val localVariableConfig = authenticationexternalCreateObjectV1RequestConfig(authenticationexternalCreateObjectV1Request = authenticationexternalCreateObjectV1Request)

        return request<AuthenticationexternalCreateObjectV1Request, AuthenticationexternalCreateObjectV1Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation authenticationexternalCreateObjectV1
     *
     * @param authenticationexternalCreateObjectV1Request 
     * @return RequestConfig
     */
    fun authenticationexternalCreateObjectV1RequestConfig(authenticationexternalCreateObjectV1Request: AuthenticationexternalCreateObjectV1Request) : RequestConfig<AuthenticationexternalCreateObjectV1Request> {
        val localVariableBody = authenticationexternalCreateObjectV1Request
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/1/object/authenticationexternal",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * DELETE /1/object/authenticationexternal/{pkiAuthenticationexternalID}
     * Delete an existing Authenticationexternal
     * 
     * @param pkiAuthenticationexternalID The unique ID of the Authenticationexternal
     * @return AuthenticationexternalDeleteObjectV1Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun authenticationexternalDeleteObjectV1(pkiAuthenticationexternalID: kotlin.Int) : AuthenticationexternalDeleteObjectV1Response {
        val localVarResponse = authenticationexternalDeleteObjectV1WithHttpInfo(pkiAuthenticationexternalID = pkiAuthenticationexternalID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as AuthenticationexternalDeleteObjectV1Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * DELETE /1/object/authenticationexternal/{pkiAuthenticationexternalID}
     * Delete an existing Authenticationexternal
     * 
     * @param pkiAuthenticationexternalID The unique ID of the Authenticationexternal
     * @return ApiResponse<AuthenticationexternalDeleteObjectV1Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun authenticationexternalDeleteObjectV1WithHttpInfo(pkiAuthenticationexternalID: kotlin.Int) : ApiResponse<AuthenticationexternalDeleteObjectV1Response?> {
        val localVariableConfig = authenticationexternalDeleteObjectV1RequestConfig(pkiAuthenticationexternalID = pkiAuthenticationexternalID)

        return request<Unit, AuthenticationexternalDeleteObjectV1Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation authenticationexternalDeleteObjectV1
     *
     * @param pkiAuthenticationexternalID The unique ID of the Authenticationexternal
     * @return RequestConfig
     */
    fun authenticationexternalDeleteObjectV1RequestConfig(pkiAuthenticationexternalID: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/1/object/authenticationexternal/{pkiAuthenticationexternalID}".replace("{"+"pkiAuthenticationexternalID"+"}", encodeURIComponent(pkiAuthenticationexternalID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * PUT /1/object/authenticationexternal/{pkiAuthenticationexternalID}
     * Edit an existing Authenticationexternal
     * 
     * @param pkiAuthenticationexternalID The unique ID of the Authenticationexternal
     * @param authenticationexternalEditObjectV1Request 
     * @return AuthenticationexternalEditObjectV1Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun authenticationexternalEditObjectV1(pkiAuthenticationexternalID: kotlin.Int, authenticationexternalEditObjectV1Request: AuthenticationexternalEditObjectV1Request) : AuthenticationexternalEditObjectV1Response {
        val localVarResponse = authenticationexternalEditObjectV1WithHttpInfo(pkiAuthenticationexternalID = pkiAuthenticationexternalID, authenticationexternalEditObjectV1Request = authenticationexternalEditObjectV1Request)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as AuthenticationexternalEditObjectV1Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * PUT /1/object/authenticationexternal/{pkiAuthenticationexternalID}
     * Edit an existing Authenticationexternal
     * 
     * @param pkiAuthenticationexternalID The unique ID of the Authenticationexternal
     * @param authenticationexternalEditObjectV1Request 
     * @return ApiResponse<AuthenticationexternalEditObjectV1Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun authenticationexternalEditObjectV1WithHttpInfo(pkiAuthenticationexternalID: kotlin.Int, authenticationexternalEditObjectV1Request: AuthenticationexternalEditObjectV1Request) : ApiResponse<AuthenticationexternalEditObjectV1Response?> {
        val localVariableConfig = authenticationexternalEditObjectV1RequestConfig(pkiAuthenticationexternalID = pkiAuthenticationexternalID, authenticationexternalEditObjectV1Request = authenticationexternalEditObjectV1Request)

        return request<AuthenticationexternalEditObjectV1Request, AuthenticationexternalEditObjectV1Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation authenticationexternalEditObjectV1
     *
     * @param pkiAuthenticationexternalID The unique ID of the Authenticationexternal
     * @param authenticationexternalEditObjectV1Request 
     * @return RequestConfig
     */
    fun authenticationexternalEditObjectV1RequestConfig(pkiAuthenticationexternalID: kotlin.Int, authenticationexternalEditObjectV1Request: AuthenticationexternalEditObjectV1Request) : RequestConfig<AuthenticationexternalEditObjectV1Request> {
        val localVariableBody = authenticationexternalEditObjectV1Request
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/1/object/authenticationexternal/{pkiAuthenticationexternalID}".replace("{"+"pkiAuthenticationexternalID"+"}", encodeURIComponent(pkiAuthenticationexternalID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter sSelector
     */
     enum class SSelectorAuthenticationexternalGetAutocompleteV2(val value: kotlin.String) {
         @Json(name = "All") All("All");

        /**
         * Override [toString()] to avoid using the enum variable name as the value, and instead use
         * the actual value defined in the API spec file.
         *
         * This solves a problem when the variable name and its value are different, and ensures that
         * the client sends the correct enum values to the server always.
         */
        override fun toString(): kotlin.String = "$value"
     }

    /**
     * enum for parameter eFilterActive
     */
     enum class EFilterActiveAuthenticationexternalGetAutocompleteV2(val value: kotlin.String) {
         @Json(name = "All") All("All"),
         @Json(name = "Active") Active("Active"),
         @Json(name = "Inactive") Inactive("Inactive");

        /**
         * Override [toString()] to avoid using the enum variable name as the value, and instead use
         * the actual value defined in the API spec file.
         *
         * This solves a problem when the variable name and its value are different, and ensures that
         * the client sends the correct enum values to the server always.
         */
        override fun toString(): kotlin.String = "$value"
     }

    /**
     * GET /2/object/authenticationexternal/getAutocomplete/{sSelector}
     * Retrieve Authenticationexternals and IDs
     * Get the list of Authenticationexternal to be used in a dropdown or autocomplete control.
     * @param sSelector The type of Authenticationexternals to return
     * @param eFilterActive Specify which results we want to display. (optional, default to Active)
     * @param sQuery Allow to filter the returned results (optional)
     * @param acceptLanguage  (optional)
     * @return AuthenticationexternalGetAutocompleteV2Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun authenticationexternalGetAutocompleteV2(sSelector: SSelectorAuthenticationexternalGetAutocompleteV2, eFilterActive: EFilterActiveAuthenticationexternalGetAutocompleteV2? = EFilterActiveAuthenticationexternalGetAutocompleteV2.Active, sQuery: kotlin.String? = null, acceptLanguage: HeaderAcceptLanguage? = null) : AuthenticationexternalGetAutocompleteV2Response {
        val localVarResponse = authenticationexternalGetAutocompleteV2WithHttpInfo(sSelector = sSelector, eFilterActive = eFilterActive, sQuery = sQuery, acceptLanguage = acceptLanguage)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as AuthenticationexternalGetAutocompleteV2Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /2/object/authenticationexternal/getAutocomplete/{sSelector}
     * Retrieve Authenticationexternals and IDs
     * Get the list of Authenticationexternal to be used in a dropdown or autocomplete control.
     * @param sSelector The type of Authenticationexternals to return
     * @param eFilterActive Specify which results we want to display. (optional, default to Active)
     * @param sQuery Allow to filter the returned results (optional)
     * @param acceptLanguage  (optional)
     * @return ApiResponse<AuthenticationexternalGetAutocompleteV2Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun authenticationexternalGetAutocompleteV2WithHttpInfo(sSelector: SSelectorAuthenticationexternalGetAutocompleteV2, eFilterActive: EFilterActiveAuthenticationexternalGetAutocompleteV2?, sQuery: kotlin.String?, acceptLanguage: HeaderAcceptLanguage?) : ApiResponse<AuthenticationexternalGetAutocompleteV2Response?> {
        val localVariableConfig = authenticationexternalGetAutocompleteV2RequestConfig(sSelector = sSelector, eFilterActive = eFilterActive, sQuery = sQuery, acceptLanguage = acceptLanguage)

        return request<Unit, AuthenticationexternalGetAutocompleteV2Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation authenticationexternalGetAutocompleteV2
     *
     * @param sSelector The type of Authenticationexternals to return
     * @param eFilterActive Specify which results we want to display. (optional, default to Active)
     * @param sQuery Allow to filter the returned results (optional)
     * @param acceptLanguage  (optional)
     * @return RequestConfig
     */
    fun authenticationexternalGetAutocompleteV2RequestConfig(sSelector: SSelectorAuthenticationexternalGetAutocompleteV2, eFilterActive: EFilterActiveAuthenticationexternalGetAutocompleteV2?, sQuery: kotlin.String?, acceptLanguage: HeaderAcceptLanguage?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (eFilterActive != null) {
                    put("eFilterActive", listOf(eFilterActive.value))
                }
                if (sQuery != null) {
                    put("sQuery", listOf(sQuery.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/2/object/authenticationexternal/getAutocomplete/{sSelector}".replace("{"+"sSelector"+"}", encodeURIComponent(sSelector.value.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter eOrderBy
     */
     enum class EOrderByAuthenticationexternalGetListV1(val value: kotlin.String) {
         @Json(name = "pkiAuthenticationexternalID_ASC") pkiAuthenticationexternalID_ASC("pkiAuthenticationexternalID_ASC"),
         @Json(name = "pkiAuthenticationexternalID_DESC") pkiAuthenticationexternalID_DESC("pkiAuthenticationexternalID_DESC"),
         @Json(name = "sAuthenticationexternalDescription_ASC") sAuthenticationexternalDescription_ASC("sAuthenticationexternalDescription_ASC"),
         @Json(name = "sAuthenticationexternalDescription_DESC") sAuthenticationexternalDescription_DESC("sAuthenticationexternalDescription_DESC"),
         @Json(name = "eAuthenticationexternalType_ASC") eAuthenticationexternalType_ASC("eAuthenticationexternalType_ASC"),
         @Json(name = "eAuthenticationexternalType_DESC") eAuthenticationexternalType_DESC("eAuthenticationexternalType_DESC");

        /**
         * Override [toString()] to avoid using the enum variable name as the value, and instead use
         * the actual value defined in the API spec file.
         *
         * This solves a problem when the variable name and its value are different, and ensures that
         * the client sends the correct enum values to the server always.
         */
        override fun toString(): kotlin.String = "$value"
     }

    /**
     * GET /1/object/authenticationexternal/getList
     * Retrieve Authenticationexternal list
     * Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |---|---| | eAuthenticationexternalType | Salesforce&lt;br&gt;SalesforceSandbox |
     * @param eOrderBy Specify how you want the results to be sorted (optional)
     * @param iRowMax  (optional)
     * @param iRowOffset  (optional, default to 0)
     * @param acceptLanguage  (optional)
     * @param sFilter  (optional)
     * @return AuthenticationexternalGetListV1Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun authenticationexternalGetListV1(eOrderBy: EOrderByAuthenticationexternalGetListV1? = null, iRowMax: kotlin.Int? = null, iRowOffset: kotlin.Int? = 0, acceptLanguage: HeaderAcceptLanguage? = null, sFilter: kotlin.String? = null) : AuthenticationexternalGetListV1Response {
        val localVarResponse = authenticationexternalGetListV1WithHttpInfo(eOrderBy = eOrderBy, iRowMax = iRowMax, iRowOffset = iRowOffset, acceptLanguage = acceptLanguage, sFilter = sFilter)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as AuthenticationexternalGetListV1Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /1/object/authenticationexternal/getList
     * Retrieve Authenticationexternal list
     * Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |---|---| | eAuthenticationexternalType | Salesforce&lt;br&gt;SalesforceSandbox |
     * @param eOrderBy Specify how you want the results to be sorted (optional)
     * @param iRowMax  (optional)
     * @param iRowOffset  (optional, default to 0)
     * @param acceptLanguage  (optional)
     * @param sFilter  (optional)
     * @return ApiResponse<AuthenticationexternalGetListV1Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun authenticationexternalGetListV1WithHttpInfo(eOrderBy: EOrderByAuthenticationexternalGetListV1?, iRowMax: kotlin.Int?, iRowOffset: kotlin.Int?, acceptLanguage: HeaderAcceptLanguage?, sFilter: kotlin.String?) : ApiResponse<AuthenticationexternalGetListV1Response?> {
        val localVariableConfig = authenticationexternalGetListV1RequestConfig(eOrderBy = eOrderBy, iRowMax = iRowMax, iRowOffset = iRowOffset, acceptLanguage = acceptLanguage, sFilter = sFilter)

        return request<Unit, AuthenticationexternalGetListV1Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation authenticationexternalGetListV1
     *
     * @param eOrderBy Specify how you want the results to be sorted (optional)
     * @param iRowMax  (optional)
     * @param iRowOffset  (optional, default to 0)
     * @param acceptLanguage  (optional)
     * @param sFilter  (optional)
     * @return RequestConfig
     */
    fun authenticationexternalGetListV1RequestConfig(eOrderBy: EOrderByAuthenticationexternalGetListV1?, iRowMax: kotlin.Int?, iRowOffset: kotlin.Int?, acceptLanguage: HeaderAcceptLanguage?, sFilter: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (eOrderBy != null) {
                    put("eOrderBy", listOf(eOrderBy.value))
                }
                if (iRowMax != null) {
                    put("iRowMax", listOf(iRowMax.toString()))
                }
                if (iRowOffset != null) {
                    put("iRowOffset", listOf(iRowOffset.toString()))
                }
                if (sFilter != null) {
                    put("sFilter", listOf(sFilter.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/1/object/authenticationexternal/getList",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * GET /2/object/authenticationexternal/{pkiAuthenticationexternalID}
     * Retrieve an existing Authenticationexternal
     * 
     * @param pkiAuthenticationexternalID The unique ID of the Authenticationexternal
     * @return AuthenticationexternalGetObjectV2Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun authenticationexternalGetObjectV2(pkiAuthenticationexternalID: kotlin.Int) : AuthenticationexternalGetObjectV2Response {
        val localVarResponse = authenticationexternalGetObjectV2WithHttpInfo(pkiAuthenticationexternalID = pkiAuthenticationexternalID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as AuthenticationexternalGetObjectV2Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /2/object/authenticationexternal/{pkiAuthenticationexternalID}
     * Retrieve an existing Authenticationexternal
     * 
     * @param pkiAuthenticationexternalID The unique ID of the Authenticationexternal
     * @return ApiResponse<AuthenticationexternalGetObjectV2Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun authenticationexternalGetObjectV2WithHttpInfo(pkiAuthenticationexternalID: kotlin.Int) : ApiResponse<AuthenticationexternalGetObjectV2Response?> {
        val localVariableConfig = authenticationexternalGetObjectV2RequestConfig(pkiAuthenticationexternalID = pkiAuthenticationexternalID)

        return request<Unit, AuthenticationexternalGetObjectV2Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation authenticationexternalGetObjectV2
     *
     * @param pkiAuthenticationexternalID The unique ID of the Authenticationexternal
     * @return RequestConfig
     */
    fun authenticationexternalGetObjectV2RequestConfig(pkiAuthenticationexternalID: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/2/object/authenticationexternal/{pkiAuthenticationexternalID}".replace("{"+"pkiAuthenticationexternalID"+"}", encodeURIComponent(pkiAuthenticationexternalID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * POST /1/object/authenticationexternal/{pkiAuthenticationexternalID}/resetAuthorization
     * Reset the Authenticationexternal authorization
     * 
     * @param pkiAuthenticationexternalID 
     * @param body 
     * @return AuthenticationexternalResetAuthorizationV1Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun authenticationexternalResetAuthorizationV1(pkiAuthenticationexternalID: kotlin.Int, body: kotlin.Any) : AuthenticationexternalResetAuthorizationV1Response {
        val localVarResponse = authenticationexternalResetAuthorizationV1WithHttpInfo(pkiAuthenticationexternalID = pkiAuthenticationexternalID, body = body)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as AuthenticationexternalResetAuthorizationV1Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /1/object/authenticationexternal/{pkiAuthenticationexternalID}/resetAuthorization
     * Reset the Authenticationexternal authorization
     * 
     * @param pkiAuthenticationexternalID 
     * @param body 
     * @return ApiResponse<AuthenticationexternalResetAuthorizationV1Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun authenticationexternalResetAuthorizationV1WithHttpInfo(pkiAuthenticationexternalID: kotlin.Int, body: kotlin.Any) : ApiResponse<AuthenticationexternalResetAuthorizationV1Response?> {
        val localVariableConfig = authenticationexternalResetAuthorizationV1RequestConfig(pkiAuthenticationexternalID = pkiAuthenticationexternalID, body = body)

        return request<kotlin.Any, AuthenticationexternalResetAuthorizationV1Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation authenticationexternalResetAuthorizationV1
     *
     * @param pkiAuthenticationexternalID 
     * @param body 
     * @return RequestConfig
     */
    fun authenticationexternalResetAuthorizationV1RequestConfig(pkiAuthenticationexternalID: kotlin.Int, body: kotlin.Any) : RequestConfig<kotlin.Any> {
        val localVariableBody = body
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/1/object/authenticationexternal/{pkiAuthenticationexternalID}/resetAuthorization".replace("{"+"pkiAuthenticationexternalID"+"}", encodeURIComponent(pkiAuthenticationexternalID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
