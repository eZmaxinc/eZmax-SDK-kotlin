/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package eZmaxApi.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import eZmaxApi.models.CommonResponseError
import eZmaxApi.models.CreditcardclientCreateObjectV1Request
import eZmaxApi.models.CreditcardclientCreateObjectV1Response
import eZmaxApi.models.CreditcardclientDeleteObjectV1Response
import eZmaxApi.models.CreditcardclientEditObjectV1Request
import eZmaxApi.models.CreditcardclientEditObjectV1Response
import eZmaxApi.models.CreditcardclientGetAutocompleteV2Response
import eZmaxApi.models.CreditcardclientGetListV1Response
import eZmaxApi.models.CreditcardclientGetObjectV2Response
import eZmaxApi.models.HeaderAcceptLanguage

import com.squareup.moshi.Json

import eZmaxApi.infrastructure.ApiClient
import eZmaxApi.infrastructure.ApiResponse
import eZmaxApi.infrastructure.ClientException
import eZmaxApi.infrastructure.ClientError
import eZmaxApi.infrastructure.ServerException
import eZmaxApi.infrastructure.ServerError
import eZmaxApi.infrastructure.MultiValueMap
import eZmaxApi.infrastructure.PartConfig
import eZmaxApi.infrastructure.RequestConfig
import eZmaxApi.infrastructure.RequestMethod
import eZmaxApi.infrastructure.ResponseType
import eZmaxApi.infrastructure.Success
import eZmaxApi.infrastructure.toMultiValue

class ObjectCreditcardclientApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://prod.api.appcluster01.ca-central-1.ezmax.com/rest")
        }
    }

    /**
     * Create a new Creditcardclient
     * The endpoint allows to create one or many elements at once.
     * @param creditcardclientCreateObjectV1Request 
     * @return CreditcardclientCreateObjectV1Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun creditcardclientCreateObjectV1(creditcardclientCreateObjectV1Request: CreditcardclientCreateObjectV1Request) : CreditcardclientCreateObjectV1Response {
        val localVarResponse = creditcardclientCreateObjectV1WithHttpInfo(creditcardclientCreateObjectV1Request = creditcardclientCreateObjectV1Request)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CreditcardclientCreateObjectV1Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Create a new Creditcardclient
     * The endpoint allows to create one or many elements at once.
     * @param creditcardclientCreateObjectV1Request 
     * @return ApiResponse<CreditcardclientCreateObjectV1Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun creditcardclientCreateObjectV1WithHttpInfo(creditcardclientCreateObjectV1Request: CreditcardclientCreateObjectV1Request) : ApiResponse<CreditcardclientCreateObjectV1Response?> {
        val localVariableConfig = creditcardclientCreateObjectV1RequestConfig(creditcardclientCreateObjectV1Request = creditcardclientCreateObjectV1Request)

        return request<CreditcardclientCreateObjectV1Request, CreditcardclientCreateObjectV1Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation creditcardclientCreateObjectV1
     *
     * @param creditcardclientCreateObjectV1Request 
     * @return RequestConfig
     */
    fun creditcardclientCreateObjectV1RequestConfig(creditcardclientCreateObjectV1Request: CreditcardclientCreateObjectV1Request) : RequestConfig<CreditcardclientCreateObjectV1Request> {
        val localVariableBody = creditcardclientCreateObjectV1Request
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/1/object/creditcardclient",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Delete an existing Creditcardclient
     * 
     * @param pkiCreditcardclientID The unique ID of the Creditcardclient
     * @return CreditcardclientDeleteObjectV1Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun creditcardclientDeleteObjectV1(pkiCreditcardclientID: kotlin.Int) : CreditcardclientDeleteObjectV1Response {
        val localVarResponse = creditcardclientDeleteObjectV1WithHttpInfo(pkiCreditcardclientID = pkiCreditcardclientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CreditcardclientDeleteObjectV1Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Delete an existing Creditcardclient
     * 
     * @param pkiCreditcardclientID The unique ID of the Creditcardclient
     * @return ApiResponse<CreditcardclientDeleteObjectV1Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun creditcardclientDeleteObjectV1WithHttpInfo(pkiCreditcardclientID: kotlin.Int) : ApiResponse<CreditcardclientDeleteObjectV1Response?> {
        val localVariableConfig = creditcardclientDeleteObjectV1RequestConfig(pkiCreditcardclientID = pkiCreditcardclientID)

        return request<Unit, CreditcardclientDeleteObjectV1Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation creditcardclientDeleteObjectV1
     *
     * @param pkiCreditcardclientID The unique ID of the Creditcardclient
     * @return RequestConfig
     */
    fun creditcardclientDeleteObjectV1RequestConfig(pkiCreditcardclientID: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/1/object/creditcardclient/{pkiCreditcardclientID}".replace("{"+"pkiCreditcardclientID"+"}", encodeURIComponent(pkiCreditcardclientID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Edit an existing Creditcardclient
     * 
     * @param pkiCreditcardclientID The unique ID of the Creditcardclient
     * @param creditcardclientEditObjectV1Request 
     * @return CreditcardclientEditObjectV1Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun creditcardclientEditObjectV1(pkiCreditcardclientID: kotlin.Int, creditcardclientEditObjectV1Request: CreditcardclientEditObjectV1Request) : CreditcardclientEditObjectV1Response {
        val localVarResponse = creditcardclientEditObjectV1WithHttpInfo(pkiCreditcardclientID = pkiCreditcardclientID, creditcardclientEditObjectV1Request = creditcardclientEditObjectV1Request)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CreditcardclientEditObjectV1Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Edit an existing Creditcardclient
     * 
     * @param pkiCreditcardclientID The unique ID of the Creditcardclient
     * @param creditcardclientEditObjectV1Request 
     * @return ApiResponse<CreditcardclientEditObjectV1Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun creditcardclientEditObjectV1WithHttpInfo(pkiCreditcardclientID: kotlin.Int, creditcardclientEditObjectV1Request: CreditcardclientEditObjectV1Request) : ApiResponse<CreditcardclientEditObjectV1Response?> {
        val localVariableConfig = creditcardclientEditObjectV1RequestConfig(pkiCreditcardclientID = pkiCreditcardclientID, creditcardclientEditObjectV1Request = creditcardclientEditObjectV1Request)

        return request<CreditcardclientEditObjectV1Request, CreditcardclientEditObjectV1Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation creditcardclientEditObjectV1
     *
     * @param pkiCreditcardclientID The unique ID of the Creditcardclient
     * @param creditcardclientEditObjectV1Request 
     * @return RequestConfig
     */
    fun creditcardclientEditObjectV1RequestConfig(pkiCreditcardclientID: kotlin.Int, creditcardclientEditObjectV1Request: CreditcardclientEditObjectV1Request) : RequestConfig<CreditcardclientEditObjectV1Request> {
        val localVariableBody = creditcardclientEditObjectV1Request
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/1/object/creditcardclient/{pkiCreditcardclientID}".replace("{"+"pkiCreditcardclientID"+"}", encodeURIComponent(pkiCreditcardclientID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter sSelector
     */
     enum class SSelectorCreditcardclientGetAutocompleteV2(val value: kotlin.String) {
         @Json(name = "All") All("All")
     }

    /**
     * enum for parameter eFilterActive
     */
     enum class EFilterActiveCreditcardclientGetAutocompleteV2(val value: kotlin.String) {
         @Json(name = "All") All("All"),
         @Json(name = "Active") Active("Active"),
         @Json(name = "Inactive") Inactive("Inactive")
     }

    /**
     * Retrieve Creditcardclients and IDs
     * Get the list of Creditcardclient to be used in a dropdown or autocomplete control.
     * @param sSelector The type of Creditcardclients to return
     * @param eFilterActive Specify which results we want to display. (optional, default to Active)
     * @param sQuery Allow to filter the returned results (optional)
     * @param acceptLanguage  (optional)
     * @return CreditcardclientGetAutocompleteV2Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun creditcardclientGetAutocompleteV2(sSelector: SSelectorCreditcardclientGetAutocompleteV2, eFilterActive: EFilterActiveCreditcardclientGetAutocompleteV2? = EFilterActiveCreditcardclientGetAutocompleteV2.Active, sQuery: kotlin.String? = null, acceptLanguage: HeaderAcceptLanguage? = null) : CreditcardclientGetAutocompleteV2Response {
        val localVarResponse = creditcardclientGetAutocompleteV2WithHttpInfo(sSelector = sSelector, eFilterActive = eFilterActive, sQuery = sQuery, acceptLanguage = acceptLanguage)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CreditcardclientGetAutocompleteV2Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieve Creditcardclients and IDs
     * Get the list of Creditcardclient to be used in a dropdown or autocomplete control.
     * @param sSelector The type of Creditcardclients to return
     * @param eFilterActive Specify which results we want to display. (optional, default to Active)
     * @param sQuery Allow to filter the returned results (optional)
     * @param acceptLanguage  (optional)
     * @return ApiResponse<CreditcardclientGetAutocompleteV2Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun creditcardclientGetAutocompleteV2WithHttpInfo(sSelector: SSelectorCreditcardclientGetAutocompleteV2, eFilterActive: EFilterActiveCreditcardclientGetAutocompleteV2?, sQuery: kotlin.String?, acceptLanguage: HeaderAcceptLanguage?) : ApiResponse<CreditcardclientGetAutocompleteV2Response?> {
        val localVariableConfig = creditcardclientGetAutocompleteV2RequestConfig(sSelector = sSelector, eFilterActive = eFilterActive, sQuery = sQuery, acceptLanguage = acceptLanguage)

        return request<Unit, CreditcardclientGetAutocompleteV2Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation creditcardclientGetAutocompleteV2
     *
     * @param sSelector The type of Creditcardclients to return
     * @param eFilterActive Specify which results we want to display. (optional, default to Active)
     * @param sQuery Allow to filter the returned results (optional)
     * @param acceptLanguage  (optional)
     * @return RequestConfig
     */
    fun creditcardclientGetAutocompleteV2RequestConfig(sSelector: SSelectorCreditcardclientGetAutocompleteV2, eFilterActive: EFilterActiveCreditcardclientGetAutocompleteV2?, sQuery: kotlin.String?, acceptLanguage: HeaderAcceptLanguage?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (eFilterActive != null) {
                    put("eFilterActive", listOf(eFilterActive.value))
                }
                if (sQuery != null) {
                    put("sQuery", listOf(sQuery.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/2/object/creditcardclient/getAutocomplete/{sSelector}".replace("{"+"sSelector"+"}", encodeURIComponent(sSelector.value.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter eOrderBy
     */
     enum class EOrderByCreditcardclientGetListV1(val value: kotlin.String) {
         @Json(name = "pkiCreditcardclientID_ASC") pkiCreditcardclientID_ASC("pkiCreditcardclientID_ASC"),
         @Json(name = "pkiCreditcardclientID_DESC") pkiCreditcardclientID_DESC("pkiCreditcardclientID_DESC"),
         @Json(name = "fkiCreditcarddetailID_ASC") fkiCreditcarddetailID_ASC("fkiCreditcarddetailID_ASC"),
         @Json(name = "fkiCreditcarddetailID_DESC") fkiCreditcarddetailID_DESC("fkiCreditcarddetailID_DESC"),
         @Json(name = "bCreditcardclientrelationIsdefault_ASC") bCreditcardclientrelationIsdefault_ASC("bCreditcardclientrelationIsdefault_ASC"),
         @Json(name = "bCreditcardclientrelationIsdefault_DESC") bCreditcardclientrelationIsdefault_DESC("bCreditcardclientrelationIsdefault_DESC"),
         @Json(name = "sCreditcardclientDescription_ASC") sCreditcardclientDescription_ASC("sCreditcardclientDescription_ASC"),
         @Json(name = "sCreditcardclientDescription_DESC") sCreditcardclientDescription_DESC("sCreditcardclientDescription_DESC"),
         @Json(name = "bCreditcardclientIsactive_ASC") bCreditcardclientIsactive_ASC("bCreditcardclientIsactive_ASC"),
         @Json(name = "bCreditcardclientIsactive_DESC") bCreditcardclientIsactive_DESC("bCreditcardclientIsactive_DESC"),
         @Json(name = "bCreditcardclientAllowedagencypayment_ASC") bCreditcardclientAllowedagencypayment_ASC("bCreditcardclientAllowedagencypayment_ASC"),
         @Json(name = "bCreditcardclientAllowedagencypayment_DESC") bCreditcardclientAllowedagencypayment_DESC("bCreditcardclientAllowedagencypayment_DESC"),
         @Json(name = "bCreditcardclientAllowedroyallepageprotection_ASC") bCreditcardclientAllowedroyallepageprotection_ASC("bCreditcardclientAllowedroyallepageprotection_ASC"),
         @Json(name = "bCreditcardclientAllowedroyallepageprotection_DESC") bCreditcardclientAllowedroyallepageprotection_DESC("bCreditcardclientAllowedroyallepageprotection_DESC"),
         @Json(name = "bCreditcardclientAllowedtranquillit_ASC") bCreditcardclientAllowedtranquillit_ASC("bCreditcardclientAllowedtranquillit_ASC"),
         @Json(name = "bCreditcardclientAllowedtranquillit_DESC") bCreditcardclientAllowedtranquillit_DESC("bCreditcardclientAllowedtranquillit_DESC"),
         @Json(name = "iCreditcarddetailExpirationmonth_ASC") iCreditcarddetailExpirationmonth_ASC("iCreditcarddetailExpirationmonth_ASC"),
         @Json(name = "iCreditcarddetailExpirationmonth_DESC") iCreditcarddetailExpirationmonth_DESC("iCreditcarddetailExpirationmonth_DESC"),
         @Json(name = "iCreditcarddetailExpirationyear_ASC") iCreditcarddetailExpirationyear_ASC("iCreditcarddetailExpirationyear_ASC"),
         @Json(name = "iCreditcarddetailExpirationyear_DESC") iCreditcarddetailExpirationyear_DESC("iCreditcarddetailExpirationyear_DESC")
     }

    /**
     * Retrieve Creditcardclient list
     * 
     * @param eOrderBy Specify how you want the results to be sorted (optional)
     * @param iRowMax  (optional)
     * @param iRowOffset  (optional, default to 0)
     * @param acceptLanguage  (optional)
     * @param sFilter  (optional)
     * @return CreditcardclientGetListV1Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun creditcardclientGetListV1(eOrderBy: EOrderByCreditcardclientGetListV1? = null, iRowMax: kotlin.Int? = null, iRowOffset: kotlin.Int? = 0, acceptLanguage: HeaderAcceptLanguage? = null, sFilter: kotlin.String? = null) : CreditcardclientGetListV1Response {
        val localVarResponse = creditcardclientGetListV1WithHttpInfo(eOrderBy = eOrderBy, iRowMax = iRowMax, iRowOffset = iRowOffset, acceptLanguage = acceptLanguage, sFilter = sFilter)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CreditcardclientGetListV1Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieve Creditcardclient list
     * 
     * @param eOrderBy Specify how you want the results to be sorted (optional)
     * @param iRowMax  (optional)
     * @param iRowOffset  (optional, default to 0)
     * @param acceptLanguage  (optional)
     * @param sFilter  (optional)
     * @return ApiResponse<CreditcardclientGetListV1Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun creditcardclientGetListV1WithHttpInfo(eOrderBy: EOrderByCreditcardclientGetListV1?, iRowMax: kotlin.Int?, iRowOffset: kotlin.Int?, acceptLanguage: HeaderAcceptLanguage?, sFilter: kotlin.String?) : ApiResponse<CreditcardclientGetListV1Response?> {
        val localVariableConfig = creditcardclientGetListV1RequestConfig(eOrderBy = eOrderBy, iRowMax = iRowMax, iRowOffset = iRowOffset, acceptLanguage = acceptLanguage, sFilter = sFilter)

        return request<Unit, CreditcardclientGetListV1Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation creditcardclientGetListV1
     *
     * @param eOrderBy Specify how you want the results to be sorted (optional)
     * @param iRowMax  (optional)
     * @param iRowOffset  (optional, default to 0)
     * @param acceptLanguage  (optional)
     * @param sFilter  (optional)
     * @return RequestConfig
     */
    fun creditcardclientGetListV1RequestConfig(eOrderBy: EOrderByCreditcardclientGetListV1?, iRowMax: kotlin.Int?, iRowOffset: kotlin.Int?, acceptLanguage: HeaderAcceptLanguage?, sFilter: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (eOrderBy != null) {
                    put("eOrderBy", listOf(eOrderBy.value))
                }
                if (iRowMax != null) {
                    put("iRowMax", listOf(iRowMax.toString()))
                }
                if (iRowOffset != null) {
                    put("iRowOffset", listOf(iRowOffset.toString()))
                }
                if (sFilter != null) {
                    put("sFilter", listOf(sFilter.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/1/object/creditcardclient/getList",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Retrieve an existing Creditcardclient
     * 
     * @param pkiCreditcardclientID The unique ID of the Creditcardclient
     * @return CreditcardclientGetObjectV2Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun creditcardclientGetObjectV2(pkiCreditcardclientID: kotlin.Int) : CreditcardclientGetObjectV2Response {
        val localVarResponse = creditcardclientGetObjectV2WithHttpInfo(pkiCreditcardclientID = pkiCreditcardclientID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CreditcardclientGetObjectV2Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieve an existing Creditcardclient
     * 
     * @param pkiCreditcardclientID The unique ID of the Creditcardclient
     * @return ApiResponse<CreditcardclientGetObjectV2Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun creditcardclientGetObjectV2WithHttpInfo(pkiCreditcardclientID: kotlin.Int) : ApiResponse<CreditcardclientGetObjectV2Response?> {
        val localVariableConfig = creditcardclientGetObjectV2RequestConfig(pkiCreditcardclientID = pkiCreditcardclientID)

        return request<Unit, CreditcardclientGetObjectV2Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation creditcardclientGetObjectV2
     *
     * @param pkiCreditcardclientID The unique ID of the Creditcardclient
     * @return RequestConfig
     */
    fun creditcardclientGetObjectV2RequestConfig(pkiCreditcardclientID: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/2/object/creditcardclient/{pkiCreditcardclientID}".replace("{"+"pkiCreditcardclientID"+"}", encodeURIComponent(pkiCreditcardclientID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
