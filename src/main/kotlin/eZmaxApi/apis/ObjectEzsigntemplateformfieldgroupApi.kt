/**
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.8
 * Contact: support-api@ezmax.ca
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package eZmaxApi.apis

import java.io.IOException
import okhttp3.OkHttpClient

import eZmaxApi.models.CommonMinusResponseMinusError
import eZmaxApi.models.EzsigntemplateformfieldgroupMinusCreateObjectMinusV1MinusRequest
import eZmaxApi.models.EzsigntemplateformfieldgroupMinusCreateObjectMinusV1MinusResponse
import eZmaxApi.models.EzsigntemplateformfieldgroupMinusDeleteObjectMinusV1MinusResponse
import eZmaxApi.models.EzsigntemplateformfieldgroupMinusEditObjectMinusV1MinusRequest
import eZmaxApi.models.EzsigntemplateformfieldgroupMinusEditObjectMinusV1MinusResponse
import eZmaxApi.models.EzsigntemplateformfieldgroupMinusGetObjectMinusV1MinusResponse

import com.squareup.moshi.Json

import eZmaxApi.infrastructure.ApiClient
import eZmaxApi.infrastructure.ApiResponse
import eZmaxApi.infrastructure.ClientException
import eZmaxApi.infrastructure.ClientError
import eZmaxApi.infrastructure.ServerException
import eZmaxApi.infrastructure.ServerError
import eZmaxApi.infrastructure.MultiValueMap
import eZmaxApi.infrastructure.PartConfig
import eZmaxApi.infrastructure.RequestConfig
import eZmaxApi.infrastructure.RequestMethod
import eZmaxApi.infrastructure.ResponseType
import eZmaxApi.infrastructure.Success
import eZmaxApi.infrastructure.toMultiValue

class ObjectEzsigntemplateformfieldgroupApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://prod.api.appcluster01.ca-central-1.ezmax.com/rest")
        }
    }

    /**
     * Create a new Ezsigntemplateformfieldgroup
     * The endpoint allows to create one or many elements at once.
     * @param ezsigntemplateformfieldgroupMinusCreateObjectMinusV1MinusRequest 
     * @return EzsigntemplateformfieldgroupMinusCreateObjectMinusV1MinusResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun ezsigntemplateformfieldgroupCreateObjectV1(ezsigntemplateformfieldgroupMinusCreateObjectMinusV1MinusRequest: EzsigntemplateformfieldgroupMinusCreateObjectMinusV1MinusRequest) : EzsigntemplateformfieldgroupMinusCreateObjectMinusV1MinusResponse {
        val localVarResponse = ezsigntemplateformfieldgroupCreateObjectV1WithHttpInfo(ezsigntemplateformfieldgroupMinusCreateObjectMinusV1MinusRequest = ezsigntemplateformfieldgroupMinusCreateObjectMinusV1MinusRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as EzsigntemplateformfieldgroupMinusCreateObjectMinusV1MinusResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Create a new Ezsigntemplateformfieldgroup
     * The endpoint allows to create one or many elements at once.
     * @param ezsigntemplateformfieldgroupMinusCreateObjectMinusV1MinusRequest 
     * @return ApiResponse<EzsigntemplateformfieldgroupMinusCreateObjectMinusV1MinusResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun ezsigntemplateformfieldgroupCreateObjectV1WithHttpInfo(ezsigntemplateformfieldgroupMinusCreateObjectMinusV1MinusRequest: EzsigntemplateformfieldgroupMinusCreateObjectMinusV1MinusRequest) : ApiResponse<EzsigntemplateformfieldgroupMinusCreateObjectMinusV1MinusResponse?> {
        val localVariableConfig = ezsigntemplateformfieldgroupCreateObjectV1RequestConfig(ezsigntemplateformfieldgroupMinusCreateObjectMinusV1MinusRequest = ezsigntemplateformfieldgroupMinusCreateObjectMinusV1MinusRequest)

        return request<EzsigntemplateformfieldgroupMinusCreateObjectMinusV1MinusRequest, EzsigntemplateformfieldgroupMinusCreateObjectMinusV1MinusResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation ezsigntemplateformfieldgroupCreateObjectV1
     *
     * @param ezsigntemplateformfieldgroupMinusCreateObjectMinusV1MinusRequest 
     * @return RequestConfig
     */
    fun ezsigntemplateformfieldgroupCreateObjectV1RequestConfig(ezsigntemplateformfieldgroupMinusCreateObjectMinusV1MinusRequest: EzsigntemplateformfieldgroupMinusCreateObjectMinusV1MinusRequest) : RequestConfig<EzsigntemplateformfieldgroupMinusCreateObjectMinusV1MinusRequest> {
        val localVariableBody = ezsigntemplateformfieldgroupMinusCreateObjectMinusV1MinusRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/1/object/ezsigntemplateformfieldgroup",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Delete an existing Ezsigntemplateformfieldgroup
     * 
     * @param pkiEzsigntemplateformfieldgroupID 
     * @return EzsigntemplateformfieldgroupMinusDeleteObjectMinusV1MinusResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun ezsigntemplateformfieldgroupDeleteObjectV1(pkiEzsigntemplateformfieldgroupID: kotlin.Int) : EzsigntemplateformfieldgroupMinusDeleteObjectMinusV1MinusResponse {
        val localVarResponse = ezsigntemplateformfieldgroupDeleteObjectV1WithHttpInfo(pkiEzsigntemplateformfieldgroupID = pkiEzsigntemplateformfieldgroupID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as EzsigntemplateformfieldgroupMinusDeleteObjectMinusV1MinusResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Delete an existing Ezsigntemplateformfieldgroup
     * 
     * @param pkiEzsigntemplateformfieldgroupID 
     * @return ApiResponse<EzsigntemplateformfieldgroupMinusDeleteObjectMinusV1MinusResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun ezsigntemplateformfieldgroupDeleteObjectV1WithHttpInfo(pkiEzsigntemplateformfieldgroupID: kotlin.Int) : ApiResponse<EzsigntemplateformfieldgroupMinusDeleteObjectMinusV1MinusResponse?> {
        val localVariableConfig = ezsigntemplateformfieldgroupDeleteObjectV1RequestConfig(pkiEzsigntemplateformfieldgroupID = pkiEzsigntemplateformfieldgroupID)

        return request<Unit, EzsigntemplateformfieldgroupMinusDeleteObjectMinusV1MinusResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation ezsigntemplateformfieldgroupDeleteObjectV1
     *
     * @param pkiEzsigntemplateformfieldgroupID 
     * @return RequestConfig
     */
    fun ezsigntemplateformfieldgroupDeleteObjectV1RequestConfig(pkiEzsigntemplateformfieldgroupID: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/1/object/ezsigntemplateformfieldgroup/{pkiEzsigntemplateformfieldgroupID}".replace("{"+"pkiEzsigntemplateformfieldgroupID"+"}", "$pkiEzsigntemplateformfieldgroupID"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Edit an existing Ezsigntemplateformfieldgroup
     * 
     * @param pkiEzsigntemplateformfieldgroupID 
     * @param ezsigntemplateformfieldgroupMinusEditObjectMinusV1MinusRequest 
     * @return EzsigntemplateformfieldgroupMinusEditObjectMinusV1MinusResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun ezsigntemplateformfieldgroupEditObjectV1(pkiEzsigntemplateformfieldgroupID: kotlin.Int, ezsigntemplateformfieldgroupMinusEditObjectMinusV1MinusRequest: EzsigntemplateformfieldgroupMinusEditObjectMinusV1MinusRequest) : EzsigntemplateformfieldgroupMinusEditObjectMinusV1MinusResponse {
        val localVarResponse = ezsigntemplateformfieldgroupEditObjectV1WithHttpInfo(pkiEzsigntemplateformfieldgroupID = pkiEzsigntemplateformfieldgroupID, ezsigntemplateformfieldgroupMinusEditObjectMinusV1MinusRequest = ezsigntemplateformfieldgroupMinusEditObjectMinusV1MinusRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as EzsigntemplateformfieldgroupMinusEditObjectMinusV1MinusResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Edit an existing Ezsigntemplateformfieldgroup
     * 
     * @param pkiEzsigntemplateformfieldgroupID 
     * @param ezsigntemplateformfieldgroupMinusEditObjectMinusV1MinusRequest 
     * @return ApiResponse<EzsigntemplateformfieldgroupMinusEditObjectMinusV1MinusResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun ezsigntemplateformfieldgroupEditObjectV1WithHttpInfo(pkiEzsigntemplateformfieldgroupID: kotlin.Int, ezsigntemplateformfieldgroupMinusEditObjectMinusV1MinusRequest: EzsigntemplateformfieldgroupMinusEditObjectMinusV1MinusRequest) : ApiResponse<EzsigntemplateformfieldgroupMinusEditObjectMinusV1MinusResponse?> {
        val localVariableConfig = ezsigntemplateformfieldgroupEditObjectV1RequestConfig(pkiEzsigntemplateformfieldgroupID = pkiEzsigntemplateformfieldgroupID, ezsigntemplateformfieldgroupMinusEditObjectMinusV1MinusRequest = ezsigntemplateformfieldgroupMinusEditObjectMinusV1MinusRequest)

        return request<EzsigntemplateformfieldgroupMinusEditObjectMinusV1MinusRequest, EzsigntemplateformfieldgroupMinusEditObjectMinusV1MinusResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation ezsigntemplateformfieldgroupEditObjectV1
     *
     * @param pkiEzsigntemplateformfieldgroupID 
     * @param ezsigntemplateformfieldgroupMinusEditObjectMinusV1MinusRequest 
     * @return RequestConfig
     */
    fun ezsigntemplateformfieldgroupEditObjectV1RequestConfig(pkiEzsigntemplateformfieldgroupID: kotlin.Int, ezsigntemplateformfieldgroupMinusEditObjectMinusV1MinusRequest: EzsigntemplateformfieldgroupMinusEditObjectMinusV1MinusRequest) : RequestConfig<EzsigntemplateformfieldgroupMinusEditObjectMinusV1MinusRequest> {
        val localVariableBody = ezsigntemplateformfieldgroupMinusEditObjectMinusV1MinusRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/1/object/ezsigntemplateformfieldgroup/{pkiEzsigntemplateformfieldgroupID}".replace("{"+"pkiEzsigntemplateformfieldgroupID"+"}", "$pkiEzsigntemplateformfieldgroupID"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Retrieve an existing Ezsigntemplateformfieldgroup
     * 
     * @param pkiEzsigntemplateformfieldgroupID 
     * @return EzsigntemplateformfieldgroupMinusGetObjectMinusV1MinusResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun ezsigntemplateformfieldgroupGetObjectV1(pkiEzsigntemplateformfieldgroupID: kotlin.Int) : EzsigntemplateformfieldgroupMinusGetObjectMinusV1MinusResponse {
        val localVarResponse = ezsigntemplateformfieldgroupGetObjectV1WithHttpInfo(pkiEzsigntemplateformfieldgroupID = pkiEzsigntemplateformfieldgroupID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as EzsigntemplateformfieldgroupMinusGetObjectMinusV1MinusResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieve an existing Ezsigntemplateformfieldgroup
     * 
     * @param pkiEzsigntemplateformfieldgroupID 
     * @return ApiResponse<EzsigntemplateformfieldgroupMinusGetObjectMinusV1MinusResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun ezsigntemplateformfieldgroupGetObjectV1WithHttpInfo(pkiEzsigntemplateformfieldgroupID: kotlin.Int) : ApiResponse<EzsigntemplateformfieldgroupMinusGetObjectMinusV1MinusResponse?> {
        val localVariableConfig = ezsigntemplateformfieldgroupGetObjectV1RequestConfig(pkiEzsigntemplateformfieldgroupID = pkiEzsigntemplateformfieldgroupID)

        return request<Unit, EzsigntemplateformfieldgroupMinusGetObjectMinusV1MinusResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation ezsigntemplateformfieldgroupGetObjectV1
     *
     * @param pkiEzsigntemplateformfieldgroupID 
     * @return RequestConfig
     */
    fun ezsigntemplateformfieldgroupGetObjectV1RequestConfig(pkiEzsigntemplateformfieldgroupID: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/1/object/ezsigntemplateformfieldgroup/{pkiEzsigntemplateformfieldgroupID}".replace("{"+"pkiEzsigntemplateformfieldgroupID"+"}", "$pkiEzsigntemplateformfieldgroupID"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

}
