/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package eZmaxApi.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import eZmaxApi.models.CommonMinusResponseMinusError
import eZmaxApi.models.HeaderMinusAcceptMinusLanguage
import eZmaxApi.models.SessionhistoryMinusGetListMinusV1MinusResponse

import com.squareup.moshi.Json

import eZmaxApi.infrastructure.ApiClient
import eZmaxApi.infrastructure.ApiResponse
import eZmaxApi.infrastructure.ClientException
import eZmaxApi.infrastructure.ClientError
import eZmaxApi.infrastructure.ServerException
import eZmaxApi.infrastructure.ServerError
import eZmaxApi.infrastructure.MultiValueMap
import eZmaxApi.infrastructure.PartConfig
import eZmaxApi.infrastructure.RequestConfig
import eZmaxApi.infrastructure.RequestMethod
import eZmaxApi.infrastructure.ResponseType
import eZmaxApi.infrastructure.Success
import eZmaxApi.infrastructure.toMultiValue

class ObjectSessionhistoryApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://prod.api.appcluster01.ca-central-1.ezmax.com/rest")
        }
    }

    /**
     * enum for parameter eOrderBy
     */
     enum class EOrderBy_sessionhistoryGetListV1(val value: kotlin.String) {
         @Json(name = "pkiSessionhistoryID_ASC") pkiSessionhistoryID_ASC("pkiSessionhistoryID_ASC"),
         @Json(name = "pkiSessionhistoryID_DESC") pkiSessionhistoryID_DESC("pkiSessionhistoryID_DESC"),
         @Json(name = "fkiComputerID_ASC") fkiComputerID_ASC("fkiComputerID_ASC"),
         @Json(name = "fkiComputerID_DESC") fkiComputerID_DESC("fkiComputerID_DESC"),
         @Json(name = "fkiUserID_ASC") fkiUserID_ASC("fkiUserID_ASC"),
         @Json(name = "fkiUserID_DESC") fkiUserID_DESC("fkiUserID_DESC"),
         @Json(name = "dtSessionhistoryFirsthit_ASC") dtSessionhistoryFirsthit_ASC("dtSessionhistoryFirsthit_ASC"),
         @Json(name = "dtSessionhistoryFirsthit_DESC") dtSessionhistoryFirsthit_DESC("dtSessionhistoryFirsthit_DESC"),
         @Json(name = "dtSessionhistoryLasthit_ASC") dtSessionhistoryLasthit_ASC("dtSessionhistoryLasthit_ASC"),
         @Json(name = "dtSessionhistoryLasthit_DESC") dtSessionhistoryLasthit_DESC("dtSessionhistoryLasthit_DESC"),
         @Json(name = "eSessionhistoryEndby_ASC") eSessionhistoryEndby_ASC("eSessionhistoryEndby_ASC"),
         @Json(name = "eSessionhistoryEndby_DESC") eSessionhistoryEndby_DESC("eSessionhistoryEndby_DESC"),
         @Json(name = "sComputerDescription_ASC") sComputerDescription_ASC("sComputerDescription_ASC"),
         @Json(name = "sComputerDescription_DESC") sComputerDescription_DESC("sComputerDescription_DESC"),
         @Json(name = "sSessionhistoryDuration_ASC") sSessionhistoryDuration_ASC("sSessionhistoryDuration_ASC"),
         @Json(name = "sSessionhistoryDuration_DESC") sSessionhistoryDuration_DESC("sSessionhistoryDuration_DESC"),
         @Json(name = "sSessionhistoryIP_ASC") sSessionhistoryIP_ASC("sSessionhistoryIP_ASC"),
         @Json(name = "sSessionhistoryIP_DESC") sSessionhistoryIP_DESC("sSessionhistoryIP_DESC"),
         @Json(name = "sUserLoginname_ASC") sUserLoginname_ASC("sUserLoginname_ASC"),
         @Json(name = "sUserLoginname_DESC") sUserLoginname_DESC("sUserLoginname_DESC")
     }

    /**
     * Retrieve Sessionhistory list
     * 
     * @param eOrderBy Specify how you want the results to be sorted (optional)
     * @param iRowMax  (optional, default to 10000)
     * @param iRowOffset  (optional, default to 0)
     * @param acceptLanguage  (optional)
     * @param sFilter  (optional)
     * @return SessionhistoryMinusGetListMinusV1MinusResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun sessionhistoryGetListV1(eOrderBy: EOrderBy_sessionhistoryGetListV1? = null, iRowMax: kotlin.Int? = 10000, iRowOffset: kotlin.Int? = 0, acceptLanguage: HeaderMinusAcceptMinusLanguage? = null, sFilter: kotlin.String? = null) : SessionhistoryMinusGetListMinusV1MinusResponse {
        val localVarResponse = sessionhistoryGetListV1WithHttpInfo(eOrderBy = eOrderBy, iRowMax = iRowMax, iRowOffset = iRowOffset, acceptLanguage = acceptLanguage, sFilter = sFilter)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as SessionhistoryMinusGetListMinusV1MinusResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieve Sessionhistory list
     * 
     * @param eOrderBy Specify how you want the results to be sorted (optional)
     * @param iRowMax  (optional, default to 10000)
     * @param iRowOffset  (optional, default to 0)
     * @param acceptLanguage  (optional)
     * @param sFilter  (optional)
     * @return ApiResponse<SessionhistoryMinusGetListMinusV1MinusResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun sessionhistoryGetListV1WithHttpInfo(eOrderBy: EOrderBy_sessionhistoryGetListV1?, iRowMax: kotlin.Int?, iRowOffset: kotlin.Int?, acceptLanguage: HeaderMinusAcceptMinusLanguage?, sFilter: kotlin.String?) : ApiResponse<SessionhistoryMinusGetListMinusV1MinusResponse?> {
        val localVariableConfig = sessionhistoryGetListV1RequestConfig(eOrderBy = eOrderBy, iRowMax = iRowMax, iRowOffset = iRowOffset, acceptLanguage = acceptLanguage, sFilter = sFilter)

        return request<Unit, SessionhistoryMinusGetListMinusV1MinusResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation sessionhistoryGetListV1
     *
     * @param eOrderBy Specify how you want the results to be sorted (optional)
     * @param iRowMax  (optional, default to 10000)
     * @param iRowOffset  (optional, default to 0)
     * @param acceptLanguage  (optional)
     * @param sFilter  (optional)
     * @return RequestConfig
     */
    fun sessionhistoryGetListV1RequestConfig(eOrderBy: EOrderBy_sessionhistoryGetListV1?, iRowMax: kotlin.Int?, iRowOffset: kotlin.Int?, acceptLanguage: HeaderMinusAcceptMinusLanguage?, sFilter: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (eOrderBy != null) {
                    put("eOrderBy", listOf(eOrderBy.toString()))
                }
                if (iRowMax != null) {
                    put("iRowMax", listOf(iRowMax.toString()))
                }
                if (iRowOffset != null) {
                    put("iRowOffset", listOf(iRowOffset.toString()))
                }
                if (sFilter != null) {
                    put("sFilter", listOf(sFilter.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/1/object/sessionhistory/getList",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
