/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package eZmaxApi.apis

import java.io.IOException
import okhttp3.Call
import okhttp3.HttpUrl

import eZmaxApi.models.CommonResponseError
import eZmaxApi.models.CorsCreateObjectV1Request
import eZmaxApi.models.CorsCreateObjectV1Response
import eZmaxApi.models.CorsDeleteObjectV1Response
import eZmaxApi.models.CorsEditObjectV1Request
import eZmaxApi.models.CorsEditObjectV1Response
import eZmaxApi.models.CorsGetObjectV2Response

import com.squareup.moshi.Json

import eZmaxApi.infrastructure.ApiClient
import eZmaxApi.infrastructure.ApiResponse
import eZmaxApi.infrastructure.ClientException
import eZmaxApi.infrastructure.ClientError
import eZmaxApi.infrastructure.ServerException
import eZmaxApi.infrastructure.ServerError
import eZmaxApi.infrastructure.MultiValueMap
import eZmaxApi.infrastructure.PartConfig
import eZmaxApi.infrastructure.RequestConfig
import eZmaxApi.infrastructure.RequestMethod
import eZmaxApi.infrastructure.ResponseType
import eZmaxApi.infrastructure.Success
import eZmaxApi.infrastructure.toMultiValue

class ObjectCorsApi(basePath: kotlin.String = defaultBasePath, client: Call.Factory = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://prod.api.appcluster01.ca-central-1.ezmax.com/rest")
        }
    }

    /**
     * POST /1/object/cors
     * Create a new Cors
     * The endpoint allows to create one or many elements at once.
     * @param corsCreateObjectV1Request 
     * @return CorsCreateObjectV1Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun corsCreateObjectV1(corsCreateObjectV1Request: CorsCreateObjectV1Request) : CorsCreateObjectV1Response {
        val localVarResponse = corsCreateObjectV1WithHttpInfo(corsCreateObjectV1Request = corsCreateObjectV1Request)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CorsCreateObjectV1Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /1/object/cors
     * Create a new Cors
     * The endpoint allows to create one or many elements at once.
     * @param corsCreateObjectV1Request 
     * @return ApiResponse<CorsCreateObjectV1Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun corsCreateObjectV1WithHttpInfo(corsCreateObjectV1Request: CorsCreateObjectV1Request) : ApiResponse<CorsCreateObjectV1Response?> {
        val localVariableConfig = corsCreateObjectV1RequestConfig(corsCreateObjectV1Request = corsCreateObjectV1Request)

        return request<CorsCreateObjectV1Request, CorsCreateObjectV1Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation corsCreateObjectV1
     *
     * @param corsCreateObjectV1Request 
     * @return RequestConfig
     */
    fun corsCreateObjectV1RequestConfig(corsCreateObjectV1Request: CorsCreateObjectV1Request) : RequestConfig<CorsCreateObjectV1Request> {
        val localVariableBody = corsCreateObjectV1Request
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/1/object/cors",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * DELETE /1/object/cors/{pkiCorsID}
     * Delete an existing Cors
     * 
     * @param pkiCorsID The unique ID of the Cors
     * @return CorsDeleteObjectV1Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun corsDeleteObjectV1(pkiCorsID: kotlin.Int) : CorsDeleteObjectV1Response {
        val localVarResponse = corsDeleteObjectV1WithHttpInfo(pkiCorsID = pkiCorsID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CorsDeleteObjectV1Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * DELETE /1/object/cors/{pkiCorsID}
     * Delete an existing Cors
     * 
     * @param pkiCorsID The unique ID of the Cors
     * @return ApiResponse<CorsDeleteObjectV1Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun corsDeleteObjectV1WithHttpInfo(pkiCorsID: kotlin.Int) : ApiResponse<CorsDeleteObjectV1Response?> {
        val localVariableConfig = corsDeleteObjectV1RequestConfig(pkiCorsID = pkiCorsID)

        return request<Unit, CorsDeleteObjectV1Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation corsDeleteObjectV1
     *
     * @param pkiCorsID The unique ID of the Cors
     * @return RequestConfig
     */
    fun corsDeleteObjectV1RequestConfig(pkiCorsID: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/1/object/cors/{pkiCorsID}".replace("{"+"pkiCorsID"+"}", encodeURIComponent(pkiCorsID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * PUT /1/object/cors/{pkiCorsID}
     * Edit an existing Cors
     * 
     * @param pkiCorsID The unique ID of the Cors
     * @param corsEditObjectV1Request 
     * @return CorsEditObjectV1Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun corsEditObjectV1(pkiCorsID: kotlin.Int, corsEditObjectV1Request: CorsEditObjectV1Request) : CorsEditObjectV1Response {
        val localVarResponse = corsEditObjectV1WithHttpInfo(pkiCorsID = pkiCorsID, corsEditObjectV1Request = corsEditObjectV1Request)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CorsEditObjectV1Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * PUT /1/object/cors/{pkiCorsID}
     * Edit an existing Cors
     * 
     * @param pkiCorsID The unique ID of the Cors
     * @param corsEditObjectV1Request 
     * @return ApiResponse<CorsEditObjectV1Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun corsEditObjectV1WithHttpInfo(pkiCorsID: kotlin.Int, corsEditObjectV1Request: CorsEditObjectV1Request) : ApiResponse<CorsEditObjectV1Response?> {
        val localVariableConfig = corsEditObjectV1RequestConfig(pkiCorsID = pkiCorsID, corsEditObjectV1Request = corsEditObjectV1Request)

        return request<CorsEditObjectV1Request, CorsEditObjectV1Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation corsEditObjectV1
     *
     * @param pkiCorsID The unique ID of the Cors
     * @param corsEditObjectV1Request 
     * @return RequestConfig
     */
    fun corsEditObjectV1RequestConfig(pkiCorsID: kotlin.Int, corsEditObjectV1Request: CorsEditObjectV1Request) : RequestConfig<CorsEditObjectV1Request> {
        val localVariableBody = corsEditObjectV1Request
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/1/object/cors/{pkiCorsID}".replace("{"+"pkiCorsID"+"}", encodeURIComponent(pkiCorsID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * GET /2/object/cors/{pkiCorsID}
     * Retrieve an existing Cors
     * 
     * @param pkiCorsID The unique ID of the Cors
     * @return CorsGetObjectV2Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun corsGetObjectV2(pkiCorsID: kotlin.Int) : CorsGetObjectV2Response {
        val localVarResponse = corsGetObjectV2WithHttpInfo(pkiCorsID = pkiCorsID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CorsGetObjectV2Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /2/object/cors/{pkiCorsID}
     * Retrieve an existing Cors
     * 
     * @param pkiCorsID The unique ID of the Cors
     * @return ApiResponse<CorsGetObjectV2Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun corsGetObjectV2WithHttpInfo(pkiCorsID: kotlin.Int) : ApiResponse<CorsGetObjectV2Response?> {
        val localVariableConfig = corsGetObjectV2RequestConfig(pkiCorsID = pkiCorsID)

        return request<Unit, CorsGetObjectV2Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation corsGetObjectV2
     *
     * @param pkiCorsID The unique ID of the Cors
     * @return RequestConfig
     */
    fun corsGetObjectV2RequestConfig(pkiCorsID: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/2/object/cors/{pkiCorsID}".replace("{"+"pkiCorsID"+"}", encodeURIComponent(pkiCorsID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
