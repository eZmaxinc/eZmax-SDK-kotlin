/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package eZmaxApi.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import eZmaxApi.models.CommonMinusResponseMinusError
import eZmaxApi.models.CorsMinusCreateObjectMinusV1MinusRequest
import eZmaxApi.models.CorsMinusCreateObjectMinusV1MinusResponse
import eZmaxApi.models.CorsMinusDeleteObjectMinusV1MinusResponse
import eZmaxApi.models.CorsMinusEditObjectMinusV1MinusRequest
import eZmaxApi.models.CorsMinusEditObjectMinusV1MinusResponse
import eZmaxApi.models.CorsMinusGetObjectMinusV2MinusResponse

import com.squareup.moshi.Json

import eZmaxApi.infrastructure.ApiClient
import eZmaxApi.infrastructure.ApiResponse
import eZmaxApi.infrastructure.ClientException
import eZmaxApi.infrastructure.ClientError
import eZmaxApi.infrastructure.ServerException
import eZmaxApi.infrastructure.ServerError
import eZmaxApi.infrastructure.MultiValueMap
import eZmaxApi.infrastructure.PartConfig
import eZmaxApi.infrastructure.RequestConfig
import eZmaxApi.infrastructure.RequestMethod
import eZmaxApi.infrastructure.ResponseType
import eZmaxApi.infrastructure.Success
import eZmaxApi.infrastructure.toMultiValue

class ObjectCorsApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://prod.api.appcluster01.ca-central-1.ezmax.com/rest")
        }
    }

    /**
     * Create a new Cors
     * The endpoint allows to create one or many elements at once.
     * @param corsMinusCreateObjectMinusV1MinusRequest 
     * @return CorsMinusCreateObjectMinusV1MinusResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun corsCreateObjectV1(corsMinusCreateObjectMinusV1MinusRequest: CorsMinusCreateObjectMinusV1MinusRequest) : CorsMinusCreateObjectMinusV1MinusResponse {
        val localVarResponse = corsCreateObjectV1WithHttpInfo(corsMinusCreateObjectMinusV1MinusRequest = corsMinusCreateObjectMinusV1MinusRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CorsMinusCreateObjectMinusV1MinusResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Create a new Cors
     * The endpoint allows to create one or many elements at once.
     * @param corsMinusCreateObjectMinusV1MinusRequest 
     * @return ApiResponse<CorsMinusCreateObjectMinusV1MinusResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun corsCreateObjectV1WithHttpInfo(corsMinusCreateObjectMinusV1MinusRequest: CorsMinusCreateObjectMinusV1MinusRequest) : ApiResponse<CorsMinusCreateObjectMinusV1MinusResponse?> {
        val localVariableConfig = corsCreateObjectV1RequestConfig(corsMinusCreateObjectMinusV1MinusRequest = corsMinusCreateObjectMinusV1MinusRequest)

        return request<CorsMinusCreateObjectMinusV1MinusRequest, CorsMinusCreateObjectMinusV1MinusResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation corsCreateObjectV1
     *
     * @param corsMinusCreateObjectMinusV1MinusRequest 
     * @return RequestConfig
     */
    fun corsCreateObjectV1RequestConfig(corsMinusCreateObjectMinusV1MinusRequest: CorsMinusCreateObjectMinusV1MinusRequest) : RequestConfig<CorsMinusCreateObjectMinusV1MinusRequest> {
        val localVariableBody = corsMinusCreateObjectMinusV1MinusRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/1/object/cors",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Delete an existing Cors
     * 
     * @param pkiCorsID The unique ID of the Cors
     * @return CorsMinusDeleteObjectMinusV1MinusResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun corsDeleteObjectV1(pkiCorsID: kotlin.Int) : CorsMinusDeleteObjectMinusV1MinusResponse {
        val localVarResponse = corsDeleteObjectV1WithHttpInfo(pkiCorsID = pkiCorsID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CorsMinusDeleteObjectMinusV1MinusResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Delete an existing Cors
     * 
     * @param pkiCorsID The unique ID of the Cors
     * @return ApiResponse<CorsMinusDeleteObjectMinusV1MinusResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun corsDeleteObjectV1WithHttpInfo(pkiCorsID: kotlin.Int) : ApiResponse<CorsMinusDeleteObjectMinusV1MinusResponse?> {
        val localVariableConfig = corsDeleteObjectV1RequestConfig(pkiCorsID = pkiCorsID)

        return request<Unit, CorsMinusDeleteObjectMinusV1MinusResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation corsDeleteObjectV1
     *
     * @param pkiCorsID The unique ID of the Cors
     * @return RequestConfig
     */
    fun corsDeleteObjectV1RequestConfig(pkiCorsID: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/1/object/cors/{pkiCorsID}".replace("{"+"pkiCorsID"+"}", encodeURIComponent(pkiCorsID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Edit an existing Cors
     * 
     * @param pkiCorsID The unique ID of the Cors
     * @param corsMinusEditObjectMinusV1MinusRequest 
     * @return CorsMinusEditObjectMinusV1MinusResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun corsEditObjectV1(pkiCorsID: kotlin.Int, corsMinusEditObjectMinusV1MinusRequest: CorsMinusEditObjectMinusV1MinusRequest) : CorsMinusEditObjectMinusV1MinusResponse {
        val localVarResponse = corsEditObjectV1WithHttpInfo(pkiCorsID = pkiCorsID, corsMinusEditObjectMinusV1MinusRequest = corsMinusEditObjectMinusV1MinusRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CorsMinusEditObjectMinusV1MinusResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Edit an existing Cors
     * 
     * @param pkiCorsID The unique ID of the Cors
     * @param corsMinusEditObjectMinusV1MinusRequest 
     * @return ApiResponse<CorsMinusEditObjectMinusV1MinusResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun corsEditObjectV1WithHttpInfo(pkiCorsID: kotlin.Int, corsMinusEditObjectMinusV1MinusRequest: CorsMinusEditObjectMinusV1MinusRequest) : ApiResponse<CorsMinusEditObjectMinusV1MinusResponse?> {
        val localVariableConfig = corsEditObjectV1RequestConfig(pkiCorsID = pkiCorsID, corsMinusEditObjectMinusV1MinusRequest = corsMinusEditObjectMinusV1MinusRequest)

        return request<CorsMinusEditObjectMinusV1MinusRequest, CorsMinusEditObjectMinusV1MinusResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation corsEditObjectV1
     *
     * @param pkiCorsID The unique ID of the Cors
     * @param corsMinusEditObjectMinusV1MinusRequest 
     * @return RequestConfig
     */
    fun corsEditObjectV1RequestConfig(pkiCorsID: kotlin.Int, corsMinusEditObjectMinusV1MinusRequest: CorsMinusEditObjectMinusV1MinusRequest) : RequestConfig<CorsMinusEditObjectMinusV1MinusRequest> {
        val localVariableBody = corsMinusEditObjectMinusV1MinusRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/1/object/cors/{pkiCorsID}".replace("{"+"pkiCorsID"+"}", encodeURIComponent(pkiCorsID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Retrieve an existing Cors
     * 
     * @param pkiCorsID The unique ID of the Cors
     * @return CorsMinusGetObjectMinusV2MinusResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun corsGetObjectV2(pkiCorsID: kotlin.Int) : CorsMinusGetObjectMinusV2MinusResponse {
        val localVarResponse = corsGetObjectV2WithHttpInfo(pkiCorsID = pkiCorsID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CorsMinusGetObjectMinusV2MinusResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieve an existing Cors
     * 
     * @param pkiCorsID The unique ID of the Cors
     * @return ApiResponse<CorsMinusGetObjectMinusV2MinusResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun corsGetObjectV2WithHttpInfo(pkiCorsID: kotlin.Int) : ApiResponse<CorsMinusGetObjectMinusV2MinusResponse?> {
        val localVariableConfig = corsGetObjectV2RequestConfig(pkiCorsID = pkiCorsID)

        return request<Unit, CorsMinusGetObjectMinusV2MinusResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation corsGetObjectV2
     *
     * @param pkiCorsID The unique ID of the Cors
     * @return RequestConfig
     */
    fun corsGetObjectV2RequestConfig(pkiCorsID: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/2/object/cors/{pkiCorsID}".replace("{"+"pkiCorsID"+"}", encodeURIComponent(pkiCorsID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
