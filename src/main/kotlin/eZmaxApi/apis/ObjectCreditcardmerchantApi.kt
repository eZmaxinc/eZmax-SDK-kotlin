/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package eZmaxApi.apis

import java.io.IOException
import okhttp3.Call
import okhttp3.HttpUrl

import eZmaxApi.models.CommonResponseError
import eZmaxApi.models.CreditcardmerchantCreateObjectV1Request
import eZmaxApi.models.CreditcardmerchantCreateObjectV1Response
import eZmaxApi.models.CreditcardmerchantDeleteObjectV1Response
import eZmaxApi.models.CreditcardmerchantEditObjectV1Request
import eZmaxApi.models.CreditcardmerchantEditObjectV1Response
import eZmaxApi.models.CreditcardmerchantGetAutocompleteV2Response
import eZmaxApi.models.CreditcardmerchantGetListV1Response
import eZmaxApi.models.CreditcardmerchantGetObjectV2Response
import eZmaxApi.models.HeaderAcceptLanguage

import com.squareup.moshi.Json

import eZmaxApi.infrastructure.ApiClient
import eZmaxApi.infrastructure.ApiResponse
import eZmaxApi.infrastructure.ClientException
import eZmaxApi.infrastructure.ClientError
import eZmaxApi.infrastructure.ServerException
import eZmaxApi.infrastructure.ServerError
import eZmaxApi.infrastructure.MultiValueMap
import eZmaxApi.infrastructure.PartConfig
import eZmaxApi.infrastructure.RequestConfig
import eZmaxApi.infrastructure.RequestMethod
import eZmaxApi.infrastructure.ResponseType
import eZmaxApi.infrastructure.Success
import eZmaxApi.infrastructure.toMultiValue

class ObjectCreditcardmerchantApi(basePath: kotlin.String = defaultBasePath, client: Call.Factory = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://prod.api.appcluster01.ca-central-1.ezmax.com/rest")
        }
    }

    /**
     * Create a new Creditcardmerchant
     * The endpoint allows to create one or many elements at once.
     * @param creditcardmerchantCreateObjectV1Request 
     * @return CreditcardmerchantCreateObjectV1Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun creditcardmerchantCreateObjectV1(creditcardmerchantCreateObjectV1Request: CreditcardmerchantCreateObjectV1Request) : CreditcardmerchantCreateObjectV1Response {
        val localVarResponse = creditcardmerchantCreateObjectV1WithHttpInfo(creditcardmerchantCreateObjectV1Request = creditcardmerchantCreateObjectV1Request)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CreditcardmerchantCreateObjectV1Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Create a new Creditcardmerchant
     * The endpoint allows to create one or many elements at once.
     * @param creditcardmerchantCreateObjectV1Request 
     * @return ApiResponse<CreditcardmerchantCreateObjectV1Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun creditcardmerchantCreateObjectV1WithHttpInfo(creditcardmerchantCreateObjectV1Request: CreditcardmerchantCreateObjectV1Request) : ApiResponse<CreditcardmerchantCreateObjectV1Response?> {
        val localVariableConfig = creditcardmerchantCreateObjectV1RequestConfig(creditcardmerchantCreateObjectV1Request = creditcardmerchantCreateObjectV1Request)

        return request<CreditcardmerchantCreateObjectV1Request, CreditcardmerchantCreateObjectV1Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation creditcardmerchantCreateObjectV1
     *
     * @param creditcardmerchantCreateObjectV1Request 
     * @return RequestConfig
     */
    fun creditcardmerchantCreateObjectV1RequestConfig(creditcardmerchantCreateObjectV1Request: CreditcardmerchantCreateObjectV1Request) : RequestConfig<CreditcardmerchantCreateObjectV1Request> {
        val localVariableBody = creditcardmerchantCreateObjectV1Request
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/1/object/creditcardmerchant",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Delete an existing Creditcardmerchant
     * 
     * @param pkiCreditcardmerchantID The unique ID of the Creditcardmerchant
     * @return CreditcardmerchantDeleteObjectV1Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun creditcardmerchantDeleteObjectV1(pkiCreditcardmerchantID: kotlin.Int) : CreditcardmerchantDeleteObjectV1Response {
        val localVarResponse = creditcardmerchantDeleteObjectV1WithHttpInfo(pkiCreditcardmerchantID = pkiCreditcardmerchantID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CreditcardmerchantDeleteObjectV1Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Delete an existing Creditcardmerchant
     * 
     * @param pkiCreditcardmerchantID The unique ID of the Creditcardmerchant
     * @return ApiResponse<CreditcardmerchantDeleteObjectV1Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun creditcardmerchantDeleteObjectV1WithHttpInfo(pkiCreditcardmerchantID: kotlin.Int) : ApiResponse<CreditcardmerchantDeleteObjectV1Response?> {
        val localVariableConfig = creditcardmerchantDeleteObjectV1RequestConfig(pkiCreditcardmerchantID = pkiCreditcardmerchantID)

        return request<Unit, CreditcardmerchantDeleteObjectV1Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation creditcardmerchantDeleteObjectV1
     *
     * @param pkiCreditcardmerchantID The unique ID of the Creditcardmerchant
     * @return RequestConfig
     */
    fun creditcardmerchantDeleteObjectV1RequestConfig(pkiCreditcardmerchantID: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/1/object/creditcardmerchant/{pkiCreditcardmerchantID}".replace("{"+"pkiCreditcardmerchantID"+"}", encodeURIComponent(pkiCreditcardmerchantID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Edit an existing Creditcardmerchant
     * 
     * @param pkiCreditcardmerchantID The unique ID of the Creditcardmerchant
     * @param creditcardmerchantEditObjectV1Request 
     * @return CreditcardmerchantEditObjectV1Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun creditcardmerchantEditObjectV1(pkiCreditcardmerchantID: kotlin.Int, creditcardmerchantEditObjectV1Request: CreditcardmerchantEditObjectV1Request) : CreditcardmerchantEditObjectV1Response {
        val localVarResponse = creditcardmerchantEditObjectV1WithHttpInfo(pkiCreditcardmerchantID = pkiCreditcardmerchantID, creditcardmerchantEditObjectV1Request = creditcardmerchantEditObjectV1Request)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CreditcardmerchantEditObjectV1Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Edit an existing Creditcardmerchant
     * 
     * @param pkiCreditcardmerchantID The unique ID of the Creditcardmerchant
     * @param creditcardmerchantEditObjectV1Request 
     * @return ApiResponse<CreditcardmerchantEditObjectV1Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun creditcardmerchantEditObjectV1WithHttpInfo(pkiCreditcardmerchantID: kotlin.Int, creditcardmerchantEditObjectV1Request: CreditcardmerchantEditObjectV1Request) : ApiResponse<CreditcardmerchantEditObjectV1Response?> {
        val localVariableConfig = creditcardmerchantEditObjectV1RequestConfig(pkiCreditcardmerchantID = pkiCreditcardmerchantID, creditcardmerchantEditObjectV1Request = creditcardmerchantEditObjectV1Request)

        return request<CreditcardmerchantEditObjectV1Request, CreditcardmerchantEditObjectV1Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation creditcardmerchantEditObjectV1
     *
     * @param pkiCreditcardmerchantID The unique ID of the Creditcardmerchant
     * @param creditcardmerchantEditObjectV1Request 
     * @return RequestConfig
     */
    fun creditcardmerchantEditObjectV1RequestConfig(pkiCreditcardmerchantID: kotlin.Int, creditcardmerchantEditObjectV1Request: CreditcardmerchantEditObjectV1Request) : RequestConfig<CreditcardmerchantEditObjectV1Request> {
        val localVariableBody = creditcardmerchantEditObjectV1Request
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/1/object/creditcardmerchant/{pkiCreditcardmerchantID}".replace("{"+"pkiCreditcardmerchantID"+"}", encodeURIComponent(pkiCreditcardmerchantID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter sSelector
     */
     enum class SSelectorCreditcardmerchantGetAutocompleteV2(val value: kotlin.String) {
         @Json(name = "All") All("All");

        /**
         * Override [toString()] to avoid using the enum variable name as the value, and instead use
         * the actual value defined in the API spec file.
         *
         * This solves a problem when the variable name and its value are different, and ensures that
         * the client sends the correct enum values to the server always.
         */
        override fun toString(): kotlin.String = "$value"
     }

    /**
     * enum for parameter eFilterActive
     */
     enum class EFilterActiveCreditcardmerchantGetAutocompleteV2(val value: kotlin.String) {
         @Json(name = "All") All("All"),
         @Json(name = "Active") Active("Active"),
         @Json(name = "Inactive") Inactive("Inactive");

        /**
         * Override [toString()] to avoid using the enum variable name as the value, and instead use
         * the actual value defined in the API spec file.
         *
         * This solves a problem when the variable name and its value are different, and ensures that
         * the client sends the correct enum values to the server always.
         */
        override fun toString(): kotlin.String = "$value"
     }

    /**
     * Retrieve Creditcardmerchants and IDs
     * Get the list of Creditcardmerchant to be used in a dropdown or autocomplete control.
     * @param sSelector The type of Creditcardmerchants to return
     * @param eFilterActive Specify which results we want to display. (optional, default to Active)
     * @param sQuery Allow to filter the returned results (optional)
     * @param acceptLanguage  (optional)
     * @return CreditcardmerchantGetAutocompleteV2Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun creditcardmerchantGetAutocompleteV2(sSelector: SSelectorCreditcardmerchantGetAutocompleteV2, eFilterActive: EFilterActiveCreditcardmerchantGetAutocompleteV2? = EFilterActiveCreditcardmerchantGetAutocompleteV2.Active, sQuery: kotlin.String? = null, acceptLanguage: HeaderAcceptLanguage? = null) : CreditcardmerchantGetAutocompleteV2Response {
        val localVarResponse = creditcardmerchantGetAutocompleteV2WithHttpInfo(sSelector = sSelector, eFilterActive = eFilterActive, sQuery = sQuery, acceptLanguage = acceptLanguage)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CreditcardmerchantGetAutocompleteV2Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieve Creditcardmerchants and IDs
     * Get the list of Creditcardmerchant to be used in a dropdown or autocomplete control.
     * @param sSelector The type of Creditcardmerchants to return
     * @param eFilterActive Specify which results we want to display. (optional, default to Active)
     * @param sQuery Allow to filter the returned results (optional)
     * @param acceptLanguage  (optional)
     * @return ApiResponse<CreditcardmerchantGetAutocompleteV2Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun creditcardmerchantGetAutocompleteV2WithHttpInfo(sSelector: SSelectorCreditcardmerchantGetAutocompleteV2, eFilterActive: EFilterActiveCreditcardmerchantGetAutocompleteV2?, sQuery: kotlin.String?, acceptLanguage: HeaderAcceptLanguage?) : ApiResponse<CreditcardmerchantGetAutocompleteV2Response?> {
        val localVariableConfig = creditcardmerchantGetAutocompleteV2RequestConfig(sSelector = sSelector, eFilterActive = eFilterActive, sQuery = sQuery, acceptLanguage = acceptLanguage)

        return request<Unit, CreditcardmerchantGetAutocompleteV2Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation creditcardmerchantGetAutocompleteV2
     *
     * @param sSelector The type of Creditcardmerchants to return
     * @param eFilterActive Specify which results we want to display. (optional, default to Active)
     * @param sQuery Allow to filter the returned results (optional)
     * @param acceptLanguage  (optional)
     * @return RequestConfig
     */
    fun creditcardmerchantGetAutocompleteV2RequestConfig(sSelector: SSelectorCreditcardmerchantGetAutocompleteV2, eFilterActive: EFilterActiveCreditcardmerchantGetAutocompleteV2?, sQuery: kotlin.String?, acceptLanguage: HeaderAcceptLanguage?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (eFilterActive != null) {
                    put("eFilterActive", listOf(eFilterActive.value))
                }
                if (sQuery != null) {
                    put("sQuery", listOf(sQuery.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/2/object/creditcardmerchant/getAutocomplete/{sSelector}".replace("{"+"sSelector"+"}", encodeURIComponent(sSelector.value.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter eOrderBy
     */
     enum class EOrderByCreditcardmerchantGetListV1(val value: kotlin.String) {
         @Json(name = "pkiCreditcardmerchantID_ASC") pkiCreditcardmerchantID_ASC("pkiCreditcardmerchantID_ASC"),
         @Json(name = "pkiCreditcardmerchantID_DESC") pkiCreditcardmerchantID_DESC("pkiCreditcardmerchantID_DESC"),
         @Json(name = "fkiBankaccountID_ASC") fkiBankaccountID_ASC("fkiBankaccountID_ASC"),
         @Json(name = "fkiBankaccountID_DESC") fkiBankaccountID_DESC("fkiBankaccountID_DESC"),
         @Json(name = "fkiLanguageID_ASC") fkiLanguageID_ASC("fkiLanguageID_ASC"),
         @Json(name = "fkiLanguageID_DESC") fkiLanguageID_DESC("fkiLanguageID_DESC"),
         @Json(name = "bCreditcardmerchantDenyvisa_ASC") bCreditcardmerchantDenyvisa_ASC("bCreditcardmerchantDenyvisa_ASC"),
         @Json(name = "bCreditcardmerchantDenyvisa_DESC") bCreditcardmerchantDenyvisa_DESC("bCreditcardmerchantDenyvisa_DESC"),
         @Json(name = "bCreditcardmerchantDenymastercard_ASC") bCreditcardmerchantDenymastercard_ASC("bCreditcardmerchantDenymastercard_ASC"),
         @Json(name = "bCreditcardmerchantDenymastercard_DESC") bCreditcardmerchantDenymastercard_DESC("bCreditcardmerchantDenymastercard_DESC"),
         @Json(name = "bCreditcardmerchantDenyamex_ASC") bCreditcardmerchantDenyamex_ASC("bCreditcardmerchantDenyamex_ASC"),
         @Json(name = "bCreditcardmerchantDenyamex_DESC") bCreditcardmerchantDenyamex_DESC("bCreditcardmerchantDenyamex_DESC"),
         @Json(name = "bCreditcardmerchantIsactive_ASC") bCreditcardmerchantIsactive_ASC("bCreditcardmerchantIsactive_ASC"),
         @Json(name = "bCreditcardmerchantIsactive_DESC") bCreditcardmerchantIsactive_DESC("bCreditcardmerchantIsactive_DESC"),
         @Json(name = "sCreditcardmerchantDescription_ASC") sCreditcardmerchantDescription_ASC("sCreditcardmerchantDescription_ASC"),
         @Json(name = "sCreditcardmerchantDescription_DESC") sCreditcardmerchantDescription_DESC("sCreditcardmerchantDescription_DESC"),
         @Json(name = "sCreditcardmerchantStoreid_ASC") sCreditcardmerchantStoreid_ASC("sCreditcardmerchantStoreid_ASC"),
         @Json(name = "sCreditcardmerchantStoreid_DESC") sCreditcardmerchantStoreid_DESC("sCreditcardmerchantStoreid_DESC");

        /**
         * Override [toString()] to avoid using the enum variable name as the value, and instead use
         * the actual value defined in the API spec file.
         *
         * This solves a problem when the variable name and its value are different, and ensures that
         * the client sends the correct enum values to the server always.
         */
        override fun toString(): kotlin.String = "$value"
     }

    /**
     * Retrieve Creditcardmerchant list
     * 
     * @param eOrderBy Specify how you want the results to be sorted (optional)
     * @param iRowMax  (optional)
     * @param iRowOffset  (optional, default to 0)
     * @param acceptLanguage  (optional)
     * @param sFilter  (optional)
     * @return CreditcardmerchantGetListV1Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun creditcardmerchantGetListV1(eOrderBy: EOrderByCreditcardmerchantGetListV1? = null, iRowMax: kotlin.Int? = null, iRowOffset: kotlin.Int? = 0, acceptLanguage: HeaderAcceptLanguage? = null, sFilter: kotlin.String? = null) : CreditcardmerchantGetListV1Response {
        val localVarResponse = creditcardmerchantGetListV1WithHttpInfo(eOrderBy = eOrderBy, iRowMax = iRowMax, iRowOffset = iRowOffset, acceptLanguage = acceptLanguage, sFilter = sFilter)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CreditcardmerchantGetListV1Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieve Creditcardmerchant list
     * 
     * @param eOrderBy Specify how you want the results to be sorted (optional)
     * @param iRowMax  (optional)
     * @param iRowOffset  (optional, default to 0)
     * @param acceptLanguage  (optional)
     * @param sFilter  (optional)
     * @return ApiResponse<CreditcardmerchantGetListV1Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun creditcardmerchantGetListV1WithHttpInfo(eOrderBy: EOrderByCreditcardmerchantGetListV1?, iRowMax: kotlin.Int?, iRowOffset: kotlin.Int?, acceptLanguage: HeaderAcceptLanguage?, sFilter: kotlin.String?) : ApiResponse<CreditcardmerchantGetListV1Response?> {
        val localVariableConfig = creditcardmerchantGetListV1RequestConfig(eOrderBy = eOrderBy, iRowMax = iRowMax, iRowOffset = iRowOffset, acceptLanguage = acceptLanguage, sFilter = sFilter)

        return request<Unit, CreditcardmerchantGetListV1Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation creditcardmerchantGetListV1
     *
     * @param eOrderBy Specify how you want the results to be sorted (optional)
     * @param iRowMax  (optional)
     * @param iRowOffset  (optional, default to 0)
     * @param acceptLanguage  (optional)
     * @param sFilter  (optional)
     * @return RequestConfig
     */
    fun creditcardmerchantGetListV1RequestConfig(eOrderBy: EOrderByCreditcardmerchantGetListV1?, iRowMax: kotlin.Int?, iRowOffset: kotlin.Int?, acceptLanguage: HeaderAcceptLanguage?, sFilter: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (eOrderBy != null) {
                    put("eOrderBy", listOf(eOrderBy.value))
                }
                if (iRowMax != null) {
                    put("iRowMax", listOf(iRowMax.toString()))
                }
                if (iRowOffset != null) {
                    put("iRowOffset", listOf(iRowOffset.toString()))
                }
                if (sFilter != null) {
                    put("sFilter", listOf(sFilter.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/1/object/creditcardmerchant/getList",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Retrieve an existing Creditcardmerchant
     * 
     * @param pkiCreditcardmerchantID The unique ID of the Creditcardmerchant
     * @return CreditcardmerchantGetObjectV2Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun creditcardmerchantGetObjectV2(pkiCreditcardmerchantID: kotlin.Int) : CreditcardmerchantGetObjectV2Response {
        val localVarResponse = creditcardmerchantGetObjectV2WithHttpInfo(pkiCreditcardmerchantID = pkiCreditcardmerchantID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CreditcardmerchantGetObjectV2Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieve an existing Creditcardmerchant
     * 
     * @param pkiCreditcardmerchantID The unique ID of the Creditcardmerchant
     * @return ApiResponse<CreditcardmerchantGetObjectV2Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun creditcardmerchantGetObjectV2WithHttpInfo(pkiCreditcardmerchantID: kotlin.Int) : ApiResponse<CreditcardmerchantGetObjectV2Response?> {
        val localVariableConfig = creditcardmerchantGetObjectV2RequestConfig(pkiCreditcardmerchantID = pkiCreditcardmerchantID)

        return request<Unit, CreditcardmerchantGetObjectV2Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation creditcardmerchantGetObjectV2
     *
     * @param pkiCreditcardmerchantID The unique ID of the Creditcardmerchant
     * @return RequestConfig
     */
    fun creditcardmerchantGetObjectV2RequestConfig(pkiCreditcardmerchantID: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/2/object/creditcardmerchant/{pkiCreditcardmerchantID}".replace("{"+"pkiCreditcardmerchantID"+"}", encodeURIComponent(pkiCreditcardmerchantID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
