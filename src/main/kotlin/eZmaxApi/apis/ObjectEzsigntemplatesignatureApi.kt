/**
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.15
 * Contact: support-api@ezmax.ca
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package eZmaxApi.apis

import java.io.IOException
import okhttp3.OkHttpClient

import eZmaxApi.models.CommonMinusResponseMinusError
import eZmaxApi.models.EzsigntemplatesignatureMinusCreateObjectMinusV1MinusRequest
import eZmaxApi.models.EzsigntemplatesignatureMinusCreateObjectMinusV1MinusResponse
import eZmaxApi.models.EzsigntemplatesignatureMinusDeleteObjectMinusV1MinusResponse
import eZmaxApi.models.EzsigntemplatesignatureMinusEditObjectMinusV1MinusRequest
import eZmaxApi.models.EzsigntemplatesignatureMinusEditObjectMinusV1MinusResponse
import eZmaxApi.models.EzsigntemplatesignatureMinusGetObjectMinusV1MinusResponse
import eZmaxApi.models.EzsigntemplatesignatureMinusGetObjectMinusV2MinusResponse

import com.squareup.moshi.Json

import eZmaxApi.infrastructure.ApiClient
import eZmaxApi.infrastructure.ApiResponse
import eZmaxApi.infrastructure.ClientException
import eZmaxApi.infrastructure.ClientError
import eZmaxApi.infrastructure.ServerException
import eZmaxApi.infrastructure.ServerError
import eZmaxApi.infrastructure.MultiValueMap
import eZmaxApi.infrastructure.PartConfig
import eZmaxApi.infrastructure.RequestConfig
import eZmaxApi.infrastructure.RequestMethod
import eZmaxApi.infrastructure.ResponseType
import eZmaxApi.infrastructure.Success
import eZmaxApi.infrastructure.toMultiValue

class ObjectEzsigntemplatesignatureApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://prod.api.appcluster01.ca-central-1.ezmax.com/rest")
        }
    }

    /**
     * Create a new Ezsigntemplatesignature
     * The endpoint allows to create one or many elements at once.
     * @param ezsigntemplatesignatureMinusCreateObjectMinusV1MinusRequest 
     * @return EzsigntemplatesignatureMinusCreateObjectMinusV1MinusResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun ezsigntemplatesignatureCreateObjectV1(ezsigntemplatesignatureMinusCreateObjectMinusV1MinusRequest: EzsigntemplatesignatureMinusCreateObjectMinusV1MinusRequest) : EzsigntemplatesignatureMinusCreateObjectMinusV1MinusResponse {
        val localVarResponse = ezsigntemplatesignatureCreateObjectV1WithHttpInfo(ezsigntemplatesignatureMinusCreateObjectMinusV1MinusRequest = ezsigntemplatesignatureMinusCreateObjectMinusV1MinusRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as EzsigntemplatesignatureMinusCreateObjectMinusV1MinusResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Create a new Ezsigntemplatesignature
     * The endpoint allows to create one or many elements at once.
     * @param ezsigntemplatesignatureMinusCreateObjectMinusV1MinusRequest 
     * @return ApiResponse<EzsigntemplatesignatureMinusCreateObjectMinusV1MinusResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun ezsigntemplatesignatureCreateObjectV1WithHttpInfo(ezsigntemplatesignatureMinusCreateObjectMinusV1MinusRequest: EzsigntemplatesignatureMinusCreateObjectMinusV1MinusRequest) : ApiResponse<EzsigntemplatesignatureMinusCreateObjectMinusV1MinusResponse?> {
        val localVariableConfig = ezsigntemplatesignatureCreateObjectV1RequestConfig(ezsigntemplatesignatureMinusCreateObjectMinusV1MinusRequest = ezsigntemplatesignatureMinusCreateObjectMinusV1MinusRequest)

        return request<EzsigntemplatesignatureMinusCreateObjectMinusV1MinusRequest, EzsigntemplatesignatureMinusCreateObjectMinusV1MinusResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation ezsigntemplatesignatureCreateObjectV1
     *
     * @param ezsigntemplatesignatureMinusCreateObjectMinusV1MinusRequest 
     * @return RequestConfig
     */
    fun ezsigntemplatesignatureCreateObjectV1RequestConfig(ezsigntemplatesignatureMinusCreateObjectMinusV1MinusRequest: EzsigntemplatesignatureMinusCreateObjectMinusV1MinusRequest) : RequestConfig<EzsigntemplatesignatureMinusCreateObjectMinusV1MinusRequest> {
        val localVariableBody = ezsigntemplatesignatureMinusCreateObjectMinusV1MinusRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/1/object/ezsigntemplatesignature",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Delete an existing Ezsigntemplatesignature
     * 
     * @param pkiEzsigntemplatesignatureID 
     * @return EzsigntemplatesignatureMinusDeleteObjectMinusV1MinusResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun ezsigntemplatesignatureDeleteObjectV1(pkiEzsigntemplatesignatureID: kotlin.Int) : EzsigntemplatesignatureMinusDeleteObjectMinusV1MinusResponse {
        val localVarResponse = ezsigntemplatesignatureDeleteObjectV1WithHttpInfo(pkiEzsigntemplatesignatureID = pkiEzsigntemplatesignatureID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as EzsigntemplatesignatureMinusDeleteObjectMinusV1MinusResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Delete an existing Ezsigntemplatesignature
     * 
     * @param pkiEzsigntemplatesignatureID 
     * @return ApiResponse<EzsigntemplatesignatureMinusDeleteObjectMinusV1MinusResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun ezsigntemplatesignatureDeleteObjectV1WithHttpInfo(pkiEzsigntemplatesignatureID: kotlin.Int) : ApiResponse<EzsigntemplatesignatureMinusDeleteObjectMinusV1MinusResponse?> {
        val localVariableConfig = ezsigntemplatesignatureDeleteObjectV1RequestConfig(pkiEzsigntemplatesignatureID = pkiEzsigntemplatesignatureID)

        return request<Unit, EzsigntemplatesignatureMinusDeleteObjectMinusV1MinusResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation ezsigntemplatesignatureDeleteObjectV1
     *
     * @param pkiEzsigntemplatesignatureID 
     * @return RequestConfig
     */
    fun ezsigntemplatesignatureDeleteObjectV1RequestConfig(pkiEzsigntemplatesignatureID: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/1/object/ezsigntemplatesignature/{pkiEzsigntemplatesignatureID}".replace("{"+"pkiEzsigntemplatesignatureID"+"}", pkiEzsigntemplatesignatureID.toString()),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Edit an existing Ezsigntemplatesignature
     * 
     * @param pkiEzsigntemplatesignatureID 
     * @param ezsigntemplatesignatureMinusEditObjectMinusV1MinusRequest 
     * @return EzsigntemplatesignatureMinusEditObjectMinusV1MinusResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun ezsigntemplatesignatureEditObjectV1(pkiEzsigntemplatesignatureID: kotlin.Int, ezsigntemplatesignatureMinusEditObjectMinusV1MinusRequest: EzsigntemplatesignatureMinusEditObjectMinusV1MinusRequest) : EzsigntemplatesignatureMinusEditObjectMinusV1MinusResponse {
        val localVarResponse = ezsigntemplatesignatureEditObjectV1WithHttpInfo(pkiEzsigntemplatesignatureID = pkiEzsigntemplatesignatureID, ezsigntemplatesignatureMinusEditObjectMinusV1MinusRequest = ezsigntemplatesignatureMinusEditObjectMinusV1MinusRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as EzsigntemplatesignatureMinusEditObjectMinusV1MinusResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Edit an existing Ezsigntemplatesignature
     * 
     * @param pkiEzsigntemplatesignatureID 
     * @param ezsigntemplatesignatureMinusEditObjectMinusV1MinusRequest 
     * @return ApiResponse<EzsigntemplatesignatureMinusEditObjectMinusV1MinusResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun ezsigntemplatesignatureEditObjectV1WithHttpInfo(pkiEzsigntemplatesignatureID: kotlin.Int, ezsigntemplatesignatureMinusEditObjectMinusV1MinusRequest: EzsigntemplatesignatureMinusEditObjectMinusV1MinusRequest) : ApiResponse<EzsigntemplatesignatureMinusEditObjectMinusV1MinusResponse?> {
        val localVariableConfig = ezsigntemplatesignatureEditObjectV1RequestConfig(pkiEzsigntemplatesignatureID = pkiEzsigntemplatesignatureID, ezsigntemplatesignatureMinusEditObjectMinusV1MinusRequest = ezsigntemplatesignatureMinusEditObjectMinusV1MinusRequest)

        return request<EzsigntemplatesignatureMinusEditObjectMinusV1MinusRequest, EzsigntemplatesignatureMinusEditObjectMinusV1MinusResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation ezsigntemplatesignatureEditObjectV1
     *
     * @param pkiEzsigntemplatesignatureID 
     * @param ezsigntemplatesignatureMinusEditObjectMinusV1MinusRequest 
     * @return RequestConfig
     */
    fun ezsigntemplatesignatureEditObjectV1RequestConfig(pkiEzsigntemplatesignatureID: kotlin.Int, ezsigntemplatesignatureMinusEditObjectMinusV1MinusRequest: EzsigntemplatesignatureMinusEditObjectMinusV1MinusRequest) : RequestConfig<EzsigntemplatesignatureMinusEditObjectMinusV1MinusRequest> {
        val localVariableBody = ezsigntemplatesignatureMinusEditObjectMinusV1MinusRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/1/object/ezsigntemplatesignature/{pkiEzsigntemplatesignatureID}".replace("{"+"pkiEzsigntemplatesignatureID"+"}", pkiEzsigntemplatesignatureID.toString()),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Retrieve an existing Ezsigntemplatesignature
     * 
     * @param pkiEzsigntemplatesignatureID 
     * @return EzsigntemplatesignatureMinusGetObjectMinusV1MinusResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    @Deprecated(message = "This operation is deprecated.")
    fun ezsigntemplatesignatureGetObjectV1(pkiEzsigntemplatesignatureID: kotlin.Int) : EzsigntemplatesignatureMinusGetObjectMinusV1MinusResponse {
        @Suppress("DEPRECATION")
        val localVarResponse = ezsigntemplatesignatureGetObjectV1WithHttpInfo(pkiEzsigntemplatesignatureID = pkiEzsigntemplatesignatureID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as EzsigntemplatesignatureMinusGetObjectMinusV1MinusResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieve an existing Ezsigntemplatesignature
     * 
     * @param pkiEzsigntemplatesignatureID 
     * @return ApiResponse<EzsigntemplatesignatureMinusGetObjectMinusV1MinusResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    @Deprecated(message = "This operation is deprecated.")
    fun ezsigntemplatesignatureGetObjectV1WithHttpInfo(pkiEzsigntemplatesignatureID: kotlin.Int) : ApiResponse<EzsigntemplatesignatureMinusGetObjectMinusV1MinusResponse?> {
        @Suppress("DEPRECATION")
        val localVariableConfig = ezsigntemplatesignatureGetObjectV1RequestConfig(pkiEzsigntemplatesignatureID = pkiEzsigntemplatesignatureID)

        return request<Unit, EzsigntemplatesignatureMinusGetObjectMinusV1MinusResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation ezsigntemplatesignatureGetObjectV1
     *
     * @param pkiEzsigntemplatesignatureID 
     * @return RequestConfig
     */
    @Deprecated(message = "This operation is deprecated.")
    fun ezsigntemplatesignatureGetObjectV1RequestConfig(pkiEzsigntemplatesignatureID: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/1/object/ezsigntemplatesignature/{pkiEzsigntemplatesignatureID}".replace("{"+"pkiEzsigntemplatesignatureID"+"}", pkiEzsigntemplatesignatureID.toString()),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Retrieve an existing Ezsigntemplatesignature
     * 
     * @param pkiEzsigntemplatesignatureID 
     * @return EzsigntemplatesignatureMinusGetObjectMinusV2MinusResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun ezsigntemplatesignatureGetObjectV2(pkiEzsigntemplatesignatureID: kotlin.Int) : EzsigntemplatesignatureMinusGetObjectMinusV2MinusResponse {
        val localVarResponse = ezsigntemplatesignatureGetObjectV2WithHttpInfo(pkiEzsigntemplatesignatureID = pkiEzsigntemplatesignatureID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as EzsigntemplatesignatureMinusGetObjectMinusV2MinusResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieve an existing Ezsigntemplatesignature
     * 
     * @param pkiEzsigntemplatesignatureID 
     * @return ApiResponse<EzsigntemplatesignatureMinusGetObjectMinusV2MinusResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun ezsigntemplatesignatureGetObjectV2WithHttpInfo(pkiEzsigntemplatesignatureID: kotlin.Int) : ApiResponse<EzsigntemplatesignatureMinusGetObjectMinusV2MinusResponse?> {
        val localVariableConfig = ezsigntemplatesignatureGetObjectV2RequestConfig(pkiEzsigntemplatesignatureID = pkiEzsigntemplatesignatureID)

        return request<Unit, EzsigntemplatesignatureMinusGetObjectMinusV2MinusResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation ezsigntemplatesignatureGetObjectV2
     *
     * @param pkiEzsigntemplatesignatureID 
     * @return RequestConfig
     */
    fun ezsigntemplatesignatureGetObjectV2RequestConfig(pkiEzsigntemplatesignatureID: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/2/object/ezsigntemplatesignature/{pkiEzsigntemplatesignatureID}".replace("{"+"pkiEzsigntemplatesignatureID"+"}", pkiEzsigntemplatesignatureID.toString()),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

}
