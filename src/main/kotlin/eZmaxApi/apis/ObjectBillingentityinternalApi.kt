/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package eZmaxApi.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import eZmaxApi.models.BillingentityinternalMinusCreateObjectMinusV1MinusRequest
import eZmaxApi.models.BillingentityinternalMinusCreateObjectMinusV1MinusResponse
import eZmaxApi.models.BillingentityinternalMinusEditObjectMinusV1MinusRequest
import eZmaxApi.models.BillingentityinternalMinusEditObjectMinusV1MinusResponse
import eZmaxApi.models.BillingentityinternalMinusGetAutocompleteMinusV2MinusResponse
import eZmaxApi.models.BillingentityinternalMinusGetListMinusV1MinusResponse
import eZmaxApi.models.BillingentityinternalMinusGetObjectMinusV2MinusResponse
import eZmaxApi.models.CommonMinusResponseMinusError
import eZmaxApi.models.HeaderMinusAcceptMinusLanguage

import com.squareup.moshi.Json

import eZmaxApi.infrastructure.ApiClient
import eZmaxApi.infrastructure.ApiResponse
import eZmaxApi.infrastructure.ClientException
import eZmaxApi.infrastructure.ClientError
import eZmaxApi.infrastructure.ServerException
import eZmaxApi.infrastructure.ServerError
import eZmaxApi.infrastructure.MultiValueMap
import eZmaxApi.infrastructure.PartConfig
import eZmaxApi.infrastructure.RequestConfig
import eZmaxApi.infrastructure.RequestMethod
import eZmaxApi.infrastructure.ResponseType
import eZmaxApi.infrastructure.Success
import eZmaxApi.infrastructure.toMultiValue

class ObjectBillingentityinternalApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://prod.api.appcluster01.ca-central-1.ezmax.com/rest")
        }
    }

    /**
     * Create a new Billingentityinternal
     * The endpoint allows to create one or many elements at once.
     * @param billingentityinternalMinusCreateObjectMinusV1MinusRequest 
     * @return BillingentityinternalMinusCreateObjectMinusV1MinusResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun billingentityinternalCreateObjectV1(billingentityinternalMinusCreateObjectMinusV1MinusRequest: BillingentityinternalMinusCreateObjectMinusV1MinusRequest) : BillingentityinternalMinusCreateObjectMinusV1MinusResponse {
        val localVarResponse = billingentityinternalCreateObjectV1WithHttpInfo(billingentityinternalMinusCreateObjectMinusV1MinusRequest = billingentityinternalMinusCreateObjectMinusV1MinusRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as BillingentityinternalMinusCreateObjectMinusV1MinusResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Create a new Billingentityinternal
     * The endpoint allows to create one or many elements at once.
     * @param billingentityinternalMinusCreateObjectMinusV1MinusRequest 
     * @return ApiResponse<BillingentityinternalMinusCreateObjectMinusV1MinusResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun billingentityinternalCreateObjectV1WithHttpInfo(billingentityinternalMinusCreateObjectMinusV1MinusRequest: BillingentityinternalMinusCreateObjectMinusV1MinusRequest) : ApiResponse<BillingentityinternalMinusCreateObjectMinusV1MinusResponse?> {
        val localVariableConfig = billingentityinternalCreateObjectV1RequestConfig(billingentityinternalMinusCreateObjectMinusV1MinusRequest = billingentityinternalMinusCreateObjectMinusV1MinusRequest)

        return request<BillingentityinternalMinusCreateObjectMinusV1MinusRequest, BillingentityinternalMinusCreateObjectMinusV1MinusResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation billingentityinternalCreateObjectV1
     *
     * @param billingentityinternalMinusCreateObjectMinusV1MinusRequest 
     * @return RequestConfig
     */
    fun billingentityinternalCreateObjectV1RequestConfig(billingentityinternalMinusCreateObjectMinusV1MinusRequest: BillingentityinternalMinusCreateObjectMinusV1MinusRequest) : RequestConfig<BillingentityinternalMinusCreateObjectMinusV1MinusRequest> {
        val localVariableBody = billingentityinternalMinusCreateObjectMinusV1MinusRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/1/object/billingentityinternal",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Edit an existing Billingentityinternal
     * 
     * @param pkiBillingentityinternalID The unique ID of the Billingentityinternal
     * @param billingentityinternalMinusEditObjectMinusV1MinusRequest 
     * @return BillingentityinternalMinusEditObjectMinusV1MinusResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun billingentityinternalEditObjectV1(pkiBillingentityinternalID: kotlin.Int, billingentityinternalMinusEditObjectMinusV1MinusRequest: BillingentityinternalMinusEditObjectMinusV1MinusRequest) : BillingentityinternalMinusEditObjectMinusV1MinusResponse {
        val localVarResponse = billingentityinternalEditObjectV1WithHttpInfo(pkiBillingentityinternalID = pkiBillingentityinternalID, billingentityinternalMinusEditObjectMinusV1MinusRequest = billingentityinternalMinusEditObjectMinusV1MinusRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as BillingentityinternalMinusEditObjectMinusV1MinusResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Edit an existing Billingentityinternal
     * 
     * @param pkiBillingentityinternalID The unique ID of the Billingentityinternal
     * @param billingentityinternalMinusEditObjectMinusV1MinusRequest 
     * @return ApiResponse<BillingentityinternalMinusEditObjectMinusV1MinusResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun billingentityinternalEditObjectV1WithHttpInfo(pkiBillingentityinternalID: kotlin.Int, billingentityinternalMinusEditObjectMinusV1MinusRequest: BillingentityinternalMinusEditObjectMinusV1MinusRequest) : ApiResponse<BillingentityinternalMinusEditObjectMinusV1MinusResponse?> {
        val localVariableConfig = billingentityinternalEditObjectV1RequestConfig(pkiBillingentityinternalID = pkiBillingentityinternalID, billingentityinternalMinusEditObjectMinusV1MinusRequest = billingentityinternalMinusEditObjectMinusV1MinusRequest)

        return request<BillingentityinternalMinusEditObjectMinusV1MinusRequest, BillingentityinternalMinusEditObjectMinusV1MinusResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation billingentityinternalEditObjectV1
     *
     * @param pkiBillingentityinternalID The unique ID of the Billingentityinternal
     * @param billingentityinternalMinusEditObjectMinusV1MinusRequest 
     * @return RequestConfig
     */
    fun billingentityinternalEditObjectV1RequestConfig(pkiBillingentityinternalID: kotlin.Int, billingentityinternalMinusEditObjectMinusV1MinusRequest: BillingentityinternalMinusEditObjectMinusV1MinusRequest) : RequestConfig<BillingentityinternalMinusEditObjectMinusV1MinusRequest> {
        val localVariableBody = billingentityinternalMinusEditObjectMinusV1MinusRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/1/object/billingentityinternal/{pkiBillingentityinternalID}".replace("{"+"pkiBillingentityinternalID"+"}", encodeURIComponent(pkiBillingentityinternalID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter sSelector
     */
     enum class SSelector_billingentityinternalGetAutocompleteV2(val value: kotlin.String) {
         @Json(name = "All") All("All")
     }

    /**
     * enum for parameter eFilterActive
     */
     enum class EFilterActive_billingentityinternalGetAutocompleteV2(val value: kotlin.String) {
         @Json(name = "All") All("All"),
         @Json(name = "Active") Active("Active"),
         @Json(name = "Inactive") Inactive("Inactive")
     }

    /**
     * Retrieve Billingentityinternals and IDs
     * Get the list of Billingentityinternal to be used in a dropdown or autocomplete control.
     * @param sSelector The type of Billingentityinternals to return
     * @param eFilterActive Specify which results we want to display. (optional, default to Active)
     * @param sQuery Allow to filter the returned results (optional)
     * @param acceptLanguage  (optional)
     * @return BillingentityinternalMinusGetAutocompleteMinusV2MinusResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun billingentityinternalGetAutocompleteV2(sSelector: SSelector_billingentityinternalGetAutocompleteV2, eFilterActive: EFilterActive_billingentityinternalGetAutocompleteV2? = EFilterActive_billingentityinternalGetAutocompleteV2.Active, sQuery: kotlin.String? = null, acceptLanguage: HeaderMinusAcceptMinusLanguage? = null) : BillingentityinternalMinusGetAutocompleteMinusV2MinusResponse {
        val localVarResponse = billingentityinternalGetAutocompleteV2WithHttpInfo(sSelector = sSelector, eFilterActive = eFilterActive, sQuery = sQuery, acceptLanguage = acceptLanguage)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as BillingentityinternalMinusGetAutocompleteMinusV2MinusResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieve Billingentityinternals and IDs
     * Get the list of Billingentityinternal to be used in a dropdown or autocomplete control.
     * @param sSelector The type of Billingentityinternals to return
     * @param eFilterActive Specify which results we want to display. (optional, default to Active)
     * @param sQuery Allow to filter the returned results (optional)
     * @param acceptLanguage  (optional)
     * @return ApiResponse<BillingentityinternalMinusGetAutocompleteMinusV2MinusResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun billingentityinternalGetAutocompleteV2WithHttpInfo(sSelector: SSelector_billingentityinternalGetAutocompleteV2, eFilterActive: EFilterActive_billingentityinternalGetAutocompleteV2?, sQuery: kotlin.String?, acceptLanguage: HeaderMinusAcceptMinusLanguage?) : ApiResponse<BillingentityinternalMinusGetAutocompleteMinusV2MinusResponse?> {
        val localVariableConfig = billingentityinternalGetAutocompleteV2RequestConfig(sSelector = sSelector, eFilterActive = eFilterActive, sQuery = sQuery, acceptLanguage = acceptLanguage)

        return request<Unit, BillingentityinternalMinusGetAutocompleteMinusV2MinusResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation billingentityinternalGetAutocompleteV2
     *
     * @param sSelector The type of Billingentityinternals to return
     * @param eFilterActive Specify which results we want to display. (optional, default to Active)
     * @param sQuery Allow to filter the returned results (optional)
     * @param acceptLanguage  (optional)
     * @return RequestConfig
     */
    fun billingentityinternalGetAutocompleteV2RequestConfig(sSelector: SSelector_billingentityinternalGetAutocompleteV2, eFilterActive: EFilterActive_billingentityinternalGetAutocompleteV2?, sQuery: kotlin.String?, acceptLanguage: HeaderMinusAcceptMinusLanguage?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (eFilterActive != null) {
                    put("eFilterActive", listOf(eFilterActive.toString()))
                }
                if (sQuery != null) {
                    put("sQuery", listOf(sQuery.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/2/object/billingentityinternal/getAutocomplete/{sSelector}".replace("{"+"sSelector"+"}", encodeURIComponent(sSelector.value.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter eOrderBy
     */
     enum class EOrderBy_billingentityinternalGetListV1(val value: kotlin.String) {
         @Json(name = "pkiBillingentityinternalID_ASC") pkiBillingentityinternalID_ASC("pkiBillingentityinternalID_ASC"),
         @Json(name = "pkiBillingentityinternalID_DESC") pkiBillingentityinternalID_DESC("pkiBillingentityinternalID_DESC"),
         @Json(name = "sBillingentityinternalDescriptionX_ASC") sBillingentityinternalDescriptionX_ASC("sBillingentityinternalDescriptionX_ASC"),
         @Json(name = "sBillingentityinternalDescriptionX_DESC") sBillingentityinternalDescriptionX_DESC("sBillingentityinternalDescriptionX_DESC")
     }

    /**
     * Retrieve Billingentityinternal list
     * 
     * @param eOrderBy Specify how you want the results to be sorted (optional)
     * @param iRowMax  (optional)
     * @param iRowOffset  (optional)
     * @param acceptLanguage  (optional)
     * @param sFilter  (optional)
     * @return BillingentityinternalMinusGetListMinusV1MinusResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun billingentityinternalGetListV1(eOrderBy: EOrderBy_billingentityinternalGetListV1? = null, iRowMax: kotlin.Int? = null, iRowOffset: kotlin.Int? = null, acceptLanguage: HeaderMinusAcceptMinusLanguage? = null, sFilter: kotlin.String? = null) : BillingentityinternalMinusGetListMinusV1MinusResponse {
        val localVarResponse = billingentityinternalGetListV1WithHttpInfo(eOrderBy = eOrderBy, iRowMax = iRowMax, iRowOffset = iRowOffset, acceptLanguage = acceptLanguage, sFilter = sFilter)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as BillingentityinternalMinusGetListMinusV1MinusResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieve Billingentityinternal list
     * 
     * @param eOrderBy Specify how you want the results to be sorted (optional)
     * @param iRowMax  (optional)
     * @param iRowOffset  (optional)
     * @param acceptLanguage  (optional)
     * @param sFilter  (optional)
     * @return ApiResponse<BillingentityinternalMinusGetListMinusV1MinusResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun billingentityinternalGetListV1WithHttpInfo(eOrderBy: EOrderBy_billingentityinternalGetListV1?, iRowMax: kotlin.Int?, iRowOffset: kotlin.Int?, acceptLanguage: HeaderMinusAcceptMinusLanguage?, sFilter: kotlin.String?) : ApiResponse<BillingentityinternalMinusGetListMinusV1MinusResponse?> {
        val localVariableConfig = billingentityinternalGetListV1RequestConfig(eOrderBy = eOrderBy, iRowMax = iRowMax, iRowOffset = iRowOffset, acceptLanguage = acceptLanguage, sFilter = sFilter)

        return request<Unit, BillingentityinternalMinusGetListMinusV1MinusResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation billingentityinternalGetListV1
     *
     * @param eOrderBy Specify how you want the results to be sorted (optional)
     * @param iRowMax  (optional)
     * @param iRowOffset  (optional)
     * @param acceptLanguage  (optional)
     * @param sFilter  (optional)
     * @return RequestConfig
     */
    fun billingentityinternalGetListV1RequestConfig(eOrderBy: EOrderBy_billingentityinternalGetListV1?, iRowMax: kotlin.Int?, iRowOffset: kotlin.Int?, acceptLanguage: HeaderMinusAcceptMinusLanguage?, sFilter: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (eOrderBy != null) {
                    put("eOrderBy", listOf(eOrderBy.toString()))
                }
                if (iRowMax != null) {
                    put("iRowMax", listOf(iRowMax.toString()))
                }
                if (iRowOffset != null) {
                    put("iRowOffset", listOf(iRowOffset.toString()))
                }
                if (sFilter != null) {
                    put("sFilter", listOf(sFilter.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/1/object/billingentityinternal/getList",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Retrieve an existing Billingentityinternal
     * 
     * @param pkiBillingentityinternalID The unique ID of the Billingentityinternal
     * @return BillingentityinternalMinusGetObjectMinusV2MinusResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun billingentityinternalGetObjectV2(pkiBillingentityinternalID: kotlin.Int) : BillingentityinternalMinusGetObjectMinusV2MinusResponse {
        val localVarResponse = billingentityinternalGetObjectV2WithHttpInfo(pkiBillingentityinternalID = pkiBillingentityinternalID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as BillingentityinternalMinusGetObjectMinusV2MinusResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieve an existing Billingentityinternal
     * 
     * @param pkiBillingentityinternalID The unique ID of the Billingentityinternal
     * @return ApiResponse<BillingentityinternalMinusGetObjectMinusV2MinusResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun billingentityinternalGetObjectV2WithHttpInfo(pkiBillingentityinternalID: kotlin.Int) : ApiResponse<BillingentityinternalMinusGetObjectMinusV2MinusResponse?> {
        val localVariableConfig = billingentityinternalGetObjectV2RequestConfig(pkiBillingentityinternalID = pkiBillingentityinternalID)

        return request<Unit, BillingentityinternalMinusGetObjectMinusV2MinusResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation billingentityinternalGetObjectV2
     *
     * @param pkiBillingentityinternalID The unique ID of the Billingentityinternal
     * @return RequestConfig
     */
    fun billingentityinternalGetObjectV2RequestConfig(pkiBillingentityinternalID: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/2/object/billingentityinternal/{pkiBillingentityinternalID}".replace("{"+"pkiBillingentityinternalID"+"}", encodeURIComponent(pkiBillingentityinternalID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
