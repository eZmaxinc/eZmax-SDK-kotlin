/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package eZmaxApi.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import eZmaxApi.models.BillingentityinternalCreateObjectV1Request
import eZmaxApi.models.BillingentityinternalCreateObjectV1Response
import eZmaxApi.models.BillingentityinternalEditObjectV1Request
import eZmaxApi.models.BillingentityinternalEditObjectV1Response
import eZmaxApi.models.BillingentityinternalGetAutocompleteV2Response
import eZmaxApi.models.BillingentityinternalGetListV1Response
import eZmaxApi.models.BillingentityinternalGetObjectV2Response
import eZmaxApi.models.CommonResponseError
import eZmaxApi.models.HeaderAcceptLanguage

import com.squareup.moshi.Json

import eZmaxApi.infrastructure.ApiClient
import eZmaxApi.infrastructure.ApiResponse
import eZmaxApi.infrastructure.ClientException
import eZmaxApi.infrastructure.ClientError
import eZmaxApi.infrastructure.ServerException
import eZmaxApi.infrastructure.ServerError
import eZmaxApi.infrastructure.MultiValueMap
import eZmaxApi.infrastructure.PartConfig
import eZmaxApi.infrastructure.RequestConfig
import eZmaxApi.infrastructure.RequestMethod
import eZmaxApi.infrastructure.ResponseType
import eZmaxApi.infrastructure.Success
import eZmaxApi.infrastructure.toMultiValue

class ObjectBillingentityinternalApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://prod.api.appcluster01.ca-central-1.ezmax.com/rest")
        }
    }

    /**
     * Create a new Billingentityinternal
     * The endpoint allows to create one or many elements at once.
     * @param billingentityinternalCreateObjectV1Request 
     * @return BillingentityinternalCreateObjectV1Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun billingentityinternalCreateObjectV1(billingentityinternalCreateObjectV1Request: BillingentityinternalCreateObjectV1Request) : BillingentityinternalCreateObjectV1Response {
        val localVarResponse = billingentityinternalCreateObjectV1WithHttpInfo(billingentityinternalCreateObjectV1Request = billingentityinternalCreateObjectV1Request)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as BillingentityinternalCreateObjectV1Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Create a new Billingentityinternal
     * The endpoint allows to create one or many elements at once.
     * @param billingentityinternalCreateObjectV1Request 
     * @return ApiResponse<BillingentityinternalCreateObjectV1Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun billingentityinternalCreateObjectV1WithHttpInfo(billingentityinternalCreateObjectV1Request: BillingentityinternalCreateObjectV1Request) : ApiResponse<BillingentityinternalCreateObjectV1Response?> {
        val localVariableConfig = billingentityinternalCreateObjectV1RequestConfig(billingentityinternalCreateObjectV1Request = billingentityinternalCreateObjectV1Request)

        return request<BillingentityinternalCreateObjectV1Request, BillingentityinternalCreateObjectV1Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation billingentityinternalCreateObjectV1
     *
     * @param billingentityinternalCreateObjectV1Request 
     * @return RequestConfig
     */
    fun billingentityinternalCreateObjectV1RequestConfig(billingentityinternalCreateObjectV1Request: BillingentityinternalCreateObjectV1Request) : RequestConfig<BillingentityinternalCreateObjectV1Request> {
        val localVariableBody = billingentityinternalCreateObjectV1Request
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/1/object/billingentityinternal",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Edit an existing Billingentityinternal
     * 
     * @param pkiBillingentityinternalID 
     * @param billingentityinternalEditObjectV1Request 
     * @return BillingentityinternalEditObjectV1Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun billingentityinternalEditObjectV1(pkiBillingentityinternalID: kotlin.Int, billingentityinternalEditObjectV1Request: BillingentityinternalEditObjectV1Request) : BillingentityinternalEditObjectV1Response {
        val localVarResponse = billingentityinternalEditObjectV1WithHttpInfo(pkiBillingentityinternalID = pkiBillingentityinternalID, billingentityinternalEditObjectV1Request = billingentityinternalEditObjectV1Request)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as BillingentityinternalEditObjectV1Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Edit an existing Billingentityinternal
     * 
     * @param pkiBillingentityinternalID 
     * @param billingentityinternalEditObjectV1Request 
     * @return ApiResponse<BillingentityinternalEditObjectV1Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun billingentityinternalEditObjectV1WithHttpInfo(pkiBillingentityinternalID: kotlin.Int, billingentityinternalEditObjectV1Request: BillingentityinternalEditObjectV1Request) : ApiResponse<BillingentityinternalEditObjectV1Response?> {
        val localVariableConfig = billingentityinternalEditObjectV1RequestConfig(pkiBillingentityinternalID = pkiBillingentityinternalID, billingentityinternalEditObjectV1Request = billingentityinternalEditObjectV1Request)

        return request<BillingentityinternalEditObjectV1Request, BillingentityinternalEditObjectV1Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation billingentityinternalEditObjectV1
     *
     * @param pkiBillingentityinternalID 
     * @param billingentityinternalEditObjectV1Request 
     * @return RequestConfig
     */
    fun billingentityinternalEditObjectV1RequestConfig(pkiBillingentityinternalID: kotlin.Int, billingentityinternalEditObjectV1Request: BillingentityinternalEditObjectV1Request) : RequestConfig<BillingentityinternalEditObjectV1Request> {
        val localVariableBody = billingentityinternalEditObjectV1Request
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/1/object/billingentityinternal/{pkiBillingentityinternalID}".replace("{"+"pkiBillingentityinternalID"+"}", encodeURIComponent(pkiBillingentityinternalID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter sSelector
     */
     enum class SSelectorBillingentityinternalGetAutocompleteV2(val value: kotlin.String) {
         @Json(name = "All") All("All")
     }

    /**
     * enum for parameter eFilterActive
     */
     enum class EFilterActiveBillingentityinternalGetAutocompleteV2(val value: kotlin.String) {
         @Json(name = "All") All("All"),
         @Json(name = "Active") Active("Active"),
         @Json(name = "Inactive") Inactive("Inactive")
     }

    /**
     * Retrieve Billingentityinternals and IDs
     * Get the list of Billingentityinternal to be used in a dropdown or autocomplete control.
     * @param sSelector The type of Billingentityinternals to return
     * @param eFilterActive Specify which results we want to display. (optional, default to Active)
     * @param sQuery Allow to filter the returned results (optional)
     * @param acceptLanguage  (optional)
     * @return BillingentityinternalGetAutocompleteV2Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun billingentityinternalGetAutocompleteV2(sSelector: SSelectorBillingentityinternalGetAutocompleteV2, eFilterActive: EFilterActiveBillingentityinternalGetAutocompleteV2? = EFilterActiveBillingentityinternalGetAutocompleteV2.Active, sQuery: kotlin.String? = null, acceptLanguage: HeaderAcceptLanguage? = null) : BillingentityinternalGetAutocompleteV2Response {
        val localVarResponse = billingentityinternalGetAutocompleteV2WithHttpInfo(sSelector = sSelector, eFilterActive = eFilterActive, sQuery = sQuery, acceptLanguage = acceptLanguage)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as BillingentityinternalGetAutocompleteV2Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieve Billingentityinternals and IDs
     * Get the list of Billingentityinternal to be used in a dropdown or autocomplete control.
     * @param sSelector The type of Billingentityinternals to return
     * @param eFilterActive Specify which results we want to display. (optional, default to Active)
     * @param sQuery Allow to filter the returned results (optional)
     * @param acceptLanguage  (optional)
     * @return ApiResponse<BillingentityinternalGetAutocompleteV2Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun billingentityinternalGetAutocompleteV2WithHttpInfo(sSelector: SSelectorBillingentityinternalGetAutocompleteV2, eFilterActive: EFilterActiveBillingentityinternalGetAutocompleteV2?, sQuery: kotlin.String?, acceptLanguage: HeaderAcceptLanguage?) : ApiResponse<BillingentityinternalGetAutocompleteV2Response?> {
        val localVariableConfig = billingentityinternalGetAutocompleteV2RequestConfig(sSelector = sSelector, eFilterActive = eFilterActive, sQuery = sQuery, acceptLanguage = acceptLanguage)

        return request<Unit, BillingentityinternalGetAutocompleteV2Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation billingentityinternalGetAutocompleteV2
     *
     * @param sSelector The type of Billingentityinternals to return
     * @param eFilterActive Specify which results we want to display. (optional, default to Active)
     * @param sQuery Allow to filter the returned results (optional)
     * @param acceptLanguage  (optional)
     * @return RequestConfig
     */
    fun billingentityinternalGetAutocompleteV2RequestConfig(sSelector: SSelectorBillingentityinternalGetAutocompleteV2, eFilterActive: EFilterActiveBillingentityinternalGetAutocompleteV2?, sQuery: kotlin.String?, acceptLanguage: HeaderAcceptLanguage?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (eFilterActive != null) {
                    put("eFilterActive", listOf(eFilterActive.value))
                }
                if (sQuery != null) {
                    put("sQuery", listOf(sQuery.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/2/object/billingentityinternal/getAutocomplete/{sSelector}".replace("{"+"sSelector"+"}", encodeURIComponent(sSelector.value.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter eOrderBy
     */
     enum class EOrderByBillingentityinternalGetListV1(val value: kotlin.String) {
         @Json(name = "pkiBillingentityinternalID_ASC") pkiBillingentityinternalID_ASC("pkiBillingentityinternalID_ASC"),
         @Json(name = "pkiBillingentityinternalID_DESC") pkiBillingentityinternalID_DESC("pkiBillingentityinternalID_DESC"),
         @Json(name = "sBillingentityinternalDescriptionX_ASC") sBillingentityinternalDescriptionX_ASC("sBillingentityinternalDescriptionX_ASC"),
         @Json(name = "sBillingentityinternalDescriptionX_DESC") sBillingentityinternalDescriptionX_DESC("sBillingentityinternalDescriptionX_DESC")
     }

    /**
     * Retrieve Billingentityinternal list
     * 
     * @param eOrderBy Specify how you want the results to be sorted (optional)
     * @param iRowMax  (optional, default to 10000)
     * @param iRowOffset  (optional, default to 0)
     * @param acceptLanguage  (optional)
     * @param sFilter  (optional)
     * @return BillingentityinternalGetListV1Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun billingentityinternalGetListV1(eOrderBy: EOrderByBillingentityinternalGetListV1? = null, iRowMax: kotlin.Int? = 10000, iRowOffset: kotlin.Int? = 0, acceptLanguage: HeaderAcceptLanguage? = null, sFilter: kotlin.String? = null) : BillingentityinternalGetListV1Response {
        val localVarResponse = billingentityinternalGetListV1WithHttpInfo(eOrderBy = eOrderBy, iRowMax = iRowMax, iRowOffset = iRowOffset, acceptLanguage = acceptLanguage, sFilter = sFilter)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as BillingentityinternalGetListV1Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieve Billingentityinternal list
     * 
     * @param eOrderBy Specify how you want the results to be sorted (optional)
     * @param iRowMax  (optional, default to 10000)
     * @param iRowOffset  (optional, default to 0)
     * @param acceptLanguage  (optional)
     * @param sFilter  (optional)
     * @return ApiResponse<BillingentityinternalGetListV1Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun billingentityinternalGetListV1WithHttpInfo(eOrderBy: EOrderByBillingentityinternalGetListV1?, iRowMax: kotlin.Int?, iRowOffset: kotlin.Int?, acceptLanguage: HeaderAcceptLanguage?, sFilter: kotlin.String?) : ApiResponse<BillingentityinternalGetListV1Response?> {
        val localVariableConfig = billingentityinternalGetListV1RequestConfig(eOrderBy = eOrderBy, iRowMax = iRowMax, iRowOffset = iRowOffset, acceptLanguage = acceptLanguage, sFilter = sFilter)

        return request<Unit, BillingentityinternalGetListV1Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation billingentityinternalGetListV1
     *
     * @param eOrderBy Specify how you want the results to be sorted (optional)
     * @param iRowMax  (optional, default to 10000)
     * @param iRowOffset  (optional, default to 0)
     * @param acceptLanguage  (optional)
     * @param sFilter  (optional)
     * @return RequestConfig
     */
    fun billingentityinternalGetListV1RequestConfig(eOrderBy: EOrderByBillingentityinternalGetListV1?, iRowMax: kotlin.Int?, iRowOffset: kotlin.Int?, acceptLanguage: HeaderAcceptLanguage?, sFilter: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (eOrderBy != null) {
                    put("eOrderBy", listOf(eOrderBy.value))
                }
                if (iRowMax != null) {
                    put("iRowMax", listOf(iRowMax.toString()))
                }
                if (iRowOffset != null) {
                    put("iRowOffset", listOf(iRowOffset.toString()))
                }
                if (sFilter != null) {
                    put("sFilter", listOf(sFilter.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/1/object/billingentityinternal/getList",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Retrieve an existing Billingentityinternal
     * 
     * @param pkiBillingentityinternalID 
     * @return BillingentityinternalGetObjectV2Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun billingentityinternalGetObjectV2(pkiBillingentityinternalID: kotlin.Int) : BillingentityinternalGetObjectV2Response {
        val localVarResponse = billingentityinternalGetObjectV2WithHttpInfo(pkiBillingentityinternalID = pkiBillingentityinternalID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as BillingentityinternalGetObjectV2Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieve an existing Billingentityinternal
     * 
     * @param pkiBillingentityinternalID 
     * @return ApiResponse<BillingentityinternalGetObjectV2Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun billingentityinternalGetObjectV2WithHttpInfo(pkiBillingentityinternalID: kotlin.Int) : ApiResponse<BillingentityinternalGetObjectV2Response?> {
        val localVariableConfig = billingentityinternalGetObjectV2RequestConfig(pkiBillingentityinternalID = pkiBillingentityinternalID)

        return request<Unit, BillingentityinternalGetObjectV2Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation billingentityinternalGetObjectV2
     *
     * @param pkiBillingentityinternalID 
     * @return RequestConfig
     */
    fun billingentityinternalGetObjectV2RequestConfig(pkiBillingentityinternalID: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/2/object/billingentityinternal/{pkiBillingentityinternalID}".replace("{"+"pkiBillingentityinternalID"+"}", encodeURIComponent(pkiBillingentityinternalID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
