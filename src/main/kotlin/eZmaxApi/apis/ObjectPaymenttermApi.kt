/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package eZmaxApi.apis

import java.io.IOException
import okhttp3.Call
import okhttp3.HttpUrl

import eZmaxApi.models.CommonResponseError
import eZmaxApi.models.HeaderAcceptLanguage
import eZmaxApi.models.PaymenttermCreateObjectV1Request
import eZmaxApi.models.PaymenttermCreateObjectV1Response
import eZmaxApi.models.PaymenttermEditObjectV1Request
import eZmaxApi.models.PaymenttermEditObjectV1Response
import eZmaxApi.models.PaymenttermGetAutocompleteV2Response
import eZmaxApi.models.PaymenttermGetListV1Response
import eZmaxApi.models.PaymenttermGetObjectV2Response

import com.squareup.moshi.Json

import eZmaxApi.infrastructure.ApiClient
import eZmaxApi.infrastructure.ApiResponse
import eZmaxApi.infrastructure.ClientException
import eZmaxApi.infrastructure.ClientError
import eZmaxApi.infrastructure.ServerException
import eZmaxApi.infrastructure.ServerError
import eZmaxApi.infrastructure.MultiValueMap
import eZmaxApi.infrastructure.PartConfig
import eZmaxApi.infrastructure.RequestConfig
import eZmaxApi.infrastructure.RequestMethod
import eZmaxApi.infrastructure.ResponseType
import eZmaxApi.infrastructure.Success
import eZmaxApi.infrastructure.toMultiValue

class ObjectPaymenttermApi(basePath: kotlin.String = defaultBasePath, client: Call.Factory = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://prod.api.appcluster01.ca-central-1.ezmax.com/rest")
        }
    }

    /**
     * Create a new Paymentterm
     * The endpoint allows to create one or many elements at once.
     * @param paymenttermCreateObjectV1Request 
     * @return PaymenttermCreateObjectV1Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun paymenttermCreateObjectV1(paymenttermCreateObjectV1Request: PaymenttermCreateObjectV1Request) : PaymenttermCreateObjectV1Response {
        val localVarResponse = paymenttermCreateObjectV1WithHttpInfo(paymenttermCreateObjectV1Request = paymenttermCreateObjectV1Request)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as PaymenttermCreateObjectV1Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Create a new Paymentterm
     * The endpoint allows to create one or many elements at once.
     * @param paymenttermCreateObjectV1Request 
     * @return ApiResponse<PaymenttermCreateObjectV1Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun paymenttermCreateObjectV1WithHttpInfo(paymenttermCreateObjectV1Request: PaymenttermCreateObjectV1Request) : ApiResponse<PaymenttermCreateObjectV1Response?> {
        val localVariableConfig = paymenttermCreateObjectV1RequestConfig(paymenttermCreateObjectV1Request = paymenttermCreateObjectV1Request)

        return request<PaymenttermCreateObjectV1Request, PaymenttermCreateObjectV1Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation paymenttermCreateObjectV1
     *
     * @param paymenttermCreateObjectV1Request 
     * @return RequestConfig
     */
    fun paymenttermCreateObjectV1RequestConfig(paymenttermCreateObjectV1Request: PaymenttermCreateObjectV1Request) : RequestConfig<PaymenttermCreateObjectV1Request> {
        val localVariableBody = paymenttermCreateObjectV1Request
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/1/object/paymentterm",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Edit an existing Paymentterm
     * 
     * @param pkiPaymenttermID 
     * @param paymenttermEditObjectV1Request 
     * @return PaymenttermEditObjectV1Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun paymenttermEditObjectV1(pkiPaymenttermID: kotlin.Int, paymenttermEditObjectV1Request: PaymenttermEditObjectV1Request) : PaymenttermEditObjectV1Response {
        val localVarResponse = paymenttermEditObjectV1WithHttpInfo(pkiPaymenttermID = pkiPaymenttermID, paymenttermEditObjectV1Request = paymenttermEditObjectV1Request)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as PaymenttermEditObjectV1Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Edit an existing Paymentterm
     * 
     * @param pkiPaymenttermID 
     * @param paymenttermEditObjectV1Request 
     * @return ApiResponse<PaymenttermEditObjectV1Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun paymenttermEditObjectV1WithHttpInfo(pkiPaymenttermID: kotlin.Int, paymenttermEditObjectV1Request: PaymenttermEditObjectV1Request) : ApiResponse<PaymenttermEditObjectV1Response?> {
        val localVariableConfig = paymenttermEditObjectV1RequestConfig(pkiPaymenttermID = pkiPaymenttermID, paymenttermEditObjectV1Request = paymenttermEditObjectV1Request)

        return request<PaymenttermEditObjectV1Request, PaymenttermEditObjectV1Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation paymenttermEditObjectV1
     *
     * @param pkiPaymenttermID 
     * @param paymenttermEditObjectV1Request 
     * @return RequestConfig
     */
    fun paymenttermEditObjectV1RequestConfig(pkiPaymenttermID: kotlin.Int, paymenttermEditObjectV1Request: PaymenttermEditObjectV1Request) : RequestConfig<PaymenttermEditObjectV1Request> {
        val localVariableBody = paymenttermEditObjectV1Request
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/1/object/paymentterm/{pkiPaymenttermID}".replace("{"+"pkiPaymenttermID"+"}", encodeURIComponent(pkiPaymenttermID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter sSelector
     */
     enum class SSelectorPaymenttermGetAutocompleteV2(val value: kotlin.String) {
         @Json(name = "All") All("All");

        /**
         * Override [toString()] to avoid using the enum variable name as the value, and instead use
         * the actual value defined in the API spec file.
         *
         * This solves a problem when the variable name and its value are different, and ensures that
         * the client sends the correct enum values to the server always.
         */
        override fun toString(): kotlin.String = "$value"
     }

    /**
     * enum for parameter eFilterActive
     */
     enum class EFilterActivePaymenttermGetAutocompleteV2(val value: kotlin.String) {
         @Json(name = "All") All("All"),
         @Json(name = "Active") Active("Active"),
         @Json(name = "Inactive") Inactive("Inactive");

        /**
         * Override [toString()] to avoid using the enum variable name as the value, and instead use
         * the actual value defined in the API spec file.
         *
         * This solves a problem when the variable name and its value are different, and ensures that
         * the client sends the correct enum values to the server always.
         */
        override fun toString(): kotlin.String = "$value"
     }

    /**
     * Retrieve Paymentterms and IDs
     * Get the list of Paymentterm to be used in a dropdown or autocomplete control.
     * @param sSelector The type of Paymentterms to return
     * @param eFilterActive Specify which results we want to display. (optional, default to Active)
     * @param sQuery Allow to filter the returned results (optional)
     * @param acceptLanguage  (optional)
     * @return PaymenttermGetAutocompleteV2Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun paymenttermGetAutocompleteV2(sSelector: SSelectorPaymenttermGetAutocompleteV2, eFilterActive: EFilterActivePaymenttermGetAutocompleteV2? = EFilterActivePaymenttermGetAutocompleteV2.Active, sQuery: kotlin.String? = null, acceptLanguage: HeaderAcceptLanguage? = null) : PaymenttermGetAutocompleteV2Response {
        val localVarResponse = paymenttermGetAutocompleteV2WithHttpInfo(sSelector = sSelector, eFilterActive = eFilterActive, sQuery = sQuery, acceptLanguage = acceptLanguage)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as PaymenttermGetAutocompleteV2Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieve Paymentterms and IDs
     * Get the list of Paymentterm to be used in a dropdown or autocomplete control.
     * @param sSelector The type of Paymentterms to return
     * @param eFilterActive Specify which results we want to display. (optional, default to Active)
     * @param sQuery Allow to filter the returned results (optional)
     * @param acceptLanguage  (optional)
     * @return ApiResponse<PaymenttermGetAutocompleteV2Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun paymenttermGetAutocompleteV2WithHttpInfo(sSelector: SSelectorPaymenttermGetAutocompleteV2, eFilterActive: EFilterActivePaymenttermGetAutocompleteV2?, sQuery: kotlin.String?, acceptLanguage: HeaderAcceptLanguage?) : ApiResponse<PaymenttermGetAutocompleteV2Response?> {
        val localVariableConfig = paymenttermGetAutocompleteV2RequestConfig(sSelector = sSelector, eFilterActive = eFilterActive, sQuery = sQuery, acceptLanguage = acceptLanguage)

        return request<Unit, PaymenttermGetAutocompleteV2Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation paymenttermGetAutocompleteV2
     *
     * @param sSelector The type of Paymentterms to return
     * @param eFilterActive Specify which results we want to display. (optional, default to Active)
     * @param sQuery Allow to filter the returned results (optional)
     * @param acceptLanguage  (optional)
     * @return RequestConfig
     */
    fun paymenttermGetAutocompleteV2RequestConfig(sSelector: SSelectorPaymenttermGetAutocompleteV2, eFilterActive: EFilterActivePaymenttermGetAutocompleteV2?, sQuery: kotlin.String?, acceptLanguage: HeaderAcceptLanguage?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (eFilterActive != null) {
                    put("eFilterActive", listOf(eFilterActive.value))
                }
                if (sQuery != null) {
                    put("sQuery", listOf(sQuery.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/2/object/paymentterm/getAutocomplete/{sSelector}".replace("{"+"sSelector"+"}", encodeURIComponent(sSelector.value.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter eOrderBy
     */
     enum class EOrderByPaymenttermGetListV1(val value: kotlin.String) {
         @Json(name = "pkiPaymenttermID_ASC") pkiPaymenttermID_ASC("pkiPaymenttermID_ASC"),
         @Json(name = "pkiPaymenttermID_DESC") pkiPaymenttermID_DESC("pkiPaymenttermID_DESC"),
         @Json(name = "sPaymenttermCode_ASC") sPaymenttermCode_ASC("sPaymenttermCode_ASC"),
         @Json(name = "sPaymenttermCode_DESC") sPaymenttermCode_DESC("sPaymenttermCode_DESC"),
         @Json(name = "ePaymenttermType_ASC") ePaymenttermType_ASC("ePaymenttermType_ASC"),
         @Json(name = "ePaymenttermType_DESC") ePaymenttermType_DESC("ePaymenttermType_DESC"),
         @Json(name = "iPaymenttermDay_ASC") iPaymenttermDay_ASC("iPaymenttermDay_ASC"),
         @Json(name = "iPaymenttermDay_DESC") iPaymenttermDay_DESC("iPaymenttermDay_DESC"),
         @Json(name = "sPaymenttermDescriptionX_ASC") sPaymenttermDescriptionX_ASC("sPaymenttermDescriptionX_ASC"),
         @Json(name = "sPaymenttermDescriptionX_DESC") sPaymenttermDescriptionX_DESC("sPaymenttermDescriptionX_DESC"),
         @Json(name = "bPaymenttermIsactive_ASC") bPaymenttermIsactive_ASC("bPaymenttermIsactive_ASC"),
         @Json(name = "bPaymenttermIsactive_DESC") bPaymenttermIsactive_DESC("bPaymenttermIsactive_DESC");

        /**
         * Override [toString()] to avoid using the enum variable name as the value, and instead use
         * the actual value defined in the API spec file.
         *
         * This solves a problem when the variable name and its value are different, and ensures that
         * the client sends the correct enum values to the server always.
         */
        override fun toString(): kotlin.String = "$value"
     }

    /**
     * Retrieve Paymentterm list
     * 
     * @param eOrderBy Specify how you want the results to be sorted (optional)
     * @param iRowMax  (optional)
     * @param iRowOffset  (optional, default to 0)
     * @param acceptLanguage  (optional)
     * @param sFilter  (optional)
     * @return PaymenttermGetListV1Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun paymenttermGetListV1(eOrderBy: EOrderByPaymenttermGetListV1? = null, iRowMax: kotlin.Int? = null, iRowOffset: kotlin.Int? = 0, acceptLanguage: HeaderAcceptLanguage? = null, sFilter: kotlin.String? = null) : PaymenttermGetListV1Response {
        val localVarResponse = paymenttermGetListV1WithHttpInfo(eOrderBy = eOrderBy, iRowMax = iRowMax, iRowOffset = iRowOffset, acceptLanguage = acceptLanguage, sFilter = sFilter)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as PaymenttermGetListV1Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieve Paymentterm list
     * 
     * @param eOrderBy Specify how you want the results to be sorted (optional)
     * @param iRowMax  (optional)
     * @param iRowOffset  (optional, default to 0)
     * @param acceptLanguage  (optional)
     * @param sFilter  (optional)
     * @return ApiResponse<PaymenttermGetListV1Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun paymenttermGetListV1WithHttpInfo(eOrderBy: EOrderByPaymenttermGetListV1?, iRowMax: kotlin.Int?, iRowOffset: kotlin.Int?, acceptLanguage: HeaderAcceptLanguage?, sFilter: kotlin.String?) : ApiResponse<PaymenttermGetListV1Response?> {
        val localVariableConfig = paymenttermGetListV1RequestConfig(eOrderBy = eOrderBy, iRowMax = iRowMax, iRowOffset = iRowOffset, acceptLanguage = acceptLanguage, sFilter = sFilter)

        return request<Unit, PaymenttermGetListV1Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation paymenttermGetListV1
     *
     * @param eOrderBy Specify how you want the results to be sorted (optional)
     * @param iRowMax  (optional)
     * @param iRowOffset  (optional, default to 0)
     * @param acceptLanguage  (optional)
     * @param sFilter  (optional)
     * @return RequestConfig
     */
    fun paymenttermGetListV1RequestConfig(eOrderBy: EOrderByPaymenttermGetListV1?, iRowMax: kotlin.Int?, iRowOffset: kotlin.Int?, acceptLanguage: HeaderAcceptLanguage?, sFilter: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (eOrderBy != null) {
                    put("eOrderBy", listOf(eOrderBy.value))
                }
                if (iRowMax != null) {
                    put("iRowMax", listOf(iRowMax.toString()))
                }
                if (iRowOffset != null) {
                    put("iRowOffset", listOf(iRowOffset.toString()))
                }
                if (sFilter != null) {
                    put("sFilter", listOf(sFilter.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/1/object/paymentterm/getList",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Retrieve an existing Paymentterm
     * 
     * @param pkiPaymenttermID 
     * @return PaymenttermGetObjectV2Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun paymenttermGetObjectV2(pkiPaymenttermID: kotlin.Int) : PaymenttermGetObjectV2Response {
        val localVarResponse = paymenttermGetObjectV2WithHttpInfo(pkiPaymenttermID = pkiPaymenttermID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as PaymenttermGetObjectV2Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieve an existing Paymentterm
     * 
     * @param pkiPaymenttermID 
     * @return ApiResponse<PaymenttermGetObjectV2Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun paymenttermGetObjectV2WithHttpInfo(pkiPaymenttermID: kotlin.Int) : ApiResponse<PaymenttermGetObjectV2Response?> {
        val localVariableConfig = paymenttermGetObjectV2RequestConfig(pkiPaymenttermID = pkiPaymenttermID)

        return request<Unit, PaymenttermGetObjectV2Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation paymenttermGetObjectV2
     *
     * @param pkiPaymenttermID 
     * @return RequestConfig
     */
    fun paymenttermGetObjectV2RequestConfig(pkiPaymenttermID: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/2/object/paymentterm/{pkiPaymenttermID}".replace("{"+"pkiPaymenttermID"+"}", encodeURIComponent(pkiPaymenttermID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
