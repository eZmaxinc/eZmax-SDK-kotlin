/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package eZmaxApi.apis

import java.io.IOException
import okhttp3.Call
import okhttp3.HttpUrl

import eZmaxApi.models.CommonResponseError
import eZmaxApi.models.OtherincomeGetCommunicationCountV1Response
import eZmaxApi.models.OtherincomeGetCommunicationListV1Response
import eZmaxApi.models.OtherincomeGetCommunicationrecipientsV1Response
import eZmaxApi.models.OtherincomeGetCommunicationsendersV1Response

import com.squareup.moshi.Json

import eZmaxApi.infrastructure.ApiClient
import eZmaxApi.infrastructure.ApiResponse
import eZmaxApi.infrastructure.ClientException
import eZmaxApi.infrastructure.ClientError
import eZmaxApi.infrastructure.ServerException
import eZmaxApi.infrastructure.ServerError
import eZmaxApi.infrastructure.MultiValueMap
import eZmaxApi.infrastructure.PartConfig
import eZmaxApi.infrastructure.RequestConfig
import eZmaxApi.infrastructure.RequestMethod
import eZmaxApi.infrastructure.ResponseType
import eZmaxApi.infrastructure.Success
import eZmaxApi.infrastructure.toMultiValue

class ObjectOtherincomeApi(basePath: kotlin.String = defaultBasePath, client: Call.Factory = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://prod.api.appcluster01.ca-central-1.ezmax.com/rest")
        }
    }

    /**
     * GET /1/object/otherincome/{pkiOtherincomeID}/getCommunicationCount
     * Retrieve Communication count
     * 
     * @param pkiOtherincomeID 
     * @return OtherincomeGetCommunicationCountV1Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun otherincomeGetCommunicationCountV1(pkiOtherincomeID: kotlin.Int) : OtherincomeGetCommunicationCountV1Response {
        val localVarResponse = otherincomeGetCommunicationCountV1WithHttpInfo(pkiOtherincomeID = pkiOtherincomeID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as OtherincomeGetCommunicationCountV1Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /1/object/otherincome/{pkiOtherincomeID}/getCommunicationCount
     * Retrieve Communication count
     * 
     * @param pkiOtherincomeID 
     * @return ApiResponse<OtherincomeGetCommunicationCountV1Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun otherincomeGetCommunicationCountV1WithHttpInfo(pkiOtherincomeID: kotlin.Int) : ApiResponse<OtherincomeGetCommunicationCountV1Response?> {
        val localVariableConfig = otherincomeGetCommunicationCountV1RequestConfig(pkiOtherincomeID = pkiOtherincomeID)

        return request<Unit, OtherincomeGetCommunicationCountV1Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation otherincomeGetCommunicationCountV1
     *
     * @param pkiOtherincomeID 
     * @return RequestConfig
     */
    fun otherincomeGetCommunicationCountV1RequestConfig(pkiOtherincomeID: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/1/object/otherincome/{pkiOtherincomeID}/getCommunicationCount".replace("{"+"pkiOtherincomeID"+"}", encodeURIComponent(pkiOtherincomeID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * GET /1/object/otherincome/{pkiOtherincomeID}/getCommunicationList
     * Retrieve Communication list
     * 
     * @param pkiOtherincomeID 
     * @return OtherincomeGetCommunicationListV1Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun otherincomeGetCommunicationListV1(pkiOtherincomeID: kotlin.Int) : OtherincomeGetCommunicationListV1Response {
        val localVarResponse = otherincomeGetCommunicationListV1WithHttpInfo(pkiOtherincomeID = pkiOtherincomeID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as OtherincomeGetCommunicationListV1Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /1/object/otherincome/{pkiOtherincomeID}/getCommunicationList
     * Retrieve Communication list
     * 
     * @param pkiOtherincomeID 
     * @return ApiResponse<OtherincomeGetCommunicationListV1Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun otherincomeGetCommunicationListV1WithHttpInfo(pkiOtherincomeID: kotlin.Int) : ApiResponse<OtherincomeGetCommunicationListV1Response?> {
        val localVariableConfig = otherincomeGetCommunicationListV1RequestConfig(pkiOtherincomeID = pkiOtherincomeID)

        return request<Unit, OtherincomeGetCommunicationListV1Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation otherincomeGetCommunicationListV1
     *
     * @param pkiOtherincomeID 
     * @return RequestConfig
     */
    fun otherincomeGetCommunicationListV1RequestConfig(pkiOtherincomeID: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/1/object/otherincome/{pkiOtherincomeID}/getCommunicationList".replace("{"+"pkiOtherincomeID"+"}", encodeURIComponent(pkiOtherincomeID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * GET /1/object/otherincome/{pkiOtherincomeID}/getCommunicationrecipients
     * Retrieve Otherincome&#39;s Communicationrecipient
     * 
     * @param pkiOtherincomeID 
     * @return OtherincomeGetCommunicationrecipientsV1Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun otherincomeGetCommunicationrecipientsV1(pkiOtherincomeID: kotlin.Int) : OtherincomeGetCommunicationrecipientsV1Response {
        val localVarResponse = otherincomeGetCommunicationrecipientsV1WithHttpInfo(pkiOtherincomeID = pkiOtherincomeID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as OtherincomeGetCommunicationrecipientsV1Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /1/object/otherincome/{pkiOtherincomeID}/getCommunicationrecipients
     * Retrieve Otherincome&#39;s Communicationrecipient
     * 
     * @param pkiOtherincomeID 
     * @return ApiResponse<OtherincomeGetCommunicationrecipientsV1Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun otherincomeGetCommunicationrecipientsV1WithHttpInfo(pkiOtherincomeID: kotlin.Int) : ApiResponse<OtherincomeGetCommunicationrecipientsV1Response?> {
        val localVariableConfig = otherincomeGetCommunicationrecipientsV1RequestConfig(pkiOtherincomeID = pkiOtherincomeID)

        return request<Unit, OtherincomeGetCommunicationrecipientsV1Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation otherincomeGetCommunicationrecipientsV1
     *
     * @param pkiOtherincomeID 
     * @return RequestConfig
     */
    fun otherincomeGetCommunicationrecipientsV1RequestConfig(pkiOtherincomeID: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/1/object/otherincome/{pkiOtherincomeID}/getCommunicationrecipients".replace("{"+"pkiOtherincomeID"+"}", encodeURIComponent(pkiOtherincomeID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * GET /1/object/otherincome/{pkiOtherincomeID}/getCommunicationsenders
     * Retrieve Otherincome&#39;s Communicationsender
     * 
     * @param pkiOtherincomeID 
     * @return OtherincomeGetCommunicationsendersV1Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun otherincomeGetCommunicationsendersV1(pkiOtherincomeID: kotlin.Int) : OtherincomeGetCommunicationsendersV1Response {
        val localVarResponse = otherincomeGetCommunicationsendersV1WithHttpInfo(pkiOtherincomeID = pkiOtherincomeID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as OtherincomeGetCommunicationsendersV1Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /1/object/otherincome/{pkiOtherincomeID}/getCommunicationsenders
     * Retrieve Otherincome&#39;s Communicationsender
     * 
     * @param pkiOtherincomeID 
     * @return ApiResponse<OtherincomeGetCommunicationsendersV1Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun otherincomeGetCommunicationsendersV1WithHttpInfo(pkiOtherincomeID: kotlin.Int) : ApiResponse<OtherincomeGetCommunicationsendersV1Response?> {
        val localVariableConfig = otherincomeGetCommunicationsendersV1RequestConfig(pkiOtherincomeID = pkiOtherincomeID)

        return request<Unit, OtherincomeGetCommunicationsendersV1Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation otherincomeGetCommunicationsendersV1
     *
     * @param pkiOtherincomeID 
     * @return RequestConfig
     */
    fun otherincomeGetCommunicationsendersV1RequestConfig(pkiOtherincomeID: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/1/object/otherincome/{pkiOtherincomeID}/getCommunicationsenders".replace("{"+"pkiOtherincomeID"+"}", encodeURIComponent(pkiOtherincomeID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
