/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package eZmaxApi.apis

import java.io.IOException
import okhttp3.Call
import okhttp3.HttpUrl

import eZmaxApi.models.CommonResponseError
import eZmaxApi.models.HeaderAcceptLanguage
import eZmaxApi.models.UserstagedCreateUserV1Response
import eZmaxApi.models.UserstagedDeleteObjectV1Response
import eZmaxApi.models.UserstagedGetListV1Response
import eZmaxApi.models.UserstagedGetObjectV2Response
import eZmaxApi.models.UserstagedMapV1Request
import eZmaxApi.models.UserstagedMapV1Response

import com.squareup.moshi.Json

import eZmaxApi.infrastructure.ApiClient
import eZmaxApi.infrastructure.ApiResponse
import eZmaxApi.infrastructure.ClientException
import eZmaxApi.infrastructure.ClientError
import eZmaxApi.infrastructure.ServerException
import eZmaxApi.infrastructure.ServerError
import eZmaxApi.infrastructure.MultiValueMap
import eZmaxApi.infrastructure.PartConfig
import eZmaxApi.infrastructure.RequestConfig
import eZmaxApi.infrastructure.RequestMethod
import eZmaxApi.infrastructure.ResponseType
import eZmaxApi.infrastructure.Success
import eZmaxApi.infrastructure.toMultiValue

class ObjectUserstagedApi(basePath: kotlin.String = defaultBasePath, client: Call.Factory = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://prod.api.appcluster01.ca-central-1.ezmax.com/rest")
        }
    }

    /**
     * Create a User from a Userstaged and then map it
     * Default values will be used while creating the User. If you need to change those values, you should use the route to edit a User.
     * @param pkiUserstagedID 
     * @param body 
     * @return UserstagedCreateUserV1Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun userstagedCreateUserV1(pkiUserstagedID: kotlin.Int, body: kotlin.Any) : UserstagedCreateUserV1Response {
        val localVarResponse = userstagedCreateUserV1WithHttpInfo(pkiUserstagedID = pkiUserstagedID, body = body)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as UserstagedCreateUserV1Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Create a User from a Userstaged and then map it
     * Default values will be used while creating the User. If you need to change those values, you should use the route to edit a User.
     * @param pkiUserstagedID 
     * @param body 
     * @return ApiResponse<UserstagedCreateUserV1Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun userstagedCreateUserV1WithHttpInfo(pkiUserstagedID: kotlin.Int, body: kotlin.Any) : ApiResponse<UserstagedCreateUserV1Response?> {
        val localVariableConfig = userstagedCreateUserV1RequestConfig(pkiUserstagedID = pkiUserstagedID, body = body)

        return request<kotlin.Any, UserstagedCreateUserV1Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation userstagedCreateUserV1
     *
     * @param pkiUserstagedID 
     * @param body 
     * @return RequestConfig
     */
    fun userstagedCreateUserV1RequestConfig(pkiUserstagedID: kotlin.Int, body: kotlin.Any) : RequestConfig<kotlin.Any> {
        val localVariableBody = body
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/1/object/userstaged/{pkiUserstagedID}/createUser".replace("{"+"pkiUserstagedID"+"}", encodeURIComponent(pkiUserstagedID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Delete an existing Userstaged
     * 
     * @param pkiUserstagedID 
     * @return UserstagedDeleteObjectV1Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun userstagedDeleteObjectV1(pkiUserstagedID: kotlin.Int) : UserstagedDeleteObjectV1Response {
        val localVarResponse = userstagedDeleteObjectV1WithHttpInfo(pkiUserstagedID = pkiUserstagedID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as UserstagedDeleteObjectV1Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Delete an existing Userstaged
     * 
     * @param pkiUserstagedID 
     * @return ApiResponse<UserstagedDeleteObjectV1Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun userstagedDeleteObjectV1WithHttpInfo(pkiUserstagedID: kotlin.Int) : ApiResponse<UserstagedDeleteObjectV1Response?> {
        val localVariableConfig = userstagedDeleteObjectV1RequestConfig(pkiUserstagedID = pkiUserstagedID)

        return request<Unit, UserstagedDeleteObjectV1Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation userstagedDeleteObjectV1
     *
     * @param pkiUserstagedID 
     * @return RequestConfig
     */
    fun userstagedDeleteObjectV1RequestConfig(pkiUserstagedID: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/1/object/userstaged/{pkiUserstagedID}".replace("{"+"pkiUserstagedID"+"}", encodeURIComponent(pkiUserstagedID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter eOrderBy
     */
     enum class EOrderByUserstagedGetListV1(val value: kotlin.String) {
         @Json(name = "pkiUserstagedID_ASC") pkiUserstagedID_ASC("pkiUserstagedID_ASC"),
         @Json(name = "pkiUserstagedID_DESC") pkiUserstagedID_DESC("pkiUserstagedID_DESC"),
         @Json(name = "sEmailAddress_ASC") sEmailAddress_ASC("sEmailAddress_ASC"),
         @Json(name = "sEmailAddress_DESC") sEmailAddress_DESC("sEmailAddress_DESC"),
         @Json(name = "sUserstagedFirstname_ASC") sUserstagedFirstname_ASC("sUserstagedFirstname_ASC"),
         @Json(name = "sUserstagedFirstname_DESC") sUserstagedFirstname_DESC("sUserstagedFirstname_DESC"),
         @Json(name = "sUserstagedLastname_ASC") sUserstagedLastname_ASC("sUserstagedLastname_ASC"),
         @Json(name = "sUserstagedLastname_DESC") sUserstagedLastname_DESC("sUserstagedLastname_DESC"),
         @Json(name = "sUserstagedExternalid_ASC") sUserstagedExternalid_ASC("sUserstagedExternalid_ASC"),
         @Json(name = "sUserstagedExternalid_DESC") sUserstagedExternalid_DESC("sUserstagedExternalid_DESC");

        /**
         * Override [toString()] to avoid using the enum variable name as the value, and instead use
         * the actual value defined in the API spec file.
         *
         * This solves a problem when the variable name and its value are different, and ensures that
         * the client sends the correct enum values to the server always.
         */
        override fun toString(): kotlin.String = "$value"
     }

    /**
     * Retrieve Userstaged list
     * 
     * @param eOrderBy Specify how you want the results to be sorted (optional)
     * @param iRowMax  (optional)
     * @param iRowOffset  (optional, default to 0)
     * @param acceptLanguage  (optional)
     * @param sFilter  (optional)
     * @return UserstagedGetListV1Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun userstagedGetListV1(eOrderBy: EOrderByUserstagedGetListV1? = null, iRowMax: kotlin.Int? = null, iRowOffset: kotlin.Int? = 0, acceptLanguage: HeaderAcceptLanguage? = null, sFilter: kotlin.String? = null) : UserstagedGetListV1Response {
        val localVarResponse = userstagedGetListV1WithHttpInfo(eOrderBy = eOrderBy, iRowMax = iRowMax, iRowOffset = iRowOffset, acceptLanguage = acceptLanguage, sFilter = sFilter)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as UserstagedGetListV1Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieve Userstaged list
     * 
     * @param eOrderBy Specify how you want the results to be sorted (optional)
     * @param iRowMax  (optional)
     * @param iRowOffset  (optional, default to 0)
     * @param acceptLanguage  (optional)
     * @param sFilter  (optional)
     * @return ApiResponse<UserstagedGetListV1Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun userstagedGetListV1WithHttpInfo(eOrderBy: EOrderByUserstagedGetListV1?, iRowMax: kotlin.Int?, iRowOffset: kotlin.Int?, acceptLanguage: HeaderAcceptLanguage?, sFilter: kotlin.String?) : ApiResponse<UserstagedGetListV1Response?> {
        val localVariableConfig = userstagedGetListV1RequestConfig(eOrderBy = eOrderBy, iRowMax = iRowMax, iRowOffset = iRowOffset, acceptLanguage = acceptLanguage, sFilter = sFilter)

        return request<Unit, UserstagedGetListV1Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation userstagedGetListV1
     *
     * @param eOrderBy Specify how you want the results to be sorted (optional)
     * @param iRowMax  (optional)
     * @param iRowOffset  (optional, default to 0)
     * @param acceptLanguage  (optional)
     * @param sFilter  (optional)
     * @return RequestConfig
     */
    fun userstagedGetListV1RequestConfig(eOrderBy: EOrderByUserstagedGetListV1?, iRowMax: kotlin.Int?, iRowOffset: kotlin.Int?, acceptLanguage: HeaderAcceptLanguage?, sFilter: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (eOrderBy != null) {
                    put("eOrderBy", listOf(eOrderBy.value))
                }
                if (iRowMax != null) {
                    put("iRowMax", listOf(iRowMax.toString()))
                }
                if (iRowOffset != null) {
                    put("iRowOffset", listOf(iRowOffset.toString()))
                }
                if (sFilter != null) {
                    put("sFilter", listOf(sFilter.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/1/object/userstaged/getList",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Retrieve an existing Userstaged
     * 
     * @param pkiUserstagedID 
     * @return UserstagedGetObjectV2Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun userstagedGetObjectV2(pkiUserstagedID: kotlin.Int) : UserstagedGetObjectV2Response {
        val localVarResponse = userstagedGetObjectV2WithHttpInfo(pkiUserstagedID = pkiUserstagedID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as UserstagedGetObjectV2Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieve an existing Userstaged
     * 
     * @param pkiUserstagedID 
     * @return ApiResponse<UserstagedGetObjectV2Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun userstagedGetObjectV2WithHttpInfo(pkiUserstagedID: kotlin.Int) : ApiResponse<UserstagedGetObjectV2Response?> {
        val localVariableConfig = userstagedGetObjectV2RequestConfig(pkiUserstagedID = pkiUserstagedID)

        return request<Unit, UserstagedGetObjectV2Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation userstagedGetObjectV2
     *
     * @param pkiUserstagedID 
     * @return RequestConfig
     */
    fun userstagedGetObjectV2RequestConfig(pkiUserstagedID: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/2/object/userstaged/{pkiUserstagedID}".replace("{"+"pkiUserstagedID"+"}", encodeURIComponent(pkiUserstagedID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Map the Userstaged to an existing user
     * 
     * @param pkiUserstagedID 
     * @param userstagedMapV1Request 
     * @return UserstagedMapV1Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun userstagedMapV1(pkiUserstagedID: kotlin.Int, userstagedMapV1Request: UserstagedMapV1Request) : UserstagedMapV1Response {
        val localVarResponse = userstagedMapV1WithHttpInfo(pkiUserstagedID = pkiUserstagedID, userstagedMapV1Request = userstagedMapV1Request)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as UserstagedMapV1Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Map the Userstaged to an existing user
     * 
     * @param pkiUserstagedID 
     * @param userstagedMapV1Request 
     * @return ApiResponse<UserstagedMapV1Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun userstagedMapV1WithHttpInfo(pkiUserstagedID: kotlin.Int, userstagedMapV1Request: UserstagedMapV1Request) : ApiResponse<UserstagedMapV1Response?> {
        val localVariableConfig = userstagedMapV1RequestConfig(pkiUserstagedID = pkiUserstagedID, userstagedMapV1Request = userstagedMapV1Request)

        return request<UserstagedMapV1Request, UserstagedMapV1Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation userstagedMapV1
     *
     * @param pkiUserstagedID 
     * @param userstagedMapV1Request 
     * @return RequestConfig
     */
    fun userstagedMapV1RequestConfig(pkiUserstagedID: kotlin.Int, userstagedMapV1Request: UserstagedMapV1Request) : RequestConfig<UserstagedMapV1Request> {
        val localVariableBody = userstagedMapV1Request
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/1/object/userstaged/{pkiUserstagedID}/map".replace("{"+"pkiUserstagedID"+"}", encodeURIComponent(pkiUserstagedID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
