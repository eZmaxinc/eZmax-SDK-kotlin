/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package eZmaxApi.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import eZmaxApi.models.CommonMinusResponseMinusError
import eZmaxApi.models.HeaderMinusAcceptMinusLanguage
import eZmaxApi.models.UserstagedMinusDeleteObjectMinusV1MinusResponse
import eZmaxApi.models.UserstagedMinusGetListMinusV1MinusResponse
import eZmaxApi.models.UserstagedMinusGetObjectMinusV2MinusResponse
import eZmaxApi.models.UserstagedMinusMapMinusV1MinusRequest
import eZmaxApi.models.UserstagedMinusMapMinusV1MinusResponse

import com.squareup.moshi.Json

import eZmaxApi.infrastructure.ApiClient
import eZmaxApi.infrastructure.ApiResponse
import eZmaxApi.infrastructure.ClientException
import eZmaxApi.infrastructure.ClientError
import eZmaxApi.infrastructure.ServerException
import eZmaxApi.infrastructure.ServerError
import eZmaxApi.infrastructure.MultiValueMap
import eZmaxApi.infrastructure.PartConfig
import eZmaxApi.infrastructure.RequestConfig
import eZmaxApi.infrastructure.RequestMethod
import eZmaxApi.infrastructure.ResponseType
import eZmaxApi.infrastructure.Success
import eZmaxApi.infrastructure.toMultiValue

class ObjectUserstagedApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://prod.api.appcluster01.ca-central-1.ezmax.com/rest")
        }
    }

    /**
     * Delete an existing Userstaged
     * 
     * @param pkiUserstagedID The unique ID of the Userstaged
     * @return UserstagedMinusDeleteObjectMinusV1MinusResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun userstagedDeleteObjectV1(pkiUserstagedID: kotlin.Int) : UserstagedMinusDeleteObjectMinusV1MinusResponse {
        val localVarResponse = userstagedDeleteObjectV1WithHttpInfo(pkiUserstagedID = pkiUserstagedID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as UserstagedMinusDeleteObjectMinusV1MinusResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Delete an existing Userstaged
     * 
     * @param pkiUserstagedID The unique ID of the Userstaged
     * @return ApiResponse<UserstagedMinusDeleteObjectMinusV1MinusResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun userstagedDeleteObjectV1WithHttpInfo(pkiUserstagedID: kotlin.Int) : ApiResponse<UserstagedMinusDeleteObjectMinusV1MinusResponse?> {
        val localVariableConfig = userstagedDeleteObjectV1RequestConfig(pkiUserstagedID = pkiUserstagedID)

        return request<Unit, UserstagedMinusDeleteObjectMinusV1MinusResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation userstagedDeleteObjectV1
     *
     * @param pkiUserstagedID The unique ID of the Userstaged
     * @return RequestConfig
     */
    fun userstagedDeleteObjectV1RequestConfig(pkiUserstagedID: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/1/object/userstaged/{pkiUserstagedID}".replace("{"+"pkiUserstagedID"+"}", encodeURIComponent(pkiUserstagedID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter eOrderBy
     */
     enum class EOrderBy_userstagedGetListV1(val value: kotlin.String) {
         @Json(name = "pkiUserstagedID_ASC") pkiUserstagedID_ASC("pkiUserstagedID_ASC"),
         @Json(name = "pkiUserstagedID_DESC") pkiUserstagedID_DESC("pkiUserstagedID_DESC"),
         @Json(name = "sEmailAddress_ASC") sEmailAddress_ASC("sEmailAddress_ASC"),
         @Json(name = "sEmailAddress_DESC") sEmailAddress_DESC("sEmailAddress_DESC"),
         @Json(name = "sUserstagedFirstname_ASC") sUserstagedFirstname_ASC("sUserstagedFirstname_ASC"),
         @Json(name = "sUserstagedFirstname_DESC") sUserstagedFirstname_DESC("sUserstagedFirstname_DESC"),
         @Json(name = "sUserstagedLastname_ASC") sUserstagedLastname_ASC("sUserstagedLastname_ASC"),
         @Json(name = "sUserstagedLastname_DESC") sUserstagedLastname_DESC("sUserstagedLastname_DESC"),
         @Json(name = "sUserstagedExternalid_ASC") sUserstagedExternalid_ASC("sUserstagedExternalid_ASC"),
         @Json(name = "sUserstagedExternalid_DESC") sUserstagedExternalid_DESC("sUserstagedExternalid_DESC")
     }

    /**
     * Retrieve Userstaged list
     * 
     * @param eOrderBy Specify how you want the results to be sorted (optional)
     * @param iRowMax  (optional, default to 10000)
     * @param iRowOffset  (optional, default to 0)
     * @param acceptLanguage  (optional)
     * @param sFilter  (optional)
     * @return UserstagedMinusGetListMinusV1MinusResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun userstagedGetListV1(eOrderBy: EOrderBy_userstagedGetListV1? = null, iRowMax: kotlin.Int? = 10000, iRowOffset: kotlin.Int? = 0, acceptLanguage: HeaderMinusAcceptMinusLanguage? = null, sFilter: kotlin.String? = null) : UserstagedMinusGetListMinusV1MinusResponse {
        val localVarResponse = userstagedGetListV1WithHttpInfo(eOrderBy = eOrderBy, iRowMax = iRowMax, iRowOffset = iRowOffset, acceptLanguage = acceptLanguage, sFilter = sFilter)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as UserstagedMinusGetListMinusV1MinusResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieve Userstaged list
     * 
     * @param eOrderBy Specify how you want the results to be sorted (optional)
     * @param iRowMax  (optional, default to 10000)
     * @param iRowOffset  (optional, default to 0)
     * @param acceptLanguage  (optional)
     * @param sFilter  (optional)
     * @return ApiResponse<UserstagedMinusGetListMinusV1MinusResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun userstagedGetListV1WithHttpInfo(eOrderBy: EOrderBy_userstagedGetListV1?, iRowMax: kotlin.Int?, iRowOffset: kotlin.Int?, acceptLanguage: HeaderMinusAcceptMinusLanguage?, sFilter: kotlin.String?) : ApiResponse<UserstagedMinusGetListMinusV1MinusResponse?> {
        val localVariableConfig = userstagedGetListV1RequestConfig(eOrderBy = eOrderBy, iRowMax = iRowMax, iRowOffset = iRowOffset, acceptLanguage = acceptLanguage, sFilter = sFilter)

        return request<Unit, UserstagedMinusGetListMinusV1MinusResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation userstagedGetListV1
     *
     * @param eOrderBy Specify how you want the results to be sorted (optional)
     * @param iRowMax  (optional, default to 10000)
     * @param iRowOffset  (optional, default to 0)
     * @param acceptLanguage  (optional)
     * @param sFilter  (optional)
     * @return RequestConfig
     */
    fun userstagedGetListV1RequestConfig(eOrderBy: EOrderBy_userstagedGetListV1?, iRowMax: kotlin.Int?, iRowOffset: kotlin.Int?, acceptLanguage: HeaderMinusAcceptMinusLanguage?, sFilter: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (eOrderBy != null) {
                    put("eOrderBy", listOf(eOrderBy.toString()))
                }
                if (iRowMax != null) {
                    put("iRowMax", listOf(iRowMax.toString()))
                }
                if (iRowOffset != null) {
                    put("iRowOffset", listOf(iRowOffset.toString()))
                }
                if (sFilter != null) {
                    put("sFilter", listOf(sFilter.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/1/object/userstaged/getList",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Retrieve an existing Userstaged
     * 
     * @param pkiUserstagedID The unique ID of the Userstaged
     * @return UserstagedMinusGetObjectMinusV2MinusResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun userstagedGetObjectV2(pkiUserstagedID: kotlin.Int) : UserstagedMinusGetObjectMinusV2MinusResponse {
        val localVarResponse = userstagedGetObjectV2WithHttpInfo(pkiUserstagedID = pkiUserstagedID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as UserstagedMinusGetObjectMinusV2MinusResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieve an existing Userstaged
     * 
     * @param pkiUserstagedID The unique ID of the Userstaged
     * @return ApiResponse<UserstagedMinusGetObjectMinusV2MinusResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun userstagedGetObjectV2WithHttpInfo(pkiUserstagedID: kotlin.Int) : ApiResponse<UserstagedMinusGetObjectMinusV2MinusResponse?> {
        val localVariableConfig = userstagedGetObjectV2RequestConfig(pkiUserstagedID = pkiUserstagedID)

        return request<Unit, UserstagedMinusGetObjectMinusV2MinusResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation userstagedGetObjectV2
     *
     * @param pkiUserstagedID The unique ID of the Userstaged
     * @return RequestConfig
     */
    fun userstagedGetObjectV2RequestConfig(pkiUserstagedID: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/2/object/userstaged/{pkiUserstagedID}".replace("{"+"pkiUserstagedID"+"}", encodeURIComponent(pkiUserstagedID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Map the Userstaged to an existing user
     * 
     * @param pkiUserstagedID The unique ID of the Userstaged
     * @param userstagedMinusMapMinusV1MinusRequest 
     * @return UserstagedMinusMapMinusV1MinusResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun userstagedMapV1(pkiUserstagedID: kotlin.Int, userstagedMinusMapMinusV1MinusRequest: UserstagedMinusMapMinusV1MinusRequest) : UserstagedMinusMapMinusV1MinusResponse {
        val localVarResponse = userstagedMapV1WithHttpInfo(pkiUserstagedID = pkiUserstagedID, userstagedMinusMapMinusV1MinusRequest = userstagedMinusMapMinusV1MinusRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as UserstagedMinusMapMinusV1MinusResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Map the Userstaged to an existing user
     * 
     * @param pkiUserstagedID The unique ID of the Userstaged
     * @param userstagedMinusMapMinusV1MinusRequest 
     * @return ApiResponse<UserstagedMinusMapMinusV1MinusResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun userstagedMapV1WithHttpInfo(pkiUserstagedID: kotlin.Int, userstagedMinusMapMinusV1MinusRequest: UserstagedMinusMapMinusV1MinusRequest) : ApiResponse<UserstagedMinusMapMinusV1MinusResponse?> {
        val localVariableConfig = userstagedMapV1RequestConfig(pkiUserstagedID = pkiUserstagedID, userstagedMinusMapMinusV1MinusRequest = userstagedMinusMapMinusV1MinusRequest)

        return request<UserstagedMinusMapMinusV1MinusRequest, UserstagedMinusMapMinusV1MinusResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation userstagedMapV1
     *
     * @param pkiUserstagedID The unique ID of the Userstaged
     * @param userstagedMinusMapMinusV1MinusRequest 
     * @return RequestConfig
     */
    fun userstagedMapV1RequestConfig(pkiUserstagedID: kotlin.Int, userstagedMinusMapMinusV1MinusRequest: UserstagedMinusMapMinusV1MinusRequest) : RequestConfig<UserstagedMinusMapMinusV1MinusRequest> {
        val localVariableBody = userstagedMinusMapMinusV1MinusRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/1/object/userstaged/{pkiUserstagedID}/map".replace("{"+"pkiUserstagedID"+"}", encodeURIComponent(pkiUserstagedID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
