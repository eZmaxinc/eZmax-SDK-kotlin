/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package eZmaxApi.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import eZmaxApi.models.CommonResponseError
import eZmaxApi.models.DiscussionmessageCreateObjectV1Request
import eZmaxApi.models.DiscussionmessageCreateObjectV1Response
import eZmaxApi.models.DiscussionmessageDeleteObjectV1Response
import eZmaxApi.models.DiscussionmessagePatchObjectV1Request
import eZmaxApi.models.DiscussionmessagePatchObjectV1Response

import com.squareup.moshi.Json

import eZmaxApi.infrastructure.ApiClient
import eZmaxApi.infrastructure.ApiResponse
import eZmaxApi.infrastructure.ClientException
import eZmaxApi.infrastructure.ClientError
import eZmaxApi.infrastructure.ServerException
import eZmaxApi.infrastructure.ServerError
import eZmaxApi.infrastructure.MultiValueMap
import eZmaxApi.infrastructure.PartConfig
import eZmaxApi.infrastructure.RequestConfig
import eZmaxApi.infrastructure.RequestMethod
import eZmaxApi.infrastructure.ResponseType
import eZmaxApi.infrastructure.Success
import eZmaxApi.infrastructure.toMultiValue

class ObjectDiscussionmessageApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://prod.api.appcluster01.ca-central-1.ezmax.com/rest")
        }
    }

    /**
     * Create a new Discussionmessage
     * The endpoint allows to create one or many elements at once.
     * @param discussionmessageCreateObjectV1Request 
     * @return DiscussionmessageCreateObjectV1Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun discussionmessageCreateObjectV1(discussionmessageCreateObjectV1Request: DiscussionmessageCreateObjectV1Request) : DiscussionmessageCreateObjectV1Response {
        val localVarResponse = discussionmessageCreateObjectV1WithHttpInfo(discussionmessageCreateObjectV1Request = discussionmessageCreateObjectV1Request)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as DiscussionmessageCreateObjectV1Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Create a new Discussionmessage
     * The endpoint allows to create one or many elements at once.
     * @param discussionmessageCreateObjectV1Request 
     * @return ApiResponse<DiscussionmessageCreateObjectV1Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun discussionmessageCreateObjectV1WithHttpInfo(discussionmessageCreateObjectV1Request: DiscussionmessageCreateObjectV1Request) : ApiResponse<DiscussionmessageCreateObjectV1Response?> {
        val localVariableConfig = discussionmessageCreateObjectV1RequestConfig(discussionmessageCreateObjectV1Request = discussionmessageCreateObjectV1Request)

        return request<DiscussionmessageCreateObjectV1Request, DiscussionmessageCreateObjectV1Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation discussionmessageCreateObjectV1
     *
     * @param discussionmessageCreateObjectV1Request 
     * @return RequestConfig
     */
    fun discussionmessageCreateObjectV1RequestConfig(discussionmessageCreateObjectV1Request: DiscussionmessageCreateObjectV1Request) : RequestConfig<DiscussionmessageCreateObjectV1Request> {
        val localVariableBody = discussionmessageCreateObjectV1Request
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/1/object/discussionmessage",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Delete an existing Discussionmessage
     * 
     * @param pkiDiscussionmessageID The unique ID of the Discussionmessage
     * @return DiscussionmessageDeleteObjectV1Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun discussionmessageDeleteObjectV1(pkiDiscussionmessageID: kotlin.Int) : DiscussionmessageDeleteObjectV1Response {
        val localVarResponse = discussionmessageDeleteObjectV1WithHttpInfo(pkiDiscussionmessageID = pkiDiscussionmessageID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as DiscussionmessageDeleteObjectV1Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Delete an existing Discussionmessage
     * 
     * @param pkiDiscussionmessageID The unique ID of the Discussionmessage
     * @return ApiResponse<DiscussionmessageDeleteObjectV1Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun discussionmessageDeleteObjectV1WithHttpInfo(pkiDiscussionmessageID: kotlin.Int) : ApiResponse<DiscussionmessageDeleteObjectV1Response?> {
        val localVariableConfig = discussionmessageDeleteObjectV1RequestConfig(pkiDiscussionmessageID = pkiDiscussionmessageID)

        return request<Unit, DiscussionmessageDeleteObjectV1Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation discussionmessageDeleteObjectV1
     *
     * @param pkiDiscussionmessageID The unique ID of the Discussionmessage
     * @return RequestConfig
     */
    fun discussionmessageDeleteObjectV1RequestConfig(pkiDiscussionmessageID: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/1/object/discussionmessage/{pkiDiscussionmessageID}".replace("{"+"pkiDiscussionmessageID"+"}", encodeURIComponent(pkiDiscussionmessageID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Patch an existing Discussionmessage
     * 
     * @param pkiDiscussionmessageID The unique ID of the Discussionmessage
     * @param discussionmessagePatchObjectV1Request 
     * @return DiscussionmessagePatchObjectV1Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun discussionmessagePatchObjectV1(pkiDiscussionmessageID: kotlin.Int, discussionmessagePatchObjectV1Request: DiscussionmessagePatchObjectV1Request) : DiscussionmessagePatchObjectV1Response {
        val localVarResponse = discussionmessagePatchObjectV1WithHttpInfo(pkiDiscussionmessageID = pkiDiscussionmessageID, discussionmessagePatchObjectV1Request = discussionmessagePatchObjectV1Request)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as DiscussionmessagePatchObjectV1Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Patch an existing Discussionmessage
     * 
     * @param pkiDiscussionmessageID The unique ID of the Discussionmessage
     * @param discussionmessagePatchObjectV1Request 
     * @return ApiResponse<DiscussionmessagePatchObjectV1Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun discussionmessagePatchObjectV1WithHttpInfo(pkiDiscussionmessageID: kotlin.Int, discussionmessagePatchObjectV1Request: DiscussionmessagePatchObjectV1Request) : ApiResponse<DiscussionmessagePatchObjectV1Response?> {
        val localVariableConfig = discussionmessagePatchObjectV1RequestConfig(pkiDiscussionmessageID = pkiDiscussionmessageID, discussionmessagePatchObjectV1Request = discussionmessagePatchObjectV1Request)

        return request<DiscussionmessagePatchObjectV1Request, DiscussionmessagePatchObjectV1Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation discussionmessagePatchObjectV1
     *
     * @param pkiDiscussionmessageID The unique ID of the Discussionmessage
     * @param discussionmessagePatchObjectV1Request 
     * @return RequestConfig
     */
    fun discussionmessagePatchObjectV1RequestConfig(pkiDiscussionmessageID: kotlin.Int, discussionmessagePatchObjectV1Request: DiscussionmessagePatchObjectV1Request) : RequestConfig<DiscussionmessagePatchObjectV1Request> {
        val localVariableBody = discussionmessagePatchObjectV1Request
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PATCH,
            path = "/1/object/discussionmessage/{pkiDiscussionmessageID}".replace("{"+"pkiDiscussionmessageID"+"}", encodeURIComponent(pkiDiscussionmessageID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
