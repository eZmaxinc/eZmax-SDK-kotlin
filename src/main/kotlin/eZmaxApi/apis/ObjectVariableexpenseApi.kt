/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package eZmaxApi.apis

import java.io.IOException
import okhttp3.Call
import okhttp3.HttpUrl

import eZmaxApi.models.CommonResponse
import eZmaxApi.models.CommonResponseError
import eZmaxApi.models.HeaderAcceptLanguage
import eZmaxApi.models.VariableexpenseCreateObjectV1Request
import eZmaxApi.models.VariableexpenseCreateObjectV1Response
import eZmaxApi.models.VariableexpenseEditObjectV1Request
import eZmaxApi.models.VariableexpenseGetAutocompleteV2Response
import eZmaxApi.models.VariableexpenseGetListV1Response
import eZmaxApi.models.VariableexpenseGetObjectV2Response

import com.squareup.moshi.Json

import eZmaxApi.infrastructure.ApiClient
import eZmaxApi.infrastructure.ApiResponse
import eZmaxApi.infrastructure.ClientException
import eZmaxApi.infrastructure.ClientError
import eZmaxApi.infrastructure.ServerException
import eZmaxApi.infrastructure.ServerError
import eZmaxApi.infrastructure.MultiValueMap
import eZmaxApi.infrastructure.PartConfig
import eZmaxApi.infrastructure.RequestConfig
import eZmaxApi.infrastructure.RequestMethod
import eZmaxApi.infrastructure.ResponseType
import eZmaxApi.infrastructure.Success
import eZmaxApi.infrastructure.toMultiValue

class ObjectVariableexpenseApi(basePath: kotlin.String = defaultBasePath, client: Call.Factory = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://prod.api.appcluster01.ca-central-1.ezmax.com/rest")
        }
    }

    /**
     * Create a new Variableexpense
     * The endpoint allows to create one or many elements at once.
     * @param variableexpenseCreateObjectV1Request 
     * @return VariableexpenseCreateObjectV1Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun variableexpenseCreateObjectV1(variableexpenseCreateObjectV1Request: VariableexpenseCreateObjectV1Request) : VariableexpenseCreateObjectV1Response {
        val localVarResponse = variableexpenseCreateObjectV1WithHttpInfo(variableexpenseCreateObjectV1Request = variableexpenseCreateObjectV1Request)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as VariableexpenseCreateObjectV1Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Create a new Variableexpense
     * The endpoint allows to create one or many elements at once.
     * @param variableexpenseCreateObjectV1Request 
     * @return ApiResponse<VariableexpenseCreateObjectV1Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun variableexpenseCreateObjectV1WithHttpInfo(variableexpenseCreateObjectV1Request: VariableexpenseCreateObjectV1Request) : ApiResponse<VariableexpenseCreateObjectV1Response?> {
        val localVariableConfig = variableexpenseCreateObjectV1RequestConfig(variableexpenseCreateObjectV1Request = variableexpenseCreateObjectV1Request)

        return request<VariableexpenseCreateObjectV1Request, VariableexpenseCreateObjectV1Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation variableexpenseCreateObjectV1
     *
     * @param variableexpenseCreateObjectV1Request 
     * @return RequestConfig
     */
    fun variableexpenseCreateObjectV1RequestConfig(variableexpenseCreateObjectV1Request: VariableexpenseCreateObjectV1Request) : RequestConfig<VariableexpenseCreateObjectV1Request> {
        val localVariableBody = variableexpenseCreateObjectV1Request
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/1/object/variableexpense",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Edit an existing Variableexpense
     * 
     * @param pkiVariableexpenseID 
     * @param variableexpenseEditObjectV1Request 
     * @return CommonResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun variableexpenseEditObjectV1(pkiVariableexpenseID: kotlin.Int, variableexpenseEditObjectV1Request: VariableexpenseEditObjectV1Request) : CommonResponse {
        val localVarResponse = variableexpenseEditObjectV1WithHttpInfo(pkiVariableexpenseID = pkiVariableexpenseID, variableexpenseEditObjectV1Request = variableexpenseEditObjectV1Request)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CommonResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Edit an existing Variableexpense
     * 
     * @param pkiVariableexpenseID 
     * @param variableexpenseEditObjectV1Request 
     * @return ApiResponse<CommonResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun variableexpenseEditObjectV1WithHttpInfo(pkiVariableexpenseID: kotlin.Int, variableexpenseEditObjectV1Request: VariableexpenseEditObjectV1Request) : ApiResponse<CommonResponse?> {
        val localVariableConfig = variableexpenseEditObjectV1RequestConfig(pkiVariableexpenseID = pkiVariableexpenseID, variableexpenseEditObjectV1Request = variableexpenseEditObjectV1Request)

        return request<VariableexpenseEditObjectV1Request, CommonResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation variableexpenseEditObjectV1
     *
     * @param pkiVariableexpenseID 
     * @param variableexpenseEditObjectV1Request 
     * @return RequestConfig
     */
    fun variableexpenseEditObjectV1RequestConfig(pkiVariableexpenseID: kotlin.Int, variableexpenseEditObjectV1Request: VariableexpenseEditObjectV1Request) : RequestConfig<VariableexpenseEditObjectV1Request> {
        val localVariableBody = variableexpenseEditObjectV1Request
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/1/object/variableexpense/{pkiVariableexpenseID}".replace("{"+"pkiVariableexpenseID"+"}", encodeURIComponent(pkiVariableexpenseID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter sSelector
     */
     enum class SSelectorVariableexpenseGetAutocompleteV2(val value: kotlin.String) {
         @Json(name = "All") All("All");

        /**
         * Override [toString()] to avoid using the enum variable name as the value, and instead use
         * the actual value defined in the API spec file.
         *
         * This solves a problem when the variable name and its value are different, and ensures that
         * the client sends the correct enum values to the server always.
         */
        override fun toString(): kotlin.String = "$value"
     }

    /**
     * enum for parameter eFilterActive
     */
     enum class EFilterActiveVariableexpenseGetAutocompleteV2(val value: kotlin.String) {
         @Json(name = "All") All("All"),
         @Json(name = "Active") Active("Active"),
         @Json(name = "Inactive") Inactive("Inactive");

        /**
         * Override [toString()] to avoid using the enum variable name as the value, and instead use
         * the actual value defined in the API spec file.
         *
         * This solves a problem when the variable name and its value are different, and ensures that
         * the client sends the correct enum values to the server always.
         */
        override fun toString(): kotlin.String = "$value"
     }

    /**
     * Retrieve Variableexpenses and IDs
     * Get the list of Variableexpense to be used in a dropdown or autocomplete control.
     * @param sSelector The type of Variableexpenses to return
     * @param eFilterActive Specify which results we want to display. (optional, default to Active)
     * @param sQuery Allow to filter the returned results (optional)
     * @param acceptLanguage  (optional)
     * @return VariableexpenseGetAutocompleteV2Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun variableexpenseGetAutocompleteV2(sSelector: SSelectorVariableexpenseGetAutocompleteV2, eFilterActive: EFilterActiveVariableexpenseGetAutocompleteV2? = EFilterActiveVariableexpenseGetAutocompleteV2.Active, sQuery: kotlin.String? = null, acceptLanguage: HeaderAcceptLanguage? = null) : VariableexpenseGetAutocompleteV2Response {
        val localVarResponse = variableexpenseGetAutocompleteV2WithHttpInfo(sSelector = sSelector, eFilterActive = eFilterActive, sQuery = sQuery, acceptLanguage = acceptLanguage)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as VariableexpenseGetAutocompleteV2Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieve Variableexpenses and IDs
     * Get the list of Variableexpense to be used in a dropdown or autocomplete control.
     * @param sSelector The type of Variableexpenses to return
     * @param eFilterActive Specify which results we want to display. (optional, default to Active)
     * @param sQuery Allow to filter the returned results (optional)
     * @param acceptLanguage  (optional)
     * @return ApiResponse<VariableexpenseGetAutocompleteV2Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun variableexpenseGetAutocompleteV2WithHttpInfo(sSelector: SSelectorVariableexpenseGetAutocompleteV2, eFilterActive: EFilterActiveVariableexpenseGetAutocompleteV2?, sQuery: kotlin.String?, acceptLanguage: HeaderAcceptLanguage?) : ApiResponse<VariableexpenseGetAutocompleteV2Response?> {
        val localVariableConfig = variableexpenseGetAutocompleteV2RequestConfig(sSelector = sSelector, eFilterActive = eFilterActive, sQuery = sQuery, acceptLanguage = acceptLanguage)

        return request<Unit, VariableexpenseGetAutocompleteV2Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation variableexpenseGetAutocompleteV2
     *
     * @param sSelector The type of Variableexpenses to return
     * @param eFilterActive Specify which results we want to display. (optional, default to Active)
     * @param sQuery Allow to filter the returned results (optional)
     * @param acceptLanguage  (optional)
     * @return RequestConfig
     */
    fun variableexpenseGetAutocompleteV2RequestConfig(sSelector: SSelectorVariableexpenseGetAutocompleteV2, eFilterActive: EFilterActiveVariableexpenseGetAutocompleteV2?, sQuery: kotlin.String?, acceptLanguage: HeaderAcceptLanguage?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (eFilterActive != null) {
                    put("eFilterActive", listOf(eFilterActive.value))
                }
                if (sQuery != null) {
                    put("sQuery", listOf(sQuery.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/2/object/variableexpense/getAutocomplete/{sSelector}".replace("{"+"sSelector"+"}", encodeURIComponent(sSelector.value.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter eOrderBy
     */
     enum class EOrderByVariableexpenseGetListV1(val value: kotlin.String) {
         @Json(name = "pkiVariableexpenseID_ASC") pkiVariableexpenseID_ASC("pkiVariableexpenseID_ASC"),
         @Json(name = "pkiVariableexpenseID_DESC") pkiVariableexpenseID_DESC("pkiVariableexpenseID_DESC"),
         @Json(name = "sVariableexpenseCode_ASC") sVariableexpenseCode_ASC("sVariableexpenseCode_ASC"),
         @Json(name = "sVariableexpenseCode_DESC") sVariableexpenseCode_DESC("sVariableexpenseCode_DESC"),
         @Json(name = "sVariableexpenseDescriptionX_ASC") sVariableexpenseDescriptionX_ASC("sVariableexpenseDescriptionX_ASC"),
         @Json(name = "sVariableexpenseDescriptionX_DESC") sVariableexpenseDescriptionX_DESC("sVariableexpenseDescriptionX_DESC"),
         @Json(name = "eVariableexpenseTaxable_ASC") eVariableexpenseTaxable_ASC("eVariableexpenseTaxable_ASC"),
         @Json(name = "eVariableexpenseTaxable_DESC") eVariableexpenseTaxable_DESC("eVariableexpenseTaxable_DESC"),
         @Json(name = "bVariableexpenseIsactive_ASC") bVariableexpenseIsactive_ASC("bVariableexpenseIsactive_ASC"),
         @Json(name = "bVariableexpenseIsactive_DESC") bVariableexpenseIsactive_DESC("bVariableexpenseIsactive_DESC");

        /**
         * Override [toString()] to avoid using the enum variable name as the value, and instead use
         * the actual value defined in the API spec file.
         *
         * This solves a problem when the variable name and its value are different, and ensures that
         * the client sends the correct enum values to the server always.
         */
        override fun toString(): kotlin.String = "$value"
     }

    /**
     * Retrieve Variableexpense list
     * Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |---|---| | eVariableexpenseTaxable | Yes&lt;br&gt;No&lt;br&gt;Included |
     * @param eOrderBy Specify how you want the results to be sorted (optional)
     * @param iRowMax  (optional)
     * @param iRowOffset  (optional, default to 0)
     * @param acceptLanguage  (optional)
     * @param sFilter  (optional)
     * @return VariableexpenseGetListV1Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun variableexpenseGetListV1(eOrderBy: EOrderByVariableexpenseGetListV1? = null, iRowMax: kotlin.Int? = null, iRowOffset: kotlin.Int? = 0, acceptLanguage: HeaderAcceptLanguage? = null, sFilter: kotlin.String? = null) : VariableexpenseGetListV1Response {
        val localVarResponse = variableexpenseGetListV1WithHttpInfo(eOrderBy = eOrderBy, iRowMax = iRowMax, iRowOffset = iRowOffset, acceptLanguage = acceptLanguage, sFilter = sFilter)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as VariableexpenseGetListV1Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieve Variableexpense list
     * Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |---|---| | eVariableexpenseTaxable | Yes&lt;br&gt;No&lt;br&gt;Included |
     * @param eOrderBy Specify how you want the results to be sorted (optional)
     * @param iRowMax  (optional)
     * @param iRowOffset  (optional, default to 0)
     * @param acceptLanguage  (optional)
     * @param sFilter  (optional)
     * @return ApiResponse<VariableexpenseGetListV1Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun variableexpenseGetListV1WithHttpInfo(eOrderBy: EOrderByVariableexpenseGetListV1?, iRowMax: kotlin.Int?, iRowOffset: kotlin.Int?, acceptLanguage: HeaderAcceptLanguage?, sFilter: kotlin.String?) : ApiResponse<VariableexpenseGetListV1Response?> {
        val localVariableConfig = variableexpenseGetListV1RequestConfig(eOrderBy = eOrderBy, iRowMax = iRowMax, iRowOffset = iRowOffset, acceptLanguage = acceptLanguage, sFilter = sFilter)

        return request<Unit, VariableexpenseGetListV1Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation variableexpenseGetListV1
     *
     * @param eOrderBy Specify how you want the results to be sorted (optional)
     * @param iRowMax  (optional)
     * @param iRowOffset  (optional, default to 0)
     * @param acceptLanguage  (optional)
     * @param sFilter  (optional)
     * @return RequestConfig
     */
    fun variableexpenseGetListV1RequestConfig(eOrderBy: EOrderByVariableexpenseGetListV1?, iRowMax: kotlin.Int?, iRowOffset: kotlin.Int?, acceptLanguage: HeaderAcceptLanguage?, sFilter: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (eOrderBy != null) {
                    put("eOrderBy", listOf(eOrderBy.value))
                }
                if (iRowMax != null) {
                    put("iRowMax", listOf(iRowMax.toString()))
                }
                if (iRowOffset != null) {
                    put("iRowOffset", listOf(iRowOffset.toString()))
                }
                if (sFilter != null) {
                    put("sFilter", listOf(sFilter.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/1/object/variableexpense/getList",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Retrieve an existing Variableexpense
     * 
     * @param pkiVariableexpenseID 
     * @return VariableexpenseGetObjectV2Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun variableexpenseGetObjectV2(pkiVariableexpenseID: kotlin.Int) : VariableexpenseGetObjectV2Response {
        val localVarResponse = variableexpenseGetObjectV2WithHttpInfo(pkiVariableexpenseID = pkiVariableexpenseID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as VariableexpenseGetObjectV2Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieve an existing Variableexpense
     * 
     * @param pkiVariableexpenseID 
     * @return ApiResponse<VariableexpenseGetObjectV2Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun variableexpenseGetObjectV2WithHttpInfo(pkiVariableexpenseID: kotlin.Int) : ApiResponse<VariableexpenseGetObjectV2Response?> {
        val localVariableConfig = variableexpenseGetObjectV2RequestConfig(pkiVariableexpenseID = pkiVariableexpenseID)

        return request<Unit, VariableexpenseGetObjectV2Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation variableexpenseGetObjectV2
     *
     * @param pkiVariableexpenseID 
     * @return RequestConfig
     */
    fun variableexpenseGetObjectV2RequestConfig(pkiVariableexpenseID: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/2/object/variableexpense/{pkiVariableexpenseID}".replace("{"+"pkiVariableexpenseID"+"}", encodeURIComponent(pkiVariableexpenseID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
