/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package eZmaxApi.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import eZmaxApi.models.CommonMinusResponseMinusError
import eZmaxApi.models.HeaderMinusAcceptMinusLanguage
import eZmaxApi.models.VariableexpenseMinusCreateObjectMinusV1MinusRequest
import eZmaxApi.models.VariableexpenseMinusCreateObjectMinusV1MinusResponse
import eZmaxApi.models.VariableexpenseMinusEditObjectMinusV1MinusRequest
import eZmaxApi.models.VariableexpenseMinusEditObjectMinusV1MinusResponse
import eZmaxApi.models.VariableexpenseMinusGetAutocompleteMinusV2MinusResponse
import eZmaxApi.models.VariableexpenseMinusGetListMinusV1MinusResponse
import eZmaxApi.models.VariableexpenseMinusGetObjectMinusV2MinusResponse

import com.squareup.moshi.Json

import eZmaxApi.infrastructure.ApiClient
import eZmaxApi.infrastructure.ApiResponse
import eZmaxApi.infrastructure.ClientException
import eZmaxApi.infrastructure.ClientError
import eZmaxApi.infrastructure.ServerException
import eZmaxApi.infrastructure.ServerError
import eZmaxApi.infrastructure.MultiValueMap
import eZmaxApi.infrastructure.PartConfig
import eZmaxApi.infrastructure.RequestConfig
import eZmaxApi.infrastructure.RequestMethod
import eZmaxApi.infrastructure.ResponseType
import eZmaxApi.infrastructure.Success
import eZmaxApi.infrastructure.toMultiValue

class ObjectVariableexpenseApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://prod.api.appcluster01.ca-central-1.ezmax.com/rest")
        }
    }

    /**
     * Create a new Variableexpense
     * The endpoint allows to create one or many elements at once.
     * @param variableexpenseMinusCreateObjectMinusV1MinusRequest 
     * @return VariableexpenseMinusCreateObjectMinusV1MinusResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun variableexpenseCreateObjectV1(variableexpenseMinusCreateObjectMinusV1MinusRequest: VariableexpenseMinusCreateObjectMinusV1MinusRequest) : VariableexpenseMinusCreateObjectMinusV1MinusResponse {
        val localVarResponse = variableexpenseCreateObjectV1WithHttpInfo(variableexpenseMinusCreateObjectMinusV1MinusRequest = variableexpenseMinusCreateObjectMinusV1MinusRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as VariableexpenseMinusCreateObjectMinusV1MinusResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Create a new Variableexpense
     * The endpoint allows to create one or many elements at once.
     * @param variableexpenseMinusCreateObjectMinusV1MinusRequest 
     * @return ApiResponse<VariableexpenseMinusCreateObjectMinusV1MinusResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun variableexpenseCreateObjectV1WithHttpInfo(variableexpenseMinusCreateObjectMinusV1MinusRequest: VariableexpenseMinusCreateObjectMinusV1MinusRequest) : ApiResponse<VariableexpenseMinusCreateObjectMinusV1MinusResponse?> {
        val localVariableConfig = variableexpenseCreateObjectV1RequestConfig(variableexpenseMinusCreateObjectMinusV1MinusRequest = variableexpenseMinusCreateObjectMinusV1MinusRequest)

        return request<VariableexpenseMinusCreateObjectMinusV1MinusRequest, VariableexpenseMinusCreateObjectMinusV1MinusResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation variableexpenseCreateObjectV1
     *
     * @param variableexpenseMinusCreateObjectMinusV1MinusRequest 
     * @return RequestConfig
     */
    fun variableexpenseCreateObjectV1RequestConfig(variableexpenseMinusCreateObjectMinusV1MinusRequest: VariableexpenseMinusCreateObjectMinusV1MinusRequest) : RequestConfig<VariableexpenseMinusCreateObjectMinusV1MinusRequest> {
        val localVariableBody = variableexpenseMinusCreateObjectMinusV1MinusRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/1/object/variableexpense",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Edit an existing Variableexpense
     * 
     * @param pkiVariableexpenseID The unique ID of the Variableexpense
     * @param variableexpenseMinusEditObjectMinusV1MinusRequest 
     * @return VariableexpenseMinusEditObjectMinusV1MinusResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun variableexpenseEditObjectV1(pkiVariableexpenseID: kotlin.Int, variableexpenseMinusEditObjectMinusV1MinusRequest: VariableexpenseMinusEditObjectMinusV1MinusRequest) : VariableexpenseMinusEditObjectMinusV1MinusResponse {
        val localVarResponse = variableexpenseEditObjectV1WithHttpInfo(pkiVariableexpenseID = pkiVariableexpenseID, variableexpenseMinusEditObjectMinusV1MinusRequest = variableexpenseMinusEditObjectMinusV1MinusRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as VariableexpenseMinusEditObjectMinusV1MinusResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Edit an existing Variableexpense
     * 
     * @param pkiVariableexpenseID The unique ID of the Variableexpense
     * @param variableexpenseMinusEditObjectMinusV1MinusRequest 
     * @return ApiResponse<VariableexpenseMinusEditObjectMinusV1MinusResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun variableexpenseEditObjectV1WithHttpInfo(pkiVariableexpenseID: kotlin.Int, variableexpenseMinusEditObjectMinusV1MinusRequest: VariableexpenseMinusEditObjectMinusV1MinusRequest) : ApiResponse<VariableexpenseMinusEditObjectMinusV1MinusResponse?> {
        val localVariableConfig = variableexpenseEditObjectV1RequestConfig(pkiVariableexpenseID = pkiVariableexpenseID, variableexpenseMinusEditObjectMinusV1MinusRequest = variableexpenseMinusEditObjectMinusV1MinusRequest)

        return request<VariableexpenseMinusEditObjectMinusV1MinusRequest, VariableexpenseMinusEditObjectMinusV1MinusResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation variableexpenseEditObjectV1
     *
     * @param pkiVariableexpenseID The unique ID of the Variableexpense
     * @param variableexpenseMinusEditObjectMinusV1MinusRequest 
     * @return RequestConfig
     */
    fun variableexpenseEditObjectV1RequestConfig(pkiVariableexpenseID: kotlin.Int, variableexpenseMinusEditObjectMinusV1MinusRequest: VariableexpenseMinusEditObjectMinusV1MinusRequest) : RequestConfig<VariableexpenseMinusEditObjectMinusV1MinusRequest> {
        val localVariableBody = variableexpenseMinusEditObjectMinusV1MinusRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/1/object/variableexpense/{pkiVariableexpenseID}".replace("{"+"pkiVariableexpenseID"+"}", encodeURIComponent(pkiVariableexpenseID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter sSelector
     */
     enum class SSelector_variableexpenseGetAutocompleteV2(val value: kotlin.String) {
         @Json(name = "All") All("All")
     }

    /**
     * enum for parameter eFilterActive
     */
     enum class EFilterActive_variableexpenseGetAutocompleteV2(val value: kotlin.String) {
         @Json(name = "All") All("All"),
         @Json(name = "Active") Active("Active"),
         @Json(name = "Inactive") Inactive("Inactive")
     }

    /**
     * Retrieve Variableexpenses and IDs
     * Get the list of Variableexpense to be used in a dropdown or autocomplete control.
     * @param sSelector The type of Variableexpenses to return
     * @param eFilterActive Specify which results we want to display. (optional, default to Active)
     * @param sQuery Allow to filter the returned results (optional)
     * @param acceptLanguage  (optional)
     * @return VariableexpenseMinusGetAutocompleteMinusV2MinusResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun variableexpenseGetAutocompleteV2(sSelector: SSelector_variableexpenseGetAutocompleteV2, eFilterActive: EFilterActive_variableexpenseGetAutocompleteV2? = EFilterActive_variableexpenseGetAutocompleteV2.Active, sQuery: kotlin.String? = null, acceptLanguage: HeaderMinusAcceptMinusLanguage? = null) : VariableexpenseMinusGetAutocompleteMinusV2MinusResponse {
        val localVarResponse = variableexpenseGetAutocompleteV2WithHttpInfo(sSelector = sSelector, eFilterActive = eFilterActive, sQuery = sQuery, acceptLanguage = acceptLanguage)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as VariableexpenseMinusGetAutocompleteMinusV2MinusResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieve Variableexpenses and IDs
     * Get the list of Variableexpense to be used in a dropdown or autocomplete control.
     * @param sSelector The type of Variableexpenses to return
     * @param eFilterActive Specify which results we want to display. (optional, default to Active)
     * @param sQuery Allow to filter the returned results (optional)
     * @param acceptLanguage  (optional)
     * @return ApiResponse<VariableexpenseMinusGetAutocompleteMinusV2MinusResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun variableexpenseGetAutocompleteV2WithHttpInfo(sSelector: SSelector_variableexpenseGetAutocompleteV2, eFilterActive: EFilterActive_variableexpenseGetAutocompleteV2?, sQuery: kotlin.String?, acceptLanguage: HeaderMinusAcceptMinusLanguage?) : ApiResponse<VariableexpenseMinusGetAutocompleteMinusV2MinusResponse?> {
        val localVariableConfig = variableexpenseGetAutocompleteV2RequestConfig(sSelector = sSelector, eFilterActive = eFilterActive, sQuery = sQuery, acceptLanguage = acceptLanguage)

        return request<Unit, VariableexpenseMinusGetAutocompleteMinusV2MinusResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation variableexpenseGetAutocompleteV2
     *
     * @param sSelector The type of Variableexpenses to return
     * @param eFilterActive Specify which results we want to display. (optional, default to Active)
     * @param sQuery Allow to filter the returned results (optional)
     * @param acceptLanguage  (optional)
     * @return RequestConfig
     */
    fun variableexpenseGetAutocompleteV2RequestConfig(sSelector: SSelector_variableexpenseGetAutocompleteV2, eFilterActive: EFilterActive_variableexpenseGetAutocompleteV2?, sQuery: kotlin.String?, acceptLanguage: HeaderMinusAcceptMinusLanguage?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (eFilterActive != null) {
                    put("eFilterActive", listOf(eFilterActive.toString()))
                }
                if (sQuery != null) {
                    put("sQuery", listOf(sQuery.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/2/object/variableexpense/getAutocomplete/{sSelector}".replace("{"+"sSelector"+"}", encodeURIComponent(sSelector.value.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter eOrderBy
     */
     enum class EOrderBy_variableexpenseGetListV1(val value: kotlin.String) {
         @Json(name = "pkiVariableexpenseID_ASC") pkiVariableexpenseID_ASC("pkiVariableexpenseID_ASC"),
         @Json(name = "pkiVariableexpenseID_DESC") pkiVariableexpenseID_DESC("pkiVariableexpenseID_DESC"),
         @Json(name = "sVariableexpenseCode_ASC") sVariableexpenseCode_ASC("sVariableexpenseCode_ASC"),
         @Json(name = "sVariableexpenseCode_DESC") sVariableexpenseCode_DESC("sVariableexpenseCode_DESC"),
         @Json(name = "sVariableexpenseDescriptionX_ASC") sVariableexpenseDescriptionX_ASC("sVariableexpenseDescriptionX_ASC"),
         @Json(name = "sVariableexpenseDescriptionX_DESC") sVariableexpenseDescriptionX_DESC("sVariableexpenseDescriptionX_DESC"),
         @Json(name = "eVariableexpenseTaxable_ASC") eVariableexpenseTaxable_ASC("eVariableexpenseTaxable_ASC"),
         @Json(name = "eVariableexpenseTaxable_DESC") eVariableexpenseTaxable_DESC("eVariableexpenseTaxable_DESC"),
         @Json(name = "bVariableexpenseIsactive_ASC") bVariableexpenseIsactive_ASC("bVariableexpenseIsactive_ASC"),
         @Json(name = "bVariableexpenseIsactive_DESC") bVariableexpenseIsactive_DESC("bVariableexpenseIsactive_DESC")
     }

    /**
     * Retrieve Variableexpense list
     * Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |---|---| | eVariableexpenseTaxable | Yes&lt;br&gt;No&lt;br&gt;Included |
     * @param eOrderBy Specify how you want the results to be sorted (optional)
     * @param iRowMax  (optional)
     * @param iRowOffset  (optional)
     * @param acceptLanguage  (optional)
     * @param sFilter  (optional)
     * @return VariableexpenseMinusGetListMinusV1MinusResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun variableexpenseGetListV1(eOrderBy: EOrderBy_variableexpenseGetListV1? = null, iRowMax: kotlin.Int? = null, iRowOffset: kotlin.Int? = null, acceptLanguage: HeaderMinusAcceptMinusLanguage? = null, sFilter: kotlin.String? = null) : VariableexpenseMinusGetListMinusV1MinusResponse {
        val localVarResponse = variableexpenseGetListV1WithHttpInfo(eOrderBy = eOrderBy, iRowMax = iRowMax, iRowOffset = iRowOffset, acceptLanguage = acceptLanguage, sFilter = sFilter)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as VariableexpenseMinusGetListMinusV1MinusResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieve Variableexpense list
     * Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |---|---| | eVariableexpenseTaxable | Yes&lt;br&gt;No&lt;br&gt;Included |
     * @param eOrderBy Specify how you want the results to be sorted (optional)
     * @param iRowMax  (optional)
     * @param iRowOffset  (optional)
     * @param acceptLanguage  (optional)
     * @param sFilter  (optional)
     * @return ApiResponse<VariableexpenseMinusGetListMinusV1MinusResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun variableexpenseGetListV1WithHttpInfo(eOrderBy: EOrderBy_variableexpenseGetListV1?, iRowMax: kotlin.Int?, iRowOffset: kotlin.Int?, acceptLanguage: HeaderMinusAcceptMinusLanguage?, sFilter: kotlin.String?) : ApiResponse<VariableexpenseMinusGetListMinusV1MinusResponse?> {
        val localVariableConfig = variableexpenseGetListV1RequestConfig(eOrderBy = eOrderBy, iRowMax = iRowMax, iRowOffset = iRowOffset, acceptLanguage = acceptLanguage, sFilter = sFilter)

        return request<Unit, VariableexpenseMinusGetListMinusV1MinusResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation variableexpenseGetListV1
     *
     * @param eOrderBy Specify how you want the results to be sorted (optional)
     * @param iRowMax  (optional)
     * @param iRowOffset  (optional)
     * @param acceptLanguage  (optional)
     * @param sFilter  (optional)
     * @return RequestConfig
     */
    fun variableexpenseGetListV1RequestConfig(eOrderBy: EOrderBy_variableexpenseGetListV1?, iRowMax: kotlin.Int?, iRowOffset: kotlin.Int?, acceptLanguage: HeaderMinusAcceptMinusLanguage?, sFilter: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (eOrderBy != null) {
                    put("eOrderBy", listOf(eOrderBy.toString()))
                }
                if (iRowMax != null) {
                    put("iRowMax", listOf(iRowMax.toString()))
                }
                if (iRowOffset != null) {
                    put("iRowOffset", listOf(iRowOffset.toString()))
                }
                if (sFilter != null) {
                    put("sFilter", listOf(sFilter.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/1/object/variableexpense/getList",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Retrieve an existing Variableexpense
     * 
     * @param pkiVariableexpenseID The unique ID of the Variableexpense
     * @return VariableexpenseMinusGetObjectMinusV2MinusResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun variableexpenseGetObjectV2(pkiVariableexpenseID: kotlin.Int) : VariableexpenseMinusGetObjectMinusV2MinusResponse {
        val localVarResponse = variableexpenseGetObjectV2WithHttpInfo(pkiVariableexpenseID = pkiVariableexpenseID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as VariableexpenseMinusGetObjectMinusV2MinusResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieve an existing Variableexpense
     * 
     * @param pkiVariableexpenseID The unique ID of the Variableexpense
     * @return ApiResponse<VariableexpenseMinusGetObjectMinusV2MinusResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun variableexpenseGetObjectV2WithHttpInfo(pkiVariableexpenseID: kotlin.Int) : ApiResponse<VariableexpenseMinusGetObjectMinusV2MinusResponse?> {
        val localVariableConfig = variableexpenseGetObjectV2RequestConfig(pkiVariableexpenseID = pkiVariableexpenseID)

        return request<Unit, VariableexpenseMinusGetObjectMinusV2MinusResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation variableexpenseGetObjectV2
     *
     * @param pkiVariableexpenseID The unique ID of the Variableexpense
     * @return RequestConfig
     */
    fun variableexpenseGetObjectV2RequestConfig(pkiVariableexpenseID: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/2/object/variableexpense/{pkiVariableexpenseID}".replace("{"+"pkiVariableexpenseID"+"}", encodeURIComponent(pkiVariableexpenseID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
