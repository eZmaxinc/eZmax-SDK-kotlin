/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package eZmaxApi.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import eZmaxApi.models.CommonMinusResponseMinusError
import eZmaxApi.models.EzsignsignergroupMinusCreateObjectMinusV1MinusRequest
import eZmaxApi.models.EzsignsignergroupMinusCreateObjectMinusV1MinusResponse
import eZmaxApi.models.EzsignsignergroupMinusDeleteObjectMinusV1MinusResponse
import eZmaxApi.models.EzsignsignergroupMinusEditEzsignsignergroupmembershipsMinusV1MinusRequest
import eZmaxApi.models.EzsignsignergroupMinusEditEzsignsignergroupmembershipsMinusV1MinusResponse
import eZmaxApi.models.EzsignsignergroupMinusEditObjectMinusV1MinusRequest
import eZmaxApi.models.EzsignsignergroupMinusEditObjectMinusV1MinusResponse
import eZmaxApi.models.EzsignsignergroupMinusGetEzsignsignergroupmembershipsMinusV1MinusResponse
import eZmaxApi.models.EzsignsignergroupMinusGetObjectMinusV2MinusResponse

import com.squareup.moshi.Json

import eZmaxApi.infrastructure.ApiClient
import eZmaxApi.infrastructure.ApiResponse
import eZmaxApi.infrastructure.ClientException
import eZmaxApi.infrastructure.ClientError
import eZmaxApi.infrastructure.ServerException
import eZmaxApi.infrastructure.ServerError
import eZmaxApi.infrastructure.MultiValueMap
import eZmaxApi.infrastructure.PartConfig
import eZmaxApi.infrastructure.RequestConfig
import eZmaxApi.infrastructure.RequestMethod
import eZmaxApi.infrastructure.ResponseType
import eZmaxApi.infrastructure.Success
import eZmaxApi.infrastructure.toMultiValue

class ObjectEzsignsignergroupApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://prod.api.appcluster01.ca-central-1.ezmax.com/rest")
        }
    }

    /**
     * Create a new Ezsignsignergroup
     * The endpoint allows to create one or many elements at once.
     * @param ezsignsignergroupMinusCreateObjectMinusV1MinusRequest 
     * @return EzsignsignergroupMinusCreateObjectMinusV1MinusResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun ezsignsignergroupCreateObjectV1(ezsignsignergroupMinusCreateObjectMinusV1MinusRequest: EzsignsignergroupMinusCreateObjectMinusV1MinusRequest) : EzsignsignergroupMinusCreateObjectMinusV1MinusResponse {
        val localVarResponse = ezsignsignergroupCreateObjectV1WithHttpInfo(ezsignsignergroupMinusCreateObjectMinusV1MinusRequest = ezsignsignergroupMinusCreateObjectMinusV1MinusRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as EzsignsignergroupMinusCreateObjectMinusV1MinusResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Create a new Ezsignsignergroup
     * The endpoint allows to create one or many elements at once.
     * @param ezsignsignergroupMinusCreateObjectMinusV1MinusRequest 
     * @return ApiResponse<EzsignsignergroupMinusCreateObjectMinusV1MinusResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun ezsignsignergroupCreateObjectV1WithHttpInfo(ezsignsignergroupMinusCreateObjectMinusV1MinusRequest: EzsignsignergroupMinusCreateObjectMinusV1MinusRequest) : ApiResponse<EzsignsignergroupMinusCreateObjectMinusV1MinusResponse?> {
        val localVariableConfig = ezsignsignergroupCreateObjectV1RequestConfig(ezsignsignergroupMinusCreateObjectMinusV1MinusRequest = ezsignsignergroupMinusCreateObjectMinusV1MinusRequest)

        return request<EzsignsignergroupMinusCreateObjectMinusV1MinusRequest, EzsignsignergroupMinusCreateObjectMinusV1MinusResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation ezsignsignergroupCreateObjectV1
     *
     * @param ezsignsignergroupMinusCreateObjectMinusV1MinusRequest 
     * @return RequestConfig
     */
    fun ezsignsignergroupCreateObjectV1RequestConfig(ezsignsignergroupMinusCreateObjectMinusV1MinusRequest: EzsignsignergroupMinusCreateObjectMinusV1MinusRequest) : RequestConfig<EzsignsignergroupMinusCreateObjectMinusV1MinusRequest> {
        val localVariableBody = ezsignsignergroupMinusCreateObjectMinusV1MinusRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/1/object/ezsignsignergroup",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Delete an existing Ezsignsignergroup
     * 
     * @param pkiEzsignsignergroupID The unique ID of the Ezsignsignergroup
     * @return EzsignsignergroupMinusDeleteObjectMinusV1MinusResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun ezsignsignergroupDeleteObjectV1(pkiEzsignsignergroupID: kotlin.Int) : EzsignsignergroupMinusDeleteObjectMinusV1MinusResponse {
        val localVarResponse = ezsignsignergroupDeleteObjectV1WithHttpInfo(pkiEzsignsignergroupID = pkiEzsignsignergroupID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as EzsignsignergroupMinusDeleteObjectMinusV1MinusResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Delete an existing Ezsignsignergroup
     * 
     * @param pkiEzsignsignergroupID The unique ID of the Ezsignsignergroup
     * @return ApiResponse<EzsignsignergroupMinusDeleteObjectMinusV1MinusResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun ezsignsignergroupDeleteObjectV1WithHttpInfo(pkiEzsignsignergroupID: kotlin.Int) : ApiResponse<EzsignsignergroupMinusDeleteObjectMinusV1MinusResponse?> {
        val localVariableConfig = ezsignsignergroupDeleteObjectV1RequestConfig(pkiEzsignsignergroupID = pkiEzsignsignergroupID)

        return request<Unit, EzsignsignergroupMinusDeleteObjectMinusV1MinusResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation ezsignsignergroupDeleteObjectV1
     *
     * @param pkiEzsignsignergroupID The unique ID of the Ezsignsignergroup
     * @return RequestConfig
     */
    fun ezsignsignergroupDeleteObjectV1RequestConfig(pkiEzsignsignergroupID: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/1/object/ezsignsignergroup/{pkiEzsignsignergroupID}".replace("{"+"pkiEzsignsignergroupID"+"}", encodeURIComponent(pkiEzsignsignergroupID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Edit multiple Ezsignsignergroupmemberships
     * Using this endpoint, you can edit multiple Ezsignsignergroupmemberships at the same time.
     * @param pkiEzsignsignergroupID 
     * @param ezsignsignergroupMinusEditEzsignsignergroupmembershipsMinusV1MinusRequest 
     * @return EzsignsignergroupMinusEditEzsignsignergroupmembershipsMinusV1MinusResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun ezsignsignergroupEditEzsignsignergroupmembershipsV1(pkiEzsignsignergroupID: kotlin.Int, ezsignsignergroupMinusEditEzsignsignergroupmembershipsMinusV1MinusRequest: EzsignsignergroupMinusEditEzsignsignergroupmembershipsMinusV1MinusRequest) : EzsignsignergroupMinusEditEzsignsignergroupmembershipsMinusV1MinusResponse {
        val localVarResponse = ezsignsignergroupEditEzsignsignergroupmembershipsV1WithHttpInfo(pkiEzsignsignergroupID = pkiEzsignsignergroupID, ezsignsignergroupMinusEditEzsignsignergroupmembershipsMinusV1MinusRequest = ezsignsignergroupMinusEditEzsignsignergroupmembershipsMinusV1MinusRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as EzsignsignergroupMinusEditEzsignsignergroupmembershipsMinusV1MinusResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Edit multiple Ezsignsignergroupmemberships
     * Using this endpoint, you can edit multiple Ezsignsignergroupmemberships at the same time.
     * @param pkiEzsignsignergroupID 
     * @param ezsignsignergroupMinusEditEzsignsignergroupmembershipsMinusV1MinusRequest 
     * @return ApiResponse<EzsignsignergroupMinusEditEzsignsignergroupmembershipsMinusV1MinusResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun ezsignsignergroupEditEzsignsignergroupmembershipsV1WithHttpInfo(pkiEzsignsignergroupID: kotlin.Int, ezsignsignergroupMinusEditEzsignsignergroupmembershipsMinusV1MinusRequest: EzsignsignergroupMinusEditEzsignsignergroupmembershipsMinusV1MinusRequest) : ApiResponse<EzsignsignergroupMinusEditEzsignsignergroupmembershipsMinusV1MinusResponse?> {
        val localVariableConfig = ezsignsignergroupEditEzsignsignergroupmembershipsV1RequestConfig(pkiEzsignsignergroupID = pkiEzsignsignergroupID, ezsignsignergroupMinusEditEzsignsignergroupmembershipsMinusV1MinusRequest = ezsignsignergroupMinusEditEzsignsignergroupmembershipsMinusV1MinusRequest)

        return request<EzsignsignergroupMinusEditEzsignsignergroupmembershipsMinusV1MinusRequest, EzsignsignergroupMinusEditEzsignsignergroupmembershipsMinusV1MinusResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation ezsignsignergroupEditEzsignsignergroupmembershipsV1
     *
     * @param pkiEzsignsignergroupID 
     * @param ezsignsignergroupMinusEditEzsignsignergroupmembershipsMinusV1MinusRequest 
     * @return RequestConfig
     */
    fun ezsignsignergroupEditEzsignsignergroupmembershipsV1RequestConfig(pkiEzsignsignergroupID: kotlin.Int, ezsignsignergroupMinusEditEzsignsignergroupmembershipsMinusV1MinusRequest: EzsignsignergroupMinusEditEzsignsignergroupmembershipsMinusV1MinusRequest) : RequestConfig<EzsignsignergroupMinusEditEzsignsignergroupmembershipsMinusV1MinusRequest> {
        val localVariableBody = ezsignsignergroupMinusEditEzsignsignergroupmembershipsMinusV1MinusRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/1/object/ezsignsignergroup/{pkiEzsignsignergroupID}/editEzsignsignergroupmemberships".replace("{"+"pkiEzsignsignergroupID"+"}", encodeURIComponent(pkiEzsignsignergroupID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Edit an existing Ezsignsignergroup
     * 
     * @param pkiEzsignsignergroupID The unique ID of the Ezsignsignergroup
     * @param ezsignsignergroupMinusEditObjectMinusV1MinusRequest 
     * @return EzsignsignergroupMinusEditObjectMinusV1MinusResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun ezsignsignergroupEditObjectV1(pkiEzsignsignergroupID: kotlin.Int, ezsignsignergroupMinusEditObjectMinusV1MinusRequest: EzsignsignergroupMinusEditObjectMinusV1MinusRequest) : EzsignsignergroupMinusEditObjectMinusV1MinusResponse {
        val localVarResponse = ezsignsignergroupEditObjectV1WithHttpInfo(pkiEzsignsignergroupID = pkiEzsignsignergroupID, ezsignsignergroupMinusEditObjectMinusV1MinusRequest = ezsignsignergroupMinusEditObjectMinusV1MinusRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as EzsignsignergroupMinusEditObjectMinusV1MinusResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Edit an existing Ezsignsignergroup
     * 
     * @param pkiEzsignsignergroupID The unique ID of the Ezsignsignergroup
     * @param ezsignsignergroupMinusEditObjectMinusV1MinusRequest 
     * @return ApiResponse<EzsignsignergroupMinusEditObjectMinusV1MinusResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun ezsignsignergroupEditObjectV1WithHttpInfo(pkiEzsignsignergroupID: kotlin.Int, ezsignsignergroupMinusEditObjectMinusV1MinusRequest: EzsignsignergroupMinusEditObjectMinusV1MinusRequest) : ApiResponse<EzsignsignergroupMinusEditObjectMinusV1MinusResponse?> {
        val localVariableConfig = ezsignsignergroupEditObjectV1RequestConfig(pkiEzsignsignergroupID = pkiEzsignsignergroupID, ezsignsignergroupMinusEditObjectMinusV1MinusRequest = ezsignsignergroupMinusEditObjectMinusV1MinusRequest)

        return request<EzsignsignergroupMinusEditObjectMinusV1MinusRequest, EzsignsignergroupMinusEditObjectMinusV1MinusResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation ezsignsignergroupEditObjectV1
     *
     * @param pkiEzsignsignergroupID The unique ID of the Ezsignsignergroup
     * @param ezsignsignergroupMinusEditObjectMinusV1MinusRequest 
     * @return RequestConfig
     */
    fun ezsignsignergroupEditObjectV1RequestConfig(pkiEzsignsignergroupID: kotlin.Int, ezsignsignergroupMinusEditObjectMinusV1MinusRequest: EzsignsignergroupMinusEditObjectMinusV1MinusRequest) : RequestConfig<EzsignsignergroupMinusEditObjectMinusV1MinusRequest> {
        val localVariableBody = ezsignsignergroupMinusEditObjectMinusV1MinusRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/1/object/ezsignsignergroup/{pkiEzsignsignergroupID}".replace("{"+"pkiEzsignsignergroupID"+"}", encodeURIComponent(pkiEzsignsignergroupID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Retrieve an existing Ezsignsignergroup&#39;s Ezsignsignergroupmemberships
     * 
     * @param pkiEzsignsignergroupID 
     * @return EzsignsignergroupMinusGetEzsignsignergroupmembershipsMinusV1MinusResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun ezsignsignergroupGetEzsignsignergroupmembershipsV1(pkiEzsignsignergroupID: kotlin.Int) : EzsignsignergroupMinusGetEzsignsignergroupmembershipsMinusV1MinusResponse {
        val localVarResponse = ezsignsignergroupGetEzsignsignergroupmembershipsV1WithHttpInfo(pkiEzsignsignergroupID = pkiEzsignsignergroupID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as EzsignsignergroupMinusGetEzsignsignergroupmembershipsMinusV1MinusResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieve an existing Ezsignsignergroup&#39;s Ezsignsignergroupmemberships
     * 
     * @param pkiEzsignsignergroupID 
     * @return ApiResponse<EzsignsignergroupMinusGetEzsignsignergroupmembershipsMinusV1MinusResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun ezsignsignergroupGetEzsignsignergroupmembershipsV1WithHttpInfo(pkiEzsignsignergroupID: kotlin.Int) : ApiResponse<EzsignsignergroupMinusGetEzsignsignergroupmembershipsMinusV1MinusResponse?> {
        val localVariableConfig = ezsignsignergroupGetEzsignsignergroupmembershipsV1RequestConfig(pkiEzsignsignergroupID = pkiEzsignsignergroupID)

        return request<Unit, EzsignsignergroupMinusGetEzsignsignergroupmembershipsMinusV1MinusResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation ezsignsignergroupGetEzsignsignergroupmembershipsV1
     *
     * @param pkiEzsignsignergroupID 
     * @return RequestConfig
     */
    fun ezsignsignergroupGetEzsignsignergroupmembershipsV1RequestConfig(pkiEzsignsignergroupID: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/1/object/ezsignsignergroup/{pkiEzsignsignergroupID}/getEzsignsignergroupmemberships".replace("{"+"pkiEzsignsignergroupID"+"}", encodeURIComponent(pkiEzsignsignergroupID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Retrieve an existing Ezsignsignergroup
     * 
     * @param pkiEzsignsignergroupID The unique ID of the Ezsignsignergroup
     * @return EzsignsignergroupMinusGetObjectMinusV2MinusResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun ezsignsignergroupGetObjectV2(pkiEzsignsignergroupID: kotlin.Int) : EzsignsignergroupMinusGetObjectMinusV2MinusResponse {
        val localVarResponse = ezsignsignergroupGetObjectV2WithHttpInfo(pkiEzsignsignergroupID = pkiEzsignsignergroupID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as EzsignsignergroupMinusGetObjectMinusV2MinusResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieve an existing Ezsignsignergroup
     * 
     * @param pkiEzsignsignergroupID The unique ID of the Ezsignsignergroup
     * @return ApiResponse<EzsignsignergroupMinusGetObjectMinusV2MinusResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun ezsignsignergroupGetObjectV2WithHttpInfo(pkiEzsignsignergroupID: kotlin.Int) : ApiResponse<EzsignsignergroupMinusGetObjectMinusV2MinusResponse?> {
        val localVariableConfig = ezsignsignergroupGetObjectV2RequestConfig(pkiEzsignsignergroupID = pkiEzsignsignergroupID)

        return request<Unit, EzsignsignergroupMinusGetObjectMinusV2MinusResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation ezsignsignergroupGetObjectV2
     *
     * @param pkiEzsignsignergroupID The unique ID of the Ezsignsignergroup
     * @return RequestConfig
     */
    fun ezsignsignergroupGetObjectV2RequestConfig(pkiEzsignsignergroupID: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/2/object/ezsignsignergroup/{pkiEzsignsignergroupID}".replace("{"+"pkiEzsignsignergroupID"+"}", encodeURIComponent(pkiEzsignsignergroupID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
