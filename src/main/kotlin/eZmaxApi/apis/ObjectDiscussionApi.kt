/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package eZmaxApi.apis

import java.io.IOException
import okhttp3.Call
import okhttp3.HttpUrl

import eZmaxApi.models.CommonResponseError
import eZmaxApi.models.DiscussionCreateObjectV1Request
import eZmaxApi.models.DiscussionCreateObjectV1Response
import eZmaxApi.models.DiscussionDeleteObjectV1Response
import eZmaxApi.models.DiscussionGetObjectV2Response
import eZmaxApi.models.DiscussionPatchObjectV1Request
import eZmaxApi.models.DiscussionPatchObjectV1Response
import eZmaxApi.models.DiscussionUpdateDiscussionreadstatusV1Request
import eZmaxApi.models.DiscussionUpdateDiscussionreadstatusV1Response

import com.squareup.moshi.Json

import eZmaxApi.infrastructure.ApiClient
import eZmaxApi.infrastructure.ApiResponse
import eZmaxApi.infrastructure.ClientException
import eZmaxApi.infrastructure.ClientError
import eZmaxApi.infrastructure.ServerException
import eZmaxApi.infrastructure.ServerError
import eZmaxApi.infrastructure.MultiValueMap
import eZmaxApi.infrastructure.PartConfig
import eZmaxApi.infrastructure.RequestConfig
import eZmaxApi.infrastructure.RequestMethod
import eZmaxApi.infrastructure.ResponseType
import eZmaxApi.infrastructure.Success
import eZmaxApi.infrastructure.toMultiValue

class ObjectDiscussionApi(basePath: kotlin.String = defaultBasePath, client: Call.Factory = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://prod.api.appcluster01.ca-central-1.ezmax.com/rest")
        }
    }

    /**
     * POST /1/object/discussion
     * Create a new Discussion
     * The endpoint allows to create one or many elements at once.
     * @param discussionCreateObjectV1Request 
     * @return DiscussionCreateObjectV1Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun discussionCreateObjectV1(discussionCreateObjectV1Request: DiscussionCreateObjectV1Request) : DiscussionCreateObjectV1Response {
        val localVarResponse = discussionCreateObjectV1WithHttpInfo(discussionCreateObjectV1Request = discussionCreateObjectV1Request)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as DiscussionCreateObjectV1Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /1/object/discussion
     * Create a new Discussion
     * The endpoint allows to create one or many elements at once.
     * @param discussionCreateObjectV1Request 
     * @return ApiResponse<DiscussionCreateObjectV1Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun discussionCreateObjectV1WithHttpInfo(discussionCreateObjectV1Request: DiscussionCreateObjectV1Request) : ApiResponse<DiscussionCreateObjectV1Response?> {
        val localVariableConfig = discussionCreateObjectV1RequestConfig(discussionCreateObjectV1Request = discussionCreateObjectV1Request)

        return request<DiscussionCreateObjectV1Request, DiscussionCreateObjectV1Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation discussionCreateObjectV1
     *
     * @param discussionCreateObjectV1Request 
     * @return RequestConfig
     */
    fun discussionCreateObjectV1RequestConfig(discussionCreateObjectV1Request: DiscussionCreateObjectV1Request) : RequestConfig<DiscussionCreateObjectV1Request> {
        val localVariableBody = discussionCreateObjectV1Request
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/1/object/discussion",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * DELETE /1/object/discussion/{pkiDiscussionID}
     * Delete an existing Discussion
     * 
     * @param pkiDiscussionID The unique ID of the Discussion
     * @return DiscussionDeleteObjectV1Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun discussionDeleteObjectV1(pkiDiscussionID: kotlin.Int) : DiscussionDeleteObjectV1Response {
        val localVarResponse = discussionDeleteObjectV1WithHttpInfo(pkiDiscussionID = pkiDiscussionID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as DiscussionDeleteObjectV1Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * DELETE /1/object/discussion/{pkiDiscussionID}
     * Delete an existing Discussion
     * 
     * @param pkiDiscussionID The unique ID of the Discussion
     * @return ApiResponse<DiscussionDeleteObjectV1Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun discussionDeleteObjectV1WithHttpInfo(pkiDiscussionID: kotlin.Int) : ApiResponse<DiscussionDeleteObjectV1Response?> {
        val localVariableConfig = discussionDeleteObjectV1RequestConfig(pkiDiscussionID = pkiDiscussionID)

        return request<Unit, DiscussionDeleteObjectV1Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation discussionDeleteObjectV1
     *
     * @param pkiDiscussionID The unique ID of the Discussion
     * @return RequestConfig
     */
    fun discussionDeleteObjectV1RequestConfig(pkiDiscussionID: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/1/object/discussion/{pkiDiscussionID}".replace("{"+"pkiDiscussionID"+"}", encodeURIComponent(pkiDiscussionID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * GET /2/object/discussion/{pkiDiscussionID}
     * Retrieve an existing Discussion
     * 
     * @param pkiDiscussionID The unique ID of the Discussion
     * @return DiscussionGetObjectV2Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun discussionGetObjectV2(pkiDiscussionID: kotlin.Int) : DiscussionGetObjectV2Response {
        val localVarResponse = discussionGetObjectV2WithHttpInfo(pkiDiscussionID = pkiDiscussionID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as DiscussionGetObjectV2Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /2/object/discussion/{pkiDiscussionID}
     * Retrieve an existing Discussion
     * 
     * @param pkiDiscussionID The unique ID of the Discussion
     * @return ApiResponse<DiscussionGetObjectV2Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun discussionGetObjectV2WithHttpInfo(pkiDiscussionID: kotlin.Int) : ApiResponse<DiscussionGetObjectV2Response?> {
        val localVariableConfig = discussionGetObjectV2RequestConfig(pkiDiscussionID = pkiDiscussionID)

        return request<Unit, DiscussionGetObjectV2Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation discussionGetObjectV2
     *
     * @param pkiDiscussionID The unique ID of the Discussion
     * @return RequestConfig
     */
    fun discussionGetObjectV2RequestConfig(pkiDiscussionID: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/2/object/discussion/{pkiDiscussionID}".replace("{"+"pkiDiscussionID"+"}", encodeURIComponent(pkiDiscussionID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * PATCH /1/object/discussion/{pkiDiscussionID}
     * Patch an existing Discussion
     * 
     * @param pkiDiscussionID The unique ID of the Discussion
     * @param discussionPatchObjectV1Request 
     * @return DiscussionPatchObjectV1Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun discussionPatchObjectV1(pkiDiscussionID: kotlin.Int, discussionPatchObjectV1Request: DiscussionPatchObjectV1Request) : DiscussionPatchObjectV1Response {
        val localVarResponse = discussionPatchObjectV1WithHttpInfo(pkiDiscussionID = pkiDiscussionID, discussionPatchObjectV1Request = discussionPatchObjectV1Request)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as DiscussionPatchObjectV1Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * PATCH /1/object/discussion/{pkiDiscussionID}
     * Patch an existing Discussion
     * 
     * @param pkiDiscussionID The unique ID of the Discussion
     * @param discussionPatchObjectV1Request 
     * @return ApiResponse<DiscussionPatchObjectV1Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun discussionPatchObjectV1WithHttpInfo(pkiDiscussionID: kotlin.Int, discussionPatchObjectV1Request: DiscussionPatchObjectV1Request) : ApiResponse<DiscussionPatchObjectV1Response?> {
        val localVariableConfig = discussionPatchObjectV1RequestConfig(pkiDiscussionID = pkiDiscussionID, discussionPatchObjectV1Request = discussionPatchObjectV1Request)

        return request<DiscussionPatchObjectV1Request, DiscussionPatchObjectV1Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation discussionPatchObjectV1
     *
     * @param pkiDiscussionID The unique ID of the Discussion
     * @param discussionPatchObjectV1Request 
     * @return RequestConfig
     */
    fun discussionPatchObjectV1RequestConfig(pkiDiscussionID: kotlin.Int, discussionPatchObjectV1Request: DiscussionPatchObjectV1Request) : RequestConfig<DiscussionPatchObjectV1Request> {
        val localVariableBody = discussionPatchObjectV1Request
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PATCH,
            path = "/1/object/discussion/{pkiDiscussionID}".replace("{"+"pkiDiscussionID"+"}", encodeURIComponent(pkiDiscussionID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * POST /1/object/discussion/{pkiDiscussionID}/updateDiscussionreadstatus
     * Update the read status of the discussion
     * 
     * @param pkiDiscussionID 
     * @param discussionUpdateDiscussionreadstatusV1Request 
     * @return DiscussionUpdateDiscussionreadstatusV1Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun discussionUpdateDiscussionreadstatusV1(pkiDiscussionID: kotlin.Int, discussionUpdateDiscussionreadstatusV1Request: DiscussionUpdateDiscussionreadstatusV1Request) : DiscussionUpdateDiscussionreadstatusV1Response {
        val localVarResponse = discussionUpdateDiscussionreadstatusV1WithHttpInfo(pkiDiscussionID = pkiDiscussionID, discussionUpdateDiscussionreadstatusV1Request = discussionUpdateDiscussionreadstatusV1Request)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as DiscussionUpdateDiscussionreadstatusV1Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /1/object/discussion/{pkiDiscussionID}/updateDiscussionreadstatus
     * Update the read status of the discussion
     * 
     * @param pkiDiscussionID 
     * @param discussionUpdateDiscussionreadstatusV1Request 
     * @return ApiResponse<DiscussionUpdateDiscussionreadstatusV1Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun discussionUpdateDiscussionreadstatusV1WithHttpInfo(pkiDiscussionID: kotlin.Int, discussionUpdateDiscussionreadstatusV1Request: DiscussionUpdateDiscussionreadstatusV1Request) : ApiResponse<DiscussionUpdateDiscussionreadstatusV1Response?> {
        val localVariableConfig = discussionUpdateDiscussionreadstatusV1RequestConfig(pkiDiscussionID = pkiDiscussionID, discussionUpdateDiscussionreadstatusV1Request = discussionUpdateDiscussionreadstatusV1Request)

        return request<DiscussionUpdateDiscussionreadstatusV1Request, DiscussionUpdateDiscussionreadstatusV1Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation discussionUpdateDiscussionreadstatusV1
     *
     * @param pkiDiscussionID 
     * @param discussionUpdateDiscussionreadstatusV1Request 
     * @return RequestConfig
     */
    fun discussionUpdateDiscussionreadstatusV1RequestConfig(pkiDiscussionID: kotlin.Int, discussionUpdateDiscussionreadstatusV1Request: DiscussionUpdateDiscussionreadstatusV1Request) : RequestConfig<DiscussionUpdateDiscussionreadstatusV1Request> {
        val localVariableBody = discussionUpdateDiscussionreadstatusV1Request
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/1/object/discussion/{pkiDiscussionID}/updateDiscussionreadstatus".replace("{"+"pkiDiscussionID"+"}", encodeURIComponent(pkiDiscussionID.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
