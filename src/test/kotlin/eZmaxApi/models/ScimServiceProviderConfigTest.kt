/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package eZmaxApi.models

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import eZmaxApi.models.ScimServiceProviderConfig
import eZmaxApi.models.ScimAuthenticationScheme
import eZmaxApi.models.ScimServiceProviderConfigBulk
import eZmaxApi.models.ScimServiceProviderConfigChangePassword
import eZmaxApi.models.ScimServiceProviderConfigEtag
import eZmaxApi.models.ScimServiceProviderConfigFilter
import eZmaxApi.models.ScimServiceProviderConfigPatch
import eZmaxApi.models.ScimServiceProviderConfigSort

class ScimServiceProviderConfigTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of ScimServiceProviderConfig
        //val modelInstance = ScimServiceProviderConfig()

        // to test the property `authenticationSchemes` - A multi-valued complex type that specifies supported authentication scheme properties.
        should("test authenticationSchemes") {
            // uncomment below to test the property
            //modelInstance.authenticationSchemes shouldBe ("TODO")
        }

        // to test the property `bulk`
        should("test bulk") {
            // uncomment below to test the property
            //modelInstance.bulk shouldBe ("TODO")
        }

        // to test the property `changePassword`
        should("test changePassword") {
            // uncomment below to test the property
            //modelInstance.changePassword shouldBe ("TODO")
        }

        // to test the property `documentationUri` - An HTTP-addressable URL pointing to the service provider's human-consumable help documentation
        should("test documentationUri") {
            // uncomment below to test the property
            //modelInstance.documentationUri shouldBe ("TODO")
        }

        // to test the property `etag`
        should("test etag") {
            // uncomment below to test the property
            //modelInstance.etag shouldBe ("TODO")
        }

        // to test the property `filter`
        should("test filter") {
            // uncomment below to test the property
            //modelInstance.filter shouldBe ("TODO")
        }

        // to test the property `patch`
        should("test patch") {
            // uncomment below to test the property
            //modelInstance.patch shouldBe ("TODO")
        }

        // to test the property `sort`
        should("test sort") {
            // uncomment below to test the property
            //modelInstance.sort shouldBe ("TODO")
        }

    }
}
