/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package eZmaxApi.models

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import eZmaxApi.models.SystemconfigurationResponseCompound
import eZmaxApi.models.FieldESystemconfigurationEzsign
import eZmaxApi.models.FieldESystemconfigurationEzsignofficeplan
import eZmaxApi.models.FieldESystemconfigurationLanguage1
import eZmaxApi.models.FieldESystemconfigurationLanguage2
import eZmaxApi.models.FieldESystemconfigurationNewexternaluseraction

class SystemconfigurationResponseCompoundTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of SystemconfigurationResponseCompound
        //val modelInstance = SystemconfigurationResponseCompound()

        // to test the property `pkiSystemconfigurationID` - The unique ID of the Systemconfiguration
        should("test pkiSystemconfigurationID") {
            // uncomment below to test the property
            //modelInstance.pkiSystemconfigurationID shouldBe ("TODO")
        }

        // to test the property `fkiSystemconfigurationtypeID` - The unique ID of the Systemconfigurationtype
        should("test fkiSystemconfigurationtypeID") {
            // uncomment below to test the property
            //modelInstance.fkiSystemconfigurationtypeID shouldBe ("TODO")
        }

        // to test the property `sSystemconfigurationtypeDescriptionX` - The description of the Systemconfigurationtype in the language of the requester
        should("test sSystemconfigurationtypeDescriptionX") {
            // uncomment below to test the property
            //modelInstance.sSystemconfigurationtypeDescriptionX shouldBe ("TODO")
        }

        // to test the property `eSystemconfigurationNewexternaluseraction`
        should("test eSystemconfigurationNewexternaluseraction") {
            // uncomment below to test the property
            //modelInstance.eSystemconfigurationNewexternaluseraction shouldBe ("TODO")
        }

        // to test the property `eSystemconfigurationLanguage1`
        should("test eSystemconfigurationLanguage1") {
            // uncomment below to test the property
            //modelInstance.eSystemconfigurationLanguage1 shouldBe ("TODO")
        }

        // to test the property `eSystemconfigurationLanguage2`
        should("test eSystemconfigurationLanguage2") {
            // uncomment below to test the property
            //modelInstance.eSystemconfigurationLanguage2 shouldBe ("TODO")
        }

        // to test the property `bSystemconfigurationEzsignpersonnal` - Whether if we allow the creation of personal files in eZsign
        should("test bSystemconfigurationEzsignpersonnal") {
            // uncomment below to test the property
            //modelInstance.bSystemconfigurationEzsignpersonnal shouldBe ("TODO")
        }

        // to test the property `bSystemconfigurationSspr` - Whether if we allow SSPR
        should("test bSystemconfigurationSspr") {
            // uncomment below to test the property
            //modelInstance.bSystemconfigurationSspr shouldBe ("TODO")
        }

        // to test the property `fkiBrandingID` - The unique ID of the Branding
        should("test fkiBrandingID") {
            // uncomment below to test the property
            //modelInstance.fkiBrandingID shouldBe ("TODO")
        }

        // to test the property `eSystemconfigurationEzsign`
        should("test eSystemconfigurationEzsign") {
            // uncomment below to test the property
            //modelInstance.eSystemconfigurationEzsign shouldBe ("TODO")
        }

        // to test the property `eSystemconfigurationEzsignofficeplan`
        should("test eSystemconfigurationEzsignofficeplan") {
            // uncomment below to test the property
            //modelInstance.eSystemconfigurationEzsignofficeplan shouldBe ("TODO")
        }

        // to test the property `bSystemconfigurationEzsignpaidbyoffice` - Whether if Ezsign is paid by the company or not
        should("test bSystemconfigurationEzsignpaidbyoffice") {
            // uncomment below to test the property
            //modelInstance.bSystemconfigurationEzsignpaidbyoffice shouldBe ("TODO")
        }

        // to test the property `bSystemconfigurationHascreditcardmerchant` - Whether there is a creditcard merchant configured or not
        should("test bSystemconfigurationHascreditcardmerchant") {
            // uncomment below to test the property
            //modelInstance.bSystemconfigurationHascreditcardmerchant shouldBe ("TODO")
        }

        // to test the property `bSystemconfigurationIsdisposalactive` - Whether is Disposal processus is active or not
        should("test bSystemconfigurationIsdisposalactive") {
            // uncomment below to test the property
            //modelInstance.bSystemconfigurationIsdisposalactive shouldBe ("TODO")
        }

        // to test the property `dtSystemconfigurationReadonlyexpirationstart` - The start date where the system will be in read only
        should("test dtSystemconfigurationReadonlyexpirationstart") {
            // uncomment below to test the property
            //modelInstance.dtSystemconfigurationReadonlyexpirationstart shouldBe ("TODO")
        }

        // to test the property `dtSystemconfigurationReadonlyexpirationend` - The end date where the system will be in read only
        should("test dtSystemconfigurationReadonlyexpirationend") {
            // uncomment below to test the property
            //modelInstance.dtSystemconfigurationReadonlyexpirationend shouldBe ("TODO")
        }

        // to test the property `objBranding` - A Custom Branding Object
        should("test objBranding") {
            // uncomment below to test the property
            //modelInstance.objBranding shouldBe ("TODO")
        }

    }
}
