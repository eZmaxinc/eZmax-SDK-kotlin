/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package eZmaxApi.models

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import eZmaxApi.models.EzsignfolderResponseCompound
import eZmaxApi.models.CommonAudit
import eZmaxApi.models.CustomEzsignfoldertypeResponse
import eZmaxApi.models.CustomTimezoneWithCodeResponse
import eZmaxApi.models.FieldEEzsignfolderCompletion
import eZmaxApi.models.FieldEEzsignfolderSendreminderfrequency
import eZmaxApi.models.FieldEEzsignfolderStep

class EzsignfolderResponseCompoundTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of EzsignfolderResponseCompound
        //val modelInstance = EzsignfolderResponseCompound()

        // to test the property `pkiEzsignfolderID` - The unique ID of the Ezsignfolder
        should("test pkiEzsignfolderID") {
            // uncomment below to test the property
            //modelInstance.pkiEzsignfolderID shouldBe ("TODO")
        }

        // to test the property `eEzsignfolderCompletion`
        should("test eEzsignfolderCompletion") {
            // uncomment below to test the property
            //modelInstance.eEzsignfolderCompletion shouldBe ("TODO")
        }

        // to test the property `sEzsignfolderDescription` - The description of the Ezsignfolder
        should("test sEzsignfolderDescription") {
            // uncomment below to test the property
            //modelInstance.sEzsignfolderDescription shouldBe ("TODO")
        }

        // to test the property `fkiEzsignfoldertypeID` - The unique ID of the Ezsignfoldertype.
        should("test fkiEzsignfoldertypeID") {
            // uncomment below to test the property
            //modelInstance.fkiEzsignfoldertypeID shouldBe ("TODO")
        }

        // to test the property `objEzsignfoldertype`
        should("test objEzsignfoldertype") {
            // uncomment below to test the property
            //modelInstance.objEzsignfoldertype shouldBe ("TODO")
        }

        // to test the property `fkiTimezoneID` - The unique ID of the Timezone
        should("test fkiTimezoneID") {
            // uncomment below to test the property
            //modelInstance.fkiTimezoneID shouldBe ("TODO")
        }

        // to test the property `sEzsignfoldertypeNameX`
        should("test sEzsignfoldertypeNameX") {
            // uncomment below to test the property
            //modelInstance.sEzsignfoldertypeNameX shouldBe ("TODO")
        }

        // to test the property `fkiBillingentityinternalID` - The unique ID of the Billingentityinternal.
        should("test fkiBillingentityinternalID") {
            // uncomment below to test the property
            //modelInstance.fkiBillingentityinternalID shouldBe ("TODO")
        }

        // to test the property `sBillingentityinternalDescriptionX` - The description of the Billingentityinternal in the language of the requester
        should("test sBillingentityinternalDescriptionX") {
            // uncomment below to test the property
            //modelInstance.sBillingentityinternalDescriptionX shouldBe ("TODO")
        }

        // to test the property `fkiEzsigntsarequirementID` - The unique ID of the Ezsigntsarequirement.  Determine if a Time Stamping Authority should add a timestamp on each of the signature. Valid values:  |Value|Description| |-|-| |1|No. TSA Timestamping will requested. This will make all signatures a lot faster since no round-trip to the TSA server will be required. Timestamping will be made using eZsign server's time.| |2|Best effort. Timestamping from a Time Stamping Authority will be requested but is not mandatory. In the very improbable case it cannot be completed, the timestamping will be made using eZsign server's time. **Additional fee applies**| |3|Mandatory. Timestamping from a Time Stamping Authority will be requested and is mandatory. In the very improbable case it cannot be completed, the signature will fail and the user will be asked to retry. **Additional fee applies**|
        should("test fkiEzsigntsarequirementID") {
            // uncomment below to test the property
            //modelInstance.fkiEzsigntsarequirementID shouldBe ("TODO")
        }

        // to test the property `sEzsigntsarequirementDescriptionX` - The description of the Ezsigntsarequirement in the language of the requester
        should("test sEzsigntsarequirementDescriptionX") {
            // uncomment below to test the property
            //modelInstance.sEzsigntsarequirementDescriptionX shouldBe ("TODO")
        }

        // to test the property `tEzsignfolderNote` - Note about the Ezsignfolder
        should("test tEzsignfolderNote") {
            // uncomment below to test the property
            //modelInstance.tEzsignfolderNote shouldBe ("TODO")
        }

        // to test the property `bEzsignfolderIsdisposable` - If the Ezsigndocument can be disposed
        should("test bEzsignfolderIsdisposable") {
            // uncomment below to test the property
            //modelInstance.bEzsignfolderIsdisposable shouldBe ("TODO")
        }

        // to test the property `eEzsignfolderSendreminderfrequency`
        should("test eEzsignfolderSendreminderfrequency") {
            // uncomment below to test the property
            //modelInstance.eEzsignfolderSendreminderfrequency shouldBe ("TODO")
        }

        // to test the property `iEzsignfolderSendreminderfirstdays` - The number of days before the the first reminder sending
        should("test iEzsignfolderSendreminderfirstdays") {
            // uncomment below to test the property
            //modelInstance.iEzsignfolderSendreminderfirstdays shouldBe ("TODO")
        }

        // to test the property `iEzsignfolderSendreminderotherdays` - The number of days after the first reminder sending
        should("test iEzsignfolderSendreminderotherdays") {
            // uncomment below to test the property
            //modelInstance.iEzsignfolderSendreminderotherdays shouldBe ("TODO")
        }

        // to test the property `dtEzsignfolderDelayedsenddate` - The date and time at which the Ezsignfolder will be sent in the future.
        should("test dtEzsignfolderDelayedsenddate") {
            // uncomment below to test the property
            //modelInstance.dtEzsignfolderDelayedsenddate shouldBe ("TODO")
        }

        // to test the property `dtEzsignfolderDuedate` - The maximum date and time at which the Ezsignfolder can be signed.
        should("test dtEzsignfolderDuedate") {
            // uncomment below to test the property
            //modelInstance.dtEzsignfolderDuedate shouldBe ("TODO")
        }

        // to test the property `dtEzsignfolderSentdate` - The date and time at which the Ezsignfolder was sent the last time.
        should("test dtEzsignfolderSentdate") {
            // uncomment below to test the property
            //modelInstance.dtEzsignfolderSentdate shouldBe ("TODO")
        }

        // to test the property `dtEzsignfolderScheduledarchive` - The scheduled date and time at which the Ezsignfolder should be archived.
        should("test dtEzsignfolderScheduledarchive") {
            // uncomment below to test the property
            //modelInstance.dtEzsignfolderScheduledarchive shouldBe ("TODO")
        }

        // to test the property `dtEzsignfolderScheduleddispose` - The scheduled date at which the Ezsignfolder should be Disposed.
        should("test dtEzsignfolderScheduleddispose") {
            // uncomment below to test the property
            //modelInstance.dtEzsignfolderScheduleddispose shouldBe ("TODO")
        }

        // to test the property `eEzsignfolderStep`
        should("test eEzsignfolderStep") {
            // uncomment below to test the property
            //modelInstance.eEzsignfolderStep shouldBe ("TODO")
        }

        // to test the property `dtEzsignfolderClose` - The date and time at which the Ezsignfolder was closed. Either by applying the last signature or by completing it prematurely.
        should("test dtEzsignfolderClose") {
            // uncomment below to test the property
            //modelInstance.dtEzsignfolderClose shouldBe ("TODO")
        }

        // to test the property `tEzsignfolderMessage` - A custom text message that will be added to the email sent.
        should("test tEzsignfolderMessage") {
            // uncomment below to test the property
            //modelInstance.tEzsignfolderMessage shouldBe ("TODO")
        }

        // to test the property `objAudit`
        should("test objAudit") {
            // uncomment below to test the property
            //modelInstance.objAudit shouldBe ("TODO")
        }

        // to test the property `sEzsignfolderExternalid` - This field can be used to store an External ID from the client's system.  Anything can be stored in this field, it will never be evaluated by the eZmax system and will be returned AS-IS.  To store multiple values, consider using a JSON formatted structure, a URL encoded string, a CSV or any other custom format. 
        should("test sEzsignfolderExternalid") {
            // uncomment below to test the property
            //modelInstance.sEzsignfolderExternalid shouldBe ("TODO")
        }

        // to test the property `objTimezone`
        should("test objTimezone") {
            // uncomment below to test the property
            //modelInstance.objTimezone shouldBe ("TODO")
        }

    }
}
