/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package eZmaxApi.models

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import eZmaxApi.models.CustomEzsignfoldertypeResponse

class CustomEzsignfoldertypeResponseTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of CustomEzsignfoldertypeResponse
        //val modelInstance = CustomEzsignfoldertypeResponse()

        // to test the property `pkiEzsignfoldertypeID` - The unique ID of the Ezsignfoldertype.
        should("test pkiEzsignfoldertypeID") {
            // uncomment below to test the property
            //modelInstance.pkiEzsignfoldertypeID shouldBe ("TODO")
        }

        // to test the property `fkiFontIDAnnotation` - The unique ID of the Font
        should("test fkiFontIDAnnotation") {
            // uncomment below to test the property
            //modelInstance.fkiFontIDAnnotation shouldBe ("TODO")
        }

        // to test the property `fkiFontIDFormfield` - The unique ID of the Font
        should("test fkiFontIDFormfield") {
            // uncomment below to test the property
            //modelInstance.fkiFontIDFormfield shouldBe ("TODO")
        }

        // to test the property `fkiFontIDSignature` - The unique ID of the Font
        should("test fkiFontIDSignature") {
            // uncomment below to test the property
            //modelInstance.fkiFontIDSignature shouldBe ("TODO")
        }

        // to test the property `sEzsignfoldertypeNameX` - The name of the Ezsignfoldertype in the language of the requester
        should("test sEzsignfoldertypeNameX") {
            // uncomment below to test the property
            //modelInstance.sEzsignfoldertypeNameX shouldBe ("TODO")
        }

        // to test the property `bEzsignfoldertypeSendproofezsignsigner` - Whether we send the proof in the email to Ezsignsigner
        should("test bEzsignfoldertypeSendproofezsignsigner") {
            // uncomment below to test the property
            //modelInstance.bEzsignfoldertypeSendproofezsignsigner shouldBe ("TODO")
        }

        // to test the property `bEzsignfoldertypeAllowdownloadattachmentezsignsigner` - Whether we allow the Ezsigndocument to be downloaded by an Ezsignsigner
        should("test bEzsignfoldertypeAllowdownloadattachmentezsignsigner") {
            // uncomment below to test the property
            //modelInstance.bEzsignfoldertypeAllowdownloadattachmentezsignsigner shouldBe ("TODO")
        }

        // to test the property `bEzsignfoldertypeAllowdownloadproofezsignsigner` - Whether we allow the proof to be downloaded by an Ezsignsigner
        should("test bEzsignfoldertypeAllowdownloadproofezsignsigner") {
            // uncomment below to test the property
            //modelInstance.bEzsignfoldertypeAllowdownloadproofezsignsigner shouldBe ("TODO")
        }

        // to test the property `bEzsignfoldertypeAutomaticsignature` - Whether we allow the automatic signature by an User
        should("test bEzsignfoldertypeAutomaticsignature") {
            // uncomment below to test the property
            //modelInstance.bEzsignfoldertypeAutomaticsignature shouldBe ("TODO")
        }

        // to test the property `bEzsignfoldertypeDelegate` - Wheter if delegation of signature is allowed to another user or not
        should("test bEzsignfoldertypeDelegate") {
            // uncomment below to test the property
            //modelInstance.bEzsignfoldertypeDelegate shouldBe ("TODO")
        }

        // to test the property `bEzsignfoldertypeDiscussion` - Wheter if creating a new Discussion is allowed or not
        should("test bEzsignfoldertypeDiscussion") {
            // uncomment below to test the property
            //modelInstance.bEzsignfoldertypeDiscussion shouldBe ("TODO")
        }

        // to test the property `bEzsignfoldertypeReassignezsignsigner` - Wheter if Reassignment of signature is allowed by a signatory to another signatory or not
        should("test bEzsignfoldertypeReassignezsignsigner") {
            // uncomment below to test the property
            //modelInstance.bEzsignfoldertypeReassignezsignsigner shouldBe ("TODO")
        }

        // to test the property `bEzsignfoldertypeReassignuser` - Wheter if Reassignment of signature is allowed by a user to a signatory or another user or not
        should("test bEzsignfoldertypeReassignuser") {
            // uncomment below to test the property
            //modelInstance.bEzsignfoldertypeReassignuser shouldBe ("TODO")
        }

        // to test the property `bEzsignfoldertypeReassigngroup` - Wheter if Reassignment of signatures of the groups to which the user belongs is authorized by a user to himself
        should("test bEzsignfoldertypeReassigngroup") {
            // uncomment below to test the property
            //modelInstance.bEzsignfoldertypeReassigngroup shouldBe ("TODO")
        }

        // to test the property `iEzsignfoldertypeDeadlinedays` - The number of days to get all Ezsignsignatures
        should("test iEzsignfoldertypeDeadlinedays") {
            // uncomment below to test the property
            //modelInstance.iEzsignfoldertypeDeadlinedays shouldBe ("TODO")
        }

        // to test the property `iEzsignfoldertypeFontsizeannotation` - Font size for annotations
        should("test iEzsignfoldertypeFontsizeannotation") {
            // uncomment below to test the property
            //modelInstance.iEzsignfoldertypeFontsizeannotation shouldBe ("TODO")
        }

        // to test the property `iEzsignfoldertypeFontsizeformfield` - Font size for form fields
        should("test iEzsignfoldertypeFontsizeformfield") {
            // uncomment below to test the property
            //modelInstance.iEzsignfoldertypeFontsizeformfield shouldBe ("TODO")
        }

    }
}
