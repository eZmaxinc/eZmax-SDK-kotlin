/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package eZmaxApi.models

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import eZmaxApi.models.ActivesessionGetCurrentV1ResponseMPayload
import eZmaxApi.models.ActivesessionResponseCompoundApikey
import eZmaxApi.models.ActivesessionResponseCompoundUser
import eZmaxApi.models.FieldEActivesessionEzsign
import eZmaxApi.models.FieldEActivesessionEzsignaccess
import eZmaxApi.models.FieldEActivesessionEzsignprepaid
import eZmaxApi.models.FieldEActivesessionOrigin
import eZmaxApi.models.FieldEActivesessionRealestateinprogress
import eZmaxApi.models.FieldEActivesessionUsertype
import eZmaxApi.models.FieldEActivesessionWeekdaystart
import eZmaxApi.models.FieldESystemconfigurationEzsignofficeplan
import eZmaxApi.models.FieldEUserEzsignaccess
import eZmaxApi.models.FieldEUserEzsignprepaid

class ActivesessionGetCurrentV1ResponseMPayloadTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of ActivesessionGetCurrentV1ResponseMPayload
        //val modelInstance = ActivesessionGetCurrentV1ResponseMPayload()

        // to test the property `eActivesessionUsertype`
        should("test eActivesessionUsertype") {
            // uncomment below to test the property
            //modelInstance.eActivesessionUsertype shouldBe ("TODO")
        }

        // to test the property `eActivesessionOrigin`
        should("test eActivesessionOrigin") {
            // uncomment below to test the property
            //modelInstance.eActivesessionOrigin shouldBe ("TODO")
        }

        // to test the property `eActivesessionWeekdaystart`
        should("test eActivesessionWeekdaystart") {
            // uncomment below to test the property
            //modelInstance.eActivesessionWeekdaystart shouldBe ("TODO")
        }

        // to test the property `fkiLanguageID` - The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English|
        should("test fkiLanguageID") {
            // uncomment below to test the property
            //modelInstance.fkiLanguageID shouldBe ("TODO")
        }

        // to test the property `sCompanyNameX` - The Name of the Company in the language of the requester
        should("test sCompanyNameX") {
            // uncomment below to test the property
            //modelInstance.sCompanyNameX shouldBe ("TODO")
        }

        // to test the property `sDepartmentNameX` - The Name of the Department in the language of the requester
        should("test sDepartmentNameX") {
            // uncomment below to test the property
            //modelInstance.sDepartmentNameX shouldBe ("TODO")
        }

        // to test the property `bActivesessionDebug` - Whether the active session is in debug or not
        should("test bActivesessionDebug") {
            // uncomment below to test the property
            //modelInstance.bActivesessionDebug shouldBe ("TODO")
        }

        // to test the property `bActivesessionIssuperadmin` - Whether the active session is superadmin or not
        should("test bActivesessionIssuperadmin") {
            // uncomment below to test the property
            //modelInstance.bActivesessionIssuperadmin shouldBe ("TODO")
        }

        // to test the property `eActivesessionEzsignaccess`
        should("test eActivesessionEzsignaccess") {
            // uncomment below to test the property
            //modelInstance.eActivesessionEzsignaccess shouldBe ("TODO")
        }

        // to test the property `pksCustomerCode` - The customer code assigned to your account
        should("test pksCustomerCode") {
            // uncomment below to test the property
            //modelInstance.pksCustomerCode shouldBe ("TODO")
        }

        // to test the property `fkiSystemconfigurationtypeID` - The unique ID of the Systemconfigurationtype
        should("test fkiSystemconfigurationtypeID") {
            // uncomment below to test the property
            //modelInstance.fkiSystemconfigurationtypeID shouldBe ("TODO")
        }

        // to test the property `eUserEzsignaccess`
        should("test eUserEzsignaccess") {
            // uncomment below to test the property
            //modelInstance.eUserEzsignaccess shouldBe ("TODO")
        }

        // to test the property `aPkiPermissionID` - An array of permissions granted to the user or api key
        should("test aPkiPermissionID") {
            // uncomment below to test the property
            //modelInstance.aPkiPermissionID shouldBe ("TODO")
        }

        // to test the property `objUserReal`
        should("test objUserReal") {
            // uncomment below to test the property
            //modelInstance.objUserReal shouldBe ("TODO")
        }

        // to test the property `aEModuleInternalname` - An Array of Registered modules.  These are the modules that are Licensed to be used by the User or the API Key.
        should("test aEModuleInternalname") {
            // uncomment below to test the property
            //modelInstance.aEModuleInternalname shouldBe ("TODO")
        }

        // to test the property `bActivesessionAttachment` - Can access attachment when we clone a user
        should("test bActivesessionAttachment") {
            // uncomment below to test the property
            //modelInstance.bActivesessionAttachment shouldBe ("TODO")
        }

        // to test the property `bActivesessionCanafe` - Can access canafe when we clone a user
        should("test bActivesessionCanafe") {
            // uncomment below to test the property
            //modelInstance.bActivesessionCanafe shouldBe ("TODO")
        }

        // to test the property `bActivesessionFinancial` - Can access financial element when we clone a user
        should("test bActivesessionFinancial") {
            // uncomment below to test the property
            //modelInstance.bActivesessionFinancial shouldBe ("TODO")
        }

        // to test the property `bActivesessionRealestatecompleted` - Can access closed realestate folders when we clone a user
        should("test bActivesessionRealestatecompleted") {
            // uncomment below to test the property
            //modelInstance.bActivesessionRealestatecompleted shouldBe ("TODO")
        }

        // to test the property `eActivesessionEzsign`
        should("test eActivesessionEzsign") {
            // uncomment below to test the property
            //modelInstance.eActivesessionEzsign shouldBe ("TODO")
        }

        // to test the property `eActivesessionEzsignprepaid`
        should("test eActivesessionEzsignprepaid") {
            // uncomment below to test the property
            //modelInstance.eActivesessionEzsignprepaid shouldBe ("TODO")
        }

        // to test the property `eActivesessionRealestateinprogress`
        should("test eActivesessionRealestateinprogress") {
            // uncomment below to test the property
            //modelInstance.eActivesessionRealestateinprogress shouldBe ("TODO")
        }

        // to test the property `fkiSignatureID` - The unique ID of the Signature
        should("test fkiSignatureID") {
            // uncomment below to test the property
            //modelInstance.fkiSignatureID shouldBe ("TODO")
        }

        // to test the property `fkiEzsignuserID` - The unique ID of the Ezsignuser
        should("test fkiEzsignuserID") {
            // uncomment below to test the property
            //modelInstance.fkiEzsignuserID shouldBe ("TODO")
        }

        // to test the property `bSystemconfigurationEzsignpaidbyoffice` - Whether if Ezsign is paid by the company or not
        should("test bSystemconfigurationEzsignpaidbyoffice") {
            // uncomment below to test the property
            //modelInstance.bSystemconfigurationEzsignpaidbyoffice shouldBe ("TODO")
        }

        // to test the property `eSystemconfigurationEzsignofficeplan`
        should("test eSystemconfigurationEzsignofficeplan") {
            // uncomment below to test the property
            //modelInstance.eSystemconfigurationEzsignofficeplan shouldBe ("TODO")
        }

        // to test the property `eUserEzsignprepaid`
        should("test eUserEzsignprepaid") {
            // uncomment below to test the property
            //modelInstance.eUserEzsignprepaid shouldBe ("TODO")
        }

        // to test the property `bUserEzsigntrial` - Whether the User's eZsign subscription is a trial
        should("test bUserEzsigntrial") {
            // uncomment below to test the property
            //modelInstance.bUserEzsigntrial shouldBe ("TODO")
        }

        // to test the property `dtUserEzsignprepaidexpiration` - The eZsign prepaid expiration date
        should("test dtUserEzsignprepaidexpiration") {
            // uncomment below to test the property
            //modelInstance.dtUserEzsignprepaidexpiration shouldBe ("TODO")
        }

        // to test the property `objUserCloned`
        should("test objUserCloned") {
            // uncomment below to test the property
            //modelInstance.objUserCloned shouldBe ("TODO")
        }

        // to test the property `objApikey`
        should("test objApikey") {
            // uncomment below to test the property
            //modelInstance.objApikey shouldBe ("TODO")
        }

    }
}
